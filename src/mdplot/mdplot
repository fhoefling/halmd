#!/usr/bin/python
#
# mdplot - Molecular Dynamics simulation plotter
#
# Copyright (C) 2008  Peter Colberg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import tables
import os, os.path, sys

import correlation
import energy
import trajectory


"""
Molecular dynamics simulation plotter
"""
def main(args):
    if len(args) < 1:
        print >> sys.stderr, 'Usage: %s [file]' % os.path.basename(sys.argv[0])
        sys.exit(1)

    # open HDF5 data files
    h5files = []
    for fn in args:
        try:
            h5files.append(tables.openFile(fn, mode='r'))
        except IOError:
            print >> sys.stderr, "%s: ERROR: could not read file: %s" % (os.path.basename(sys.argv[0]), fn)
            sys.exit(1)

    basename = [ os.path.splitext(fn)[0] for fn in args ]
    root = [ f.root for f in h5files ]

    # thermal equilibrium properties
    tep = []
    # correlations
    tcf = []
    # trajectories
    trj = []

    # detect data format
    for i in range(len(root)):
        if 'EKIN' in root[i]:
            # thermodynamic equilibrium properties file
            tep.append((root[i], basename[i]))

        elif 'MSD' in root[i]:
            # correlations file
            tcf.append((root[i], basename[i]))

        elif 'trajectory' in root[i]:
            # trajectory dump file
            trj.append((root[i], basename[i]))

        else:
            print >> sys.stderr, "%s: ERROR: HDF5 file contains unknown data" % (os.path.basename(sys.argv[0]))
            sys.exit(1)

    # apply plot functions
    if len(tcf):
        correlation.plot(tcf)
    if len(tep):
        energy.plot(tep)
    if len(trj):
        trajectory.plot(trj)

    # close HDF5 data files
    for f in h5files:
        f.close()


if __name__ == '__main__':
    main(sys.argv[1:])

