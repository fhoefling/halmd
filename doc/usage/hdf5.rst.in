HDF5 data files
***************

Why HDF5?
=========

While ASCII is a nice way to effortlessly dump arbitrary data in human readable
form without worrying much about portability, it has some serious drawbacks:

* ASCII representation requires about twice as much storage to represent
  floating-point number data than the binary equivalent. Large datasets such as
  particle trajectories require compression for reasonable file sizes.

* The conversion between binary and ASCII is lossy: A binary floating-point number
  may not have an exact decimal representation. From the physics point of view,
  loss of accuracy in the least significant digit is bearableâ€”for exact
  reproducibility of a simulation, for example to inspect software bugs, it is
  not.

* Most importantly, ASCII does not enforce any data structure.


The HDF5 file format presents a solution to these problems:

* Data is stored in a binary *and* portable format.
  HDF5 transparently handles any C data type: 8/16/32/64-bit integers and
  single- or double precision floating point numbers, whether in big- or
  little-Endian representation.

* A file is structured hierarchically: Every file contains a root group,
  which may itself contain named datasets or further named groups. Both
  datasets and groups may described with attributes of arbitrary type.

Furthermore, HDF5 is a well established scientific file format, with C, C++,
Fortran and python bindings available.


Working with HDF5 files
=======================

Using the h5dump tool
---------------------

For a quick analysis of HDF5 data files, use the h5dump tool::

  h5dump file | less -S

Individual groups or datasets may be displayed with::

  h5dump -g /path/to/group file
  h5dump -d /path/to/dataset file

To inspect only the structure of a file, ommitting the data, use::

  h5dump -A file


Using Python and h5py
---------------------

`h5py <http://www.h5py.org>`_ is a python module wrapping the
HDF5 library. It is based on NumPy, which implements a MATLAB-like interface to
multi-dimensional arrays.  This is where the HDF5 format reveals its true
strength, as NumPy allows arbitrary transformations of HDF5 datasets, all while
using a real programming language.

As a simple example, we open a HDF5 file and print a dataset::

  import h5py
  f = h5py.File("file", "r")
  d = f["path/to/dataset"]
  print d
  print d[0:5]
  f.close()

Attributes may be read with the attrs class member::

  print f["param"].attrs["file_version"]
  print f["param/box"].attrs.keys()
  print f["param/box"].attrs["dimension"]


For further information, refer to the `Numpy and Scipy Documentation
<http://docs.scipy.org/doc/>`_ and the `HDF5 for Python Documentation
<http://docs.h5py.org>`_.


File format
===========

The file format is moved towards the `H5MD format 1.0 <http://nongnu.org/h5md>`_,
see their website for a documentation of the format.
