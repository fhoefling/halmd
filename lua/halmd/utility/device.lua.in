--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

-- grab C++ wrappers
local device = assert(libhalmd.utility.gpu.device)

---
-- Device management
-- =================
--
-- The device module selects a GPU from the pool of available GPUs.
-- It allocates a CUDA context on that device, which will remain active till
-- the program exits. Diagnostic information is logged about CUDA driver and
-- runtime versions, and GPU capabilities.
--
-- :attr:`halmd.utility.device.gpu` may be used to query whether the GPU is being used::
--
--    local device = require("halmd.utility.device")
--    if device.gpu then
--        -- using GPU
--    else
--        -- using host
--    end
--
-- To select a specific GPU, you may use the `nvlock <http://git.colberg.org/nvcuda-tools.git>`_ tool::
--
--    CUDA_DEVICE=0 nvlock halmd liquid.lua
--
-- nvlock will lock the CUDA device for other processes using nvlock, similar
-- to compute prohibitive mode. This allows scheduling one process per GPU.
--
-- .. attribute:: gpu
--
--    Ordinal number of the CUDA device.
--

-- construct singleton instance
return device()
