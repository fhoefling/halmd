--
-- Copyright Â© 2010-2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

---
-- Device management
-- =================
--
-- The device module selects a GPU from the pool of available GPUs, or a subset
-- thereof if a list of devices is passed. It allocates a CUDA context on that
-- device, which will remain active till the program exits. Diagnostic
-- information is logged about CUDA driver and runtime versions, and
-- GPU capabilities.
--
-- Note that this module automatically loads a dynamic plugin that contains
-- GPU-related modules. If the plugin fails to load, e.g. if the CUDA library
-- is not available on the system, GPU support is disabled, and the host is
-- used.
--
-- :func:`halmd.utility.device` may be used to query whether the GPU is being used::
--
--   local device = require("halmd.utility.device")
--   if device() then
--       -- using GPU
--   else
--       -- using host
--   end
--
local M = module.singleton("halmd.utility.device")

--- Construct device instance.
--
-- :param boolean args.disable_gpu: do *not* use GPU (optional)
-- :param table args.devices: sequence of CUDA devices (optional)
-- :returns: instance of device module if GPU is enabled, otherwise ``nil``
--
-- :func:`halmd.utility.device` returns a singleton instance, i.e. the first call will
-- create an instance that is kept alive until the end of program execution,
-- and subsequent calls will return this instance.
--
function M.__new(args)
    local disable_gpu = args and args.disable_gpu
    local devices = args and args.devices

    -- load dynamically loadable module with GPU support if available
    if not disable_gpu and pcall(require, "halmd.gpu") then
        local device = assert(libhalmd.utility.gpu.device)
        if devices then
            return device(devices)
        else
            return device()
        end
    end
end

return M
