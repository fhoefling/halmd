--
-- Copyright Â© 2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

---
-- Program Options
-- ===============
--
-- This module allows the use of command-line options in HALMD scripts.
--
-- Example:
--
-- .. code-block:: none
--
--   halmd liquid.lua --lennard-jones epsilon=2 sigma=2 --disable-gpu
--
local M = {}

local argument_parser = {}

local po = setmetatable({}, {__index = assert(libhalmd.program_options)})

-- add type aliases for built-in argument types
po.value.number         = assert(po.value.float64)
po.value.integer        = assert(po.value.int64)
po.value.accumulate     = assert(po.accum_value)
po.multi_value.number   = assert(po.multi_value.float64)
po.multi_value.integer  = assert(po.multi_value.int64)

---
-- Create new command-line parser.
--
-- Example::
--
--    local options = require("halmd.utility.program_options")
--
--    local parser = options.argument_parser()
--
function M.argument_parser()
    local self = {
        _desc = po.options_description()
      , _options = {}
    }
    return setmetatable(self, {__index = argument_parser})
end

---
-- Add argument to parser.
--
-- :param string name: long name, and (optionally) short name separated by comma
-- :param table args: keyword arguments
-- :param string args.type: value type of option
-- :param string args.help: description of option for --help
-- :param boolean args.composing: allow multiple occurences with single value (default: ``false``)
-- :param boolean args.multitoken: allow multiple occurences with multiple values (default: ``false``)
-- :param function args.notifier: notifier function (optional)
-- :param args.default: default option value (optional)
-- :param args.implicit: implicit option value (optional)
--
-- The following value types are supported:
--
-- ====================   =======================================
-- Type                   Description
-- ====================   =======================================
-- boolean                Boolean
-- string                 String
-- number                 Double-precision floating-point
-- integer                Signed 64-bit integer
-- accumulate             Increment integer
-- ====================   =======================================
--
-- These integral and floating-point value types are supported:
--
-- ====================   =======================================
-- Type                   Description
-- ====================   =======================================
-- int32                  Signed 32-bit integer
-- int64                  Signed 64-bit integer
-- uint32                 Unsigned 32-bit integer
-- uint64                 Unsigned 64-bit integer
-- float32                Single-precision floating-point
-- float64                Double-precision floating-point
-- ====================   =======================================
--
-- The optional notifier function has the following arguments:
--
-- :param table args: parsed arguments
-- :param string name: long name of this option
-- :param key: parsed value of this option
--
-- Example::
--
--    parser:add_argument("disable-gpu", {type = "boolean", help = "disable GPU acceleration"})
--
function argument_parser:add_argument(name, args)
    local name = assert(name)
    local help = assert(args.help)
    local value
    if args.multitoken or args.composing then
        value = assert(po.multi_value[args.type])()
    else
        value = assert(po.value[args.type])()
    end
    local option = po.option_description(name, value, help)
    local long_name = assert(option.long_name)
    local key = long_name:gsub("%-", "_")
    self._options[key] = option
    self._desc:add(option)

    local notifier = args.notifier
    value:notifier(function(value)
        if self._args[key] == nil then
            self._args[key] = value
        elseif notifier then
            notifier(self._args, key, value)
        end
    end)

    if args.multitoken then
        if self._is_group then
            error("multitoken arguments not allowed in argument group", 2)
        end
        value:multitoken()
    elseif args.composing then
        value:composing()
    end
    if args.default then
        value:default_value(args.default)
    end
    if args.implicit then
        value:implicit_value(args.implicit)
    end
end

---
-- Add argument group.
--
-- :param name: name of argument group
-- :returns: argument group
--
-- Example::
--
--    local group = parser:add_argument_group("lennard-jones")
--    group:add_argument("epsilon", {type = "number", help = "potential well depths"})
--    group:add_argument("sigma", {type = "number", help = "collision diameter"})
--
function argument_parser:add_argument_group(name)
    local name = assert(name)
    local value = po.multi_value.string()
    local option = po.option_description(name, value)
    local long_name = assert(option.long_name)
    local key = long_name:gsub("%-", "_")
    self._options[key] = option
    self._desc:add(option)

    local desc = po.options_description()
    local group = M.argument_parser()
    group._is_group = true

    value:multitoken()
    value:notifier(function(value)
        if self._args[key] == nil then
            local status, result = pcall(group.parse_args, group, value)
            if not status then
                error(("in group '%s': %s"):format(long_name, result))
            end
            self._args[key] = result
        end
    end)

    return group
end

---
-- Set default option values.
--
-- :param table defaults: argument names with default values
--
-- Example::
--
--     parser:set_defaults({particles = {9000, 1000}, number_density = 0.8})
--
function argument_parser:set_defaults(defaults)
    local options = assert(self._options)
    for k, v in pairs(defaults) do
        local option = options[k]
        if not option then
            error(("undefined argument '%s'"):format(k), 2)
        end
        local semantic = assert(option.semantic)
        if not pcall(semantic.default_value, semantic, v) then
            error(("invalid default value to argument '%s'"):format(k), 2)
        end
    end
end

--
-- Extra parser for argument groups.
--
local function argument_group_parser(arg)
    local name, value = arg:match("^([^=]*)=(.*)$")
    if name then
        return name, value
    end
    return arg
end

---
-- Parse arguments.
--
-- :param table args: string array with command-line arguments, or ``nil``
-- :returns: parsed arguments
--
-- If ``args`` is ``nil``, the ``halmd`` command-line arguments are parsed.
--
-- Example::
--
--    local args = parser:parse_args()
--
function argument_parser:parse_args(args)
    local args = args or assert(_G.arg)
    local parser = po.command_line_parser(args)
    local desc = po.options_description()
    desc:add(self._desc)
    desc:add(po.option_description("help,h", po.untyped_value()))
    parser:options(desc)
    parser:disallow_guessing()
    if self._is_group then
        parser:extra_parser(argument_group_parser)
    else
        parser:positional(po.positional_options_description())
    end
    local parsed = parser:run()
    local vm = po.variables_map()
    vm:store(parsed)
    if vm:count("help") > 0 then
        print(self._desc)
        os.exit(0)
    end
    local result = {}
    self._args = result
    vm:notify() -- first notify stores values in self._args
    vm:notify() -- second notify invokes (optional) notifier functions
    self._args = nil
    return result
end

return M
