--
-- Copyright © 2013 Felix Höfling
-- Copyright © 2011 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

---
-- Utilities
-- =========
--
-- .. toctree::
--    :maxdepth: 2
--    :glob:
--
--    *
--
local M = module.loader("halmd.utility")

---
-- Functions on tables
-- -------------------
--

---
-- Test if table is empty.
--
function M.empty(t)
  return next(t) == nil
end

---
-- Returns table with sorted keys of table t as values.
--
function M.keys(t)
    local keys = {}
    for k, v in pairs(t) do
        table.insert(keys, k)
    end
    table.sort(keys)
    return keys
end

---
-- Returns iterator over pairs of table t sorted by key.
--
function M.sorted(t)
    local keys = M.keys(t)
    local i = 0
    local n = #keys
    return function()
        i = i + 1
        if i <= n then
            local k = keys[i]
            return k, t[k]
        end
        return nil
    end
end

---
-- Returns table with keys as values and values as keys.
--
function M.reverse(t)
    local result = {}
    for k, v in pairs(t) do
        result[v] = k
    end
    return result
end

---
-- Functions on strings
-- --------------------
--

---
-- Interpolate strings supporting Pythonic formatting specifications
-- (see http://lua-users.org/wiki/StringInterpolation, example by RiciLake)
--
-- :param string s: formatting string
-- :param table t: (key, value) pairs
--
-- :returns: interpolated copy of string 's'
--
-- Occurrences of '{key:fmt}' in the formatting string are substituted by
-- '("%fmt"):format(value)', where 'fmt' is one of the C-printf formatting
-- codes. The method is added to the `string` type as `string.interp`.
--
-- Example:
--
-- print( ("{name:s} is {val:7.2f}%"):interp({name = "concentration", val = 56.2795}) )
--
-- --> "concentration is   56.28%"
--
function M.interp(s, t)
  return (s:gsub('%{([%a_][%w_]*)(:[-0-9%.]*[cdeEfgGiouxXsq])%}',  -- FIXME make match of second group optional
             function(k, fmt)
                 fmt = fmt and fmt:sub(2) or "s" -- default format: "s"
                 return t[k] and ("%"..fmt):format(t[k]) or '%('..k..')'..fmt
             end
         ))
end
getmetatable("").__index.interp = M.interp -- make method known to string type

---
-- Assertions
-- ----------
--

---
-- Assert keyword argument of table and return its value.
--
-- :param table args: argument table
-- :param string key: parameter key
-- :param number level: call stack level for error message *(default: 2)*
--
-- :returns: `args[key]`
--
function M.assert_kwarg(args, key, level)
    local level = level or 2
    M.assert_type(args, "table", level + 1)
    local value = args[key]
    if not value then
        error(("missing keyword argument: %s"):format(key), level + 1)
    end
    return value
end

---
-- Assert type of variable.
--
-- :param var: variable to check
-- :param string name: Lua type name
-- :param number level: call stack level for error message *(default: 2)*
--
-- :returns: `var`
--
function M.assert_type(var, name, level)
    local level = level or 2
    if type(var) ~= name then
        error(("invalid type: %s expected, got %s"):format(name, type(var)), level + 1)
    end
    return var
end

return M
