--
-- Copyright © 2013 Felix Höfling
-- Copyright © 2014 Nicolas Höft
-- Copyright © 2011 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

---
-- Numeric
-- =======
--
-- This module provides utilities for simple numerics in Lua.
--

local M = {}

---
-- Find the last value of a table that satisfies comp(a,b)
--
-- :param table t: input table
-- :param comp: callable that takes two elements of ``t`` and returns ``true`` or ``false``
-- :returns: last element in ``t`` that satisfied ``comp(a,b)``
function M.find_comp(t, comp)
    if #t == 0 then return nil end
    local value = t[1]
    for i = 2, #t do
        if comp(value, t[i]) then
            value = t[i]
        end
    end
    return value
end

--_
-- Find the maximum value in a table
--
-- :param table t: input table
-- :returns: maximum value in ``t``
function M.max(t)
    return M.find_comp(t, function(a,b) return a < b end)
end

---
-- Find the minimum value in a table
--
-- :param table t: input table
-- :returns: minmum value in ``t``
function M.min(t)
    return M.find_comp(t, function(a,b) return a > b end)
end

---
-- Create matrix of given size with scalar value
--
-- :param number rows: number of rows
-- :param number columns: number of columns
-- :param value: value for each element of the matrix
-- :returns: matrix of dimension :math:`\text{rows} \times \text{columns}` with each element set to ``value``
function M.scalar_matrix(rows, columns, value)
    local mat = {}
    for i = 1, rows do
        local row = {}
        for j = 1, columns do
            row[j] = value
        end
        mat[i] = row
    end
    return mat
end

---
-- Calculate transpose of matrix
--
-- :param matrix m: input matrix
-- :returns: transpose of ``m``
function M.trans(m)
    local t = {}
    for i = 1, #m do
        local row = m[i]
        for j = 1, #row do
            if not t[j] then
                t[j] = {}
            end
            t[j][i] = row[j]
        end
    end
    return t
end

---
-- Return diagonal elements of n⨯n matrix
--
-- :param matrix m: input square matrix
-- :returns: table of diagonal elements of ``m``
function M.diag(m)
    local t = {}
    for i = 1, #m do
        t[i] = m[i][i]
    end
    return t
end

local function offset_to_multi_index(offset, index, dims, dim)
    if dim == #index then
        index[dim] = offset + 1
    else
        index[dim] = offset % dims[dim] + 1
        return offset_to_multi_index(math.floor(offset / dims[dim]), index, dims, dim+1)
    end
end

---
-- Convert one-dimensional offset to multi-dimensional index
--
-- :param number offset: 1-based one-dimensional index
-- :param table dims: maximum dimension of multi-dimensional array
-- :returns: 1-based multi dimensional index
function M.offset_to_multi_index(offset, dims)
    local index = {}
    -- reserve array size
    for i = 1, #dims do
        index[i] = 0
    end
    offset_to_multi_index(offset-1, index, dims, 1)
    return index
end

local function multi_index_to_offset(index, dims, dim)
    if dim == #index then
        return index[dim]
    end
    return index[dim] + dims[dim] * multi_index_to_offset(index, dims, dim+1)
end

---
-- Convert multi-dimensional index to one-dimensional offset
--
-- :param table index: multidimensional index
-- :param table dims: maximum dimension of multi-dimensional array
-- :returns: 1-based offset of ``index``
function M.multi_index_to_offset(index, dims)
    return multi_index_to_offset(index, dims, 1) + 1
end

return M
