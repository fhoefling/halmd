--
-- Copyright Â© 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

-- grab standard library
local assert = assert
local getmetatable = getmetatable
local setmetatable = setmetatable

module("halmd.singleton")

-- weak references to C++ singleton instances by Lua module
local singletons = setmetatable({}, { __mode = "v" })

--
-- register Lua module as C++ singleton instance creator
--
-- @param module Lua module
--
local function register(module)

    -- get module metatable set by halmd.modules.register
    local mt = assert(getmetatable(module))

    -- capture module constructor
    local new = assert(mt.__call)

    -- set singleton module constructor
    mt.__call = function(...)
        local singleton = singletons[module]
        if not singleton then
            -- construct C++ singleton instance
            singleton = new(...)
            -- store weak reference
            singletons[module] = singleton
        end
        return singleton
    end

end

setmetatable(_M, { __call = function(self, module) register(module) end })
