--
-- Copyright © 2010-2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

-- command-line options override H5MD file parameters
require("halmd.option")
require("halmd.parameter")

require("halmd.io.profiling.writer")
require("halmd.io.readers.trajectory")
require("halmd.io.writers.trajectory")
require("halmd.mdsim.box")
require("halmd.mdsim.force")
require("halmd.mdsim.integrator")
require("halmd.mdsim.position")
require("halmd.mdsim.velocity")
require("halmd.observables.sampler")
require("halmd.observables.ssf")
require("halmd.observables.thermodynamics")

-- grab modules
local mdsim = halmd.mdsim
local observables = halmd.observables
local profiling = halmd.io.profiling
local readers = halmd.io.readers
local writers = halmd.io.writers
-- grab standard library
local assert = assert
local pairs = pairs

module("halmd", halmd.modules.register)

--
-- Construct simulation
--
function new(args)
    -- create simulation box with particles
    mdsim.box()
    -- add integrator
    mdsim.integrator()
    -- add force
    mdsim.force()

    local reader = readers.trajectory()
    mdsim.position{ reader = reader }
    mdsim.velocity{ reader = reader }

    -- Construct sampler.
    local sampler = observables.sampler()

    -- Write trajectory to H5MD file.
    writers.trajectory{}
    -- Sample macroscopic state variables.
    observables.thermodynamics{}
    -- Sample static structure factor.
    observables.ssf{}

    -- Construct profiling writers.
    --
    -- The profiling writers write profiling run times for registered
    -- modules to the log file, and optionally a H5MD file.
    local profiling_writers = profiling.writer()

    -- From the table of profiling writers, add each profiling writer
    -- to the sampler, to invoke write after the simulation is finished.
    for _, writer in pairs(profiling_writers) do
        sampler:on_finish(writer.write)
    end

    -- Pass sampler from Lua to C++, to run the simulation outside of Lua.
    return sampler
end
