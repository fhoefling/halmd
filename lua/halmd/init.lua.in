--
-- Copyright © 2010-2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

-- command-line options override H5MD file parameters
require("halmd.option")
require("halmd.parameter")

require("halmd.io.profiling.writer")
require("halmd.io.statevars.writer")
require("halmd.io.trajectory.reader")
require("halmd.io.trajectory.writer")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.force")
require("halmd.mdsim.integrator")
require("halmd.mdsim.neighbour")
require("halmd.mdsim.particle")
require("halmd.mdsim.position")
require("halmd.mdsim.sort")
require("halmd.mdsim.velocity")
require("halmd.observables.dynamics.correlation")
require("halmd.observables.sampler")
require("halmd.observables.ssf")
require("halmd.observables.thermodynamics")

-- grab modules
local mdsim = halmd.mdsim
local observables = halmd.observables
local profiling = halmd.io.profiling
local statevars = halmd.io.statevars
local trajectory = halmd.io.trajectory
-- grab C++ wrappers
local po = libhalmd.po
-- grab standard library
local assert = assert
local pairs = pairs

module("halmd", halmd.modules.register)

--
-- Construct simulation
--
function new(args)
    local core = mdsim.core() -- singleton
    core.particle = mdsim.particle()
    core.box = mdsim.box()
    core.integrator = mdsim.integrator()
    core.force = mdsim.force()
    core.neighbour = mdsim.neighbour()
    core.sort = mdsim.sort()

    local reader = trajectory.reader()
    core.position = mdsim.position{ reader = reader }
    core.velocity = mdsim.velocity{ reader = reader }

    -- Construct sampler.
    local sampler = observables.sampler()

    -- Optionally write trajectory.
    if args.trajectory then
        sampler:on_sample(trajectory.writer().append, args.trajectory)
    end

    -- Optionally sample macroscopic state variables.
    if args.state_vars then
        local thermodynamics = observables.thermodynamics()
        sampler:on_prepare(thermodynamics.prepare, args.state_vars)
        sampler:on_sample(thermodynamics.sample, args.state_vars)
    end

    -- Optionally sample static structure factor.
    if args.state_vars then -- FIXME args.ssf
        sampler:on_sample(observables.ssf().sample, args.state_vars)
    end

    -- Optionally compute time-correlation functions.
    if args.correlation then
        local correlation = observables.dynamics.correlation{
            maximum_time = sampler.total_time
          , resolution = args.correlation * core.integrator.timestep
        }
        sampler:on_sample(correlation.sample, args.correlation)
        sampler:on_finish(correlation.finalise)
--         sampler:on_finish(correlation.writer().write)
    end

    -- FIXME connect revised writer to thermodynamics and ssf
    if args.state_vars then
        sampler:on_sample(statevars.writer().write, args.state_vars)
    end

    -- Construct profiling writers.
    --
    -- The profiling writers write profiling run times for registered
    -- modules to the log file, and optionally a H5MD file.
    local profiling_writers = profiling.writer()

    -- From the table of profiling writers, add each profiling writer
    -- to the sampler, to invoke write after the simulation is finished.
    for _, writer in pairs(profiling_writers) do
        sampler:on_finish(writer.write)
    end

    -- Pass sampler from Lua to C++, to run the simulation outside of Lua.
    return sampler
end

-- override module namespace
namespace = "sampler"

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc, globals)
    -- FIXME desc:add("ssf", po.uint64(), "sampling interval for static structure factor")
    desc:add("correlation", po.uint64(), "sampling interval for time-correlation functions")
    desc:add("state-vars", po.uint64(), "sampling interval for macroscopic state variables")
    desc:add("trajectory", po.uint64(), "sampling interval for trajectory")
end
