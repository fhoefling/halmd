--
-- Copyright © 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

--
-- Load HAL’s MD package
--
require("halmd.option")
require("halmd.io.profiling.writer")
require("halmd.io.statevars.writer")
require("halmd.io.trajectory.reader")
require("halmd.io.trajectory.writer")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.force")
require("halmd.mdsim.integrator")
require("halmd.mdsim.neighbour")
require("halmd.mdsim.particle")
require("halmd.mdsim.position")
require("halmd.mdsim.sort")
require("halmd.mdsim.velocity")
require("halmd.observables.ssf")
require("halmd.observables.thermodynamics")
require("halmd.sampler")

-- grab environment
local mdsim = halmd.mdsim
local io = halmd.io
local observables = halmd.observables
local sampler = halmd.sampler
local pairs = pairs

module("halmd", halmd.modules.register)

--
-- Construct simulation
--
function new()
    local core = mdsim.core() -- singleton
    core.particle = mdsim.particle()
    core.box = mdsim.box()
    core.integrator = mdsim.integrator()
    core.force = mdsim.force()
    core.neighbour = mdsim.neighbour()
    core.sort = mdsim.sort()

    local reader = io.trajectory.reader()
    core.position = mdsim.position{ reader = reader }
    core.velocity = mdsim.velocity{ reader = reader }

    local sampler = sampler() -- singleton
    sampler.trajectory_writer = io.trajectory.writer()
    sampler.observables = {
        observables.ssf()
      , observables.thermodynamics()
    }
    sampler.statevars_writer = io.statevars.writer()

    -- Construct profiling writers.
    --
    -- The profiling writers write profiling run times for registered
    -- modules to the log file, and optionally a H5MD file.
    local profiling_writers = io.profiling.writer()

    -- From the table of profiling writers, add each profiling writer
    -- to the sampler, to invoke write after the simulation is finished.
    for _, writer in pairs(profiling_writers) do
        sampler:on_finish(writer.write)
    end

    -- Pass sampler from Lua to C++, to run the simulation outside of Lua.
    return sampler
end
