--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local mdsim = {
    clock               = require("halmd.mdsim.clock")
  , particle            = require("halmd.mdsim.particle")
}
local writers = {
    file                = require("halmd.io.writers.file")
}
require("halmd.modules")
require("halmd.observables.density_mode")
require("halmd.observables.sampler")
require("halmd.observables.utility.wavevector")

-- grab modules
local observables = halmd.observables
-- grab C++ wrappers
local ssf_wrapper = {
    [2] = libhalmd.observables.ssf_2_
  , [3] = libhalmd.observables.ssf_3_
}
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local string = string

module("halmd.observables.ssf", halmd.modules.register)

--
-- construct instance of ssf module
--
-- @param args parameter table
-- @returns instance of ssf module
--
function new(args)
    -- command line options
    local every = args.every or 1000 -- default value
    local wavenumbers = args.wavenumbers
    local max_wavenumber = args.max_wavenumber or 12.6 -- default value, approx. 4π
    local decimation = args.decimation or 10 -- default value
    local tolerance = args.tolerance or 0.01 -- default value
    local max_count = args.max_count or 7 -- default value

    -- dependency injection
    local clock = mdsim.clock() -- singleton
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local logger = assert(args.logger)

    -- construct local wavevector module
    local wavevector = assert(observables.utility.wavevector)
    if wavenumbers then
        wavevector = wavevector{
            wavenumber = wavenumbers
          , tolerance = tolerance
          , max_count = max_count
        }
    else -- use maximum_wavenumber
        wavevector = wavevector{
            max_wavenumber = max_wavenumber
          , decimation = decimation
          , tolerance = tolerance
          , max_count = max_count
        }
    end

    -- construct density_mode module
    local density_mode = assert(observables.density_mode{wavevector = wavevector})

    -- construct ssf module
    local ssf = assert(ssf_wrapper[dimension])(density_mode, clock, particle.nbox, logger)

    -- acquire density modes before sampling static structure factor
    ssf:on_sample(density_mode.acquire)

    local sampler = observables.sampler() -- singleton
    local file = writers.file() -- singleton

    -- write wavenumbers only once
    local writer = file:writer{location = {"structure", "ssf"}, mode = "truncate"}
    writer:on_write(density_mode.wavenumber, {"wavenumber"})
    sampler:on_start{writer.write, tracker = ssf}

    -- convert (0-based) species index to name
    local function species(index)
        return string.char(string.byte("A") + index)
    end

    -- write all partial structure factors
    local writer = file:writer{location = {"structure", "ssf"}, mode = "append"}
    writer:on_prepend_write(ssf.sample)
    for i = 0, particle.ntype - 1 do
        for j = i, particle.ntype - 1 do
            writer:on_write(ssf:value(i, j), {species(i), species(j)})
        end
    end
    sampler:on_sample{writer.write, every, tracker = ssf}

    return ssf
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    profiler:on_profile{self, sample = "computation of static structure factor"}
end

--
-- returns module description
--
function description()
    return "static structure factor"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("every", po.uint64(), "sample interval for static structure factor")
    desc:add("wavenumbers", po.float_array():conflicts("max-wavenumber"), "list of wavenumbers")
    desc:add("max-wavenumber", po.float():conflicts("wavenumbers"), "maximum wavenumber of semi-linearly spaced grid")
    desc:add("decimation", po.uint():conflicts("wavenumbers"), "decimation of wavenumber grid")
    desc:add("tolerance", po.float(), "relative tolerance on wavevector magnitude")
    desc:add("max-count", po.uint(), "maximum number of wavevectors per wavenumber shell")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.tolerance = group:read_attribute("tolerance", h5.float())
    args.max_count = group:read_attribute("max_count", h5.uint())
end

--
-- write module parameters to HDF5 group
--
-- @param ssf     module instance
-- @param group   HDF5 group
--
function write_parameters(ssf, group)
    -- wavenumbers are stored along with the ssf data, e.g., in structure/ssf/wavenumber
    group:write_attribute("tolerance", h5.float(), ssf.wavevector.tolerance)
    group:write_attribute("max_count", h5.uint(), ssf.wavevector.max_count)
end
