--
-- Copyright © 2011-2012  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
}
local observables = {
    density_mode        = require("halmd.observables.density_mode")
  , sampler             = require("halmd.observables.sampler")
}
local writers = {
    file                = require("halmd.io.writers.file")
}

-- grab C++ wrappers
local ssf_wrapper = {
    [2] = libhalmd.observables.ssf_2_
  , [3] = libhalmd.observables.ssf_3_
}
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local ipairs = ipairs
local string = string
local type = type

local M = module("halmd.observables.ssf")

--
-- construct instances of ssf module for each density pair (e.g., AA, AB, BB, ...)
--
-- @param args parameter table
--   args.density_mode      list of density_mode instances with attached labels
--   args.every             sampling interval
-- @returns instance of ssf module
--
function M.__new(args)
    -- command line options
    local density_mode = assert(args.density_mode, "missing parameter: density_mode")
    local every = assert(args.every, "missing parameter: every")
    assert(type(density_mode) == "table", "invalid table")

    -- dependency injection
    local clock = mdsim.clock() -- singleton
    local dimension = assert(mdsim.box().dimension) -- singleton
    local logger = log.logger({label = "ssf"})

    -- drop additional table keys of density modes -- FIXME
    local density_mode_ = {}
    for i, rho in ipairs(density_mode) do
        density_mode_[i] = rho
    end

    -- construct ssf module from list of density modes
    local ssf = assert(ssf_wrapper[dimension])(density_mode_, clock, logger)

    -- acquire density modes before sampling static structure factor
    for i, rho in ipairs(density_mode) do
        ssf:on_sample(rho.acquire)
    end

    local sampler = observables.sampler() -- singleton
    local file = writers.file() -- singleton

    -- write wavenumbers only once, use wavenumber object of first density_mode
    local writer = file:writer{location = {"structure", "ssf"}, mode = "truncate"}
    writer:on_write(density_mode[1].wavenumber, {"wavenumber"})
    sampler:on_start(writer.write)

    -- write all partial structure factors
    local writer = file:writer{location = {"structure", "ssf"}, mode = "append"}
    writer:on_prepend_write(ssf.sample)
    for i = 1, #density_mode do
        local label1 = assert(density_mode[i].label)
        for j = i, #density_mode do
            local label2 = assert(density_mode[j].label)
            writer:on_write(ssf:value(i - 1, j - 1), {label1, label2})
        end
    end
    sampler:on_sample(writer.write, every)

    return ssf
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, sample = "computation of static structure factor"}
end

--
-- returns module description
--
function M.description()
    return "static structure factor"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("every", po.uint64(), "sample interval for static structure factor")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.tolerance = group:read_attribute("tolerance", h5.float())
    args.max_count = group:read_attribute("max_count", h5.uint())
end

--
-- write module parameters to HDF5 group
--
-- @param ssf     module instance
-- @param group   HDF5 group
--
function M.write_parameters(ssf, group)
    -- wavenumbers are stored along with the ssf data, e.g., in structure/ssf/wavenumber
    group:write_attribute("tolerance", h5.float(), ssf.wavevector.tolerance)
    group:write_attribute("max_count", h5.uint(), ssf.wavevector.max_count)
end

return M
