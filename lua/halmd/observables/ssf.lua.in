--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

-- grab environment
local ssf_wrapper = {
    host = {
        [2] = halmd_wrapper.observables.host.ssf_2_
      , [3] = halmd_wrapper.observables.host.ssf_3_
    }
  , [2] = halmd_wrapper.observables.ssf_2_
  , [3] = halmd_wrapper.observables.ssf_3_
}
if halmd_wrapper.observables.gpu then
    ssf_wrapper.gpu = {
        [2] = halmd_wrapper.observables.gpu.ssf_2_
      , [3] = halmd_wrapper.observables.gpu.ssf_3_
    }
end

local observables = {
    density_modes = require("halmd.observables.density_modes")
}
local mdsim = {
    core = require("halmd.mdsim.core")
}
local device = require("halmd.device")
local assert = assert

module("halmd.observables.ssf", halmd.modules.register)

--
-- construct instance of ssf module
--
-- @param args parameter table
-- @returns instance of ssf module
--
function new(args)
    -- dependency injection
    local core = mdsim.core()
    local dimension = assert(core.dimension)
    local particle = assert(core.particle)
    local density_modes = observables.density_modes()

    if not density_modes then
        return nil
    end

    local ssf
    if device() then
        ssf = ssf_wrapper.gpu[dimension]
    else
        ssf = ssf_wrapper.host[dimension]
    end
    return ssf(density_modes, particle.nbox)
end

--
-- returns module description
--
function name()
    return "static structure factor"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
end

--
-- write module parameters to HDF5 group
--
-- @param ssf    module instance
-- @param group  HDF5 group
--
function write_parameters(ssf, group)
end
