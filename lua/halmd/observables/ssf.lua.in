--
-- Copyright © 2011-2013 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local module   = require("halmd.utility.module")

local log      = require("halmd.io.log")
local clock    = require("halmd.mdsim.clock")
local utility  = require("halmd.utility")
local profiler = require("halmd.utility.profiler")
local sampler  = require("halmd.observables.sampler")

-- grab C++ wrapper
local ssf = assert(libhalmd.observables.ssf)

-- grab standard library
local assert = assert
local property = property

---
-- Static structure factor
-- =======================
--
-- The module computes the static structure factor
--
-- .. math::
--
--     S_{(\alpha\beta)}(\vec k) = \frac{1}{N} \bigl\langle \rho_\alpha(\vec k)^* \rho_\beta(\vec k) \bigr\rangle
--
-- from the Fourier modes of a given pair of (partial) density fields,
--
-- .. math::
--
--     \rho_\alpha(\vec k) = \sum_{n=1}^{N_\alpha} \exp(\text{i} \vec k \cdot \vec r_n) \/,
--
-- and the total number of particles :math:`N`. The result is averaged over
-- wavevectors of similar magnitude according to the shells defined by
-- :class:`halmd.observables.utility.wavevector`.
--
-- For details see, e.g., Hansen & McDonald: Theory of simple liquids, chapter 4.1.
--

---
-- Construct instance of :class:`halmd.observables.ssf`.
--
-- :param table args: keyword arguments
-- :param args.density_mode: instance(s) of :class:`halmd.observables.density_mode`
-- :param number args.norm: normalisation factor
-- :param string args.label: module label *(optional)*
-- :returns: instance of static structure factor module
--
-- The argument ``density_mode`` is an instance or a table of 1 or 2 instances
-- of :class:`halmd.observables.density_mode` yielding the partial density
-- modes :math:`\rho_\alpha(\vec k)` and :math:`\rho_\beta(\vec k)`. They must
-- have been constructed with the same instance of
-- :class:`halmd.observables.utility.wavevector`. Passing only one instance
-- implies :math:`\alpha = \beta`.
--
-- The optional argument ``label`` defaults to ``density_mode[1].label ..  "/"
-- .. density_mode[2].label``.
--
-- .. method:: disconnect()
--
--    Disconnect static structure factor module from profiler.
--
-- .. attribute:: sampler
--
--    Callable that yields the static structure factor from the current density
--    modes.
--
-- .. attribute:: label
--
--    The module label passed upon construction or derived from the density modes.
--
-- .. class:: writer(args)
--
--    Write time series of static structure factor to file.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param args.location: location within file *(optional)*
--    :param number args.every: sampling interval
--    :type args.location: string table
--    :returns: instance of density mode writer
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. It defaults to ``{"structure",
--    self.label, "static_structure_factor"}``.
--
--    .. method:: disconnect()
--
--       Disconnect static structure factor writer from observables sampler.
--
local M = module(function(args)
    local mode = utility.assert_kwarg(args, "density_mode")
    if not (type(mode) == "table") then
        mode = { mode } -- convert single instance to a table
    end
    local wavevector = assert(mode[1].wavevector) -- obtain wavevector from density mode
    if mode[2] then
        -- wavevector instances must match
        local wavevector2 = assert(mode[2].wavevector)
        assert(wavevector == wavevector2)
    end
    local norm = utility.assert_kwarg(args, "norm")

    -- use specified label or construct it from the density mode labels
    local label = args["label"] or assert(mode[1].label) .. "/" .. assert(mode[#mode].label)
    local logger = log.logger({label = ("static structure factor (%s)"):format(label)})

    -- pass acquisitors instead of the density_mode modules
    local rho1 = assert(mode[1].acquisitor)
    local rho2 = assert(mode[#mode].acquisitor)

    local self = ssf(rho1, rho2, wavevector, norm, logger)

    -- store label as Lua property
    self.label = property(function(self) return label end)

    self.writer = function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local location = utility.assert_type(
            args.location or {"structure", label, "static_structure_factor"}
          , "table")
        local every = utility.assert_kwarg(args, "every")
        local overwrite = args.overwrite or false

        -- write wavenumbers
        local writer = file:writer{location = location, mode = "truncate", overwrite = overwrite}
        writer:on_write(wavevector.wavenumber, {"wavenumber"})
        writer:write() -- FIXME pass arguments directly to write(), avoiding on_write

        -- write time series of density modes: register acquisitor with writer
        local group_name = table.remove(location) -- strip off last component
        local writer = file:writer{location = location, mode = "append"}
        writer:on_write(self.sampler, {group_name})

        -- sequence of signal connections
        local conn = {}
        writer.disconnect = utility.signal.disconnect(conn, ("ssf writer (%s)"):format(label))

        -- connect writer to sampler
        if every > 0 then
            table.insert(conn, sampler:on_sample(writer.write, every, clock.step))
        end

        return writer
    end

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, ("ssf (%s)"):format(label))

    -- connect runtime accumulators to module profiler
    local desc = ("computation of static structure factor (%s)"):format(label)
    table.insert(conn, profiler:on_profile(self.runtime.sample, desc))

    return self
end)

return M
