--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

require("halmd.mdsim.core")
require("halmd.observables.density_mode")
require("halmd.observables.utility.wavevector")

-- grab modules
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local ssf_wrapper = {
    [2] = libhalmd.observables.ssf_2_
  , [3] = libhalmd.observables.ssf_3_
}
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.observables.ssf", halmd.modules.register)

--
-- construct instance of ssf module
--
-- @param args parameter table
-- @returns instance of ssf module
--
function new(args)
    -- command line options
    local tolerance = args.tolerance or 0.01 -- default value
    local maximum_count = args.maximum_count or 7 -- default value
    local wavenumbers = args.wavenumbers
    local maximum_wavenumber = args.maximum_wavenumber or 12.6 -- default value, approx. 4π

    -- dependency injection
    local core = mdsim.core()
    local dimension = assert(core.dimension)
    local particle = assert(core.particle)

    -- construct local wavevector module
    local wavevector = assert(observables.utility.wavevector)
    if wavenumbers then
        wavevector = wavevector{
            wavenumber = wavenumbers
          , tolerance = tolerance
          , maximum_count = maximum_count
        }
    else -- use maximum_wavenumber
        wavevector = wavevector{
            maximum_wavenumber = maximum_wavenumber
          , tolerance = tolerance
          , maximum_count = maximum_count
        }
    end

    -- construct density_mode module
    local density_mode = assert(observables.density_mode{ wavevector = wavevector })

    -- construct ssf module
    local ssf = assert(ssf_wrapper[dimension])(density_mode, particle.nbox)

    -- acquire density modes before sampling static structure factor
    ssf:on_sample(density_mode.acquire)

    return ssf
end

--
-- returns module description
--
function name()
    return "static structure factor"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("wavenumbers", po.float_array():conflicts("maximum-wavenumber"), "list of wavenumbers")
    desc:add("maximum-wavenumber", po.float():conflicts("wavenumbers"), "maximum wavenumber of linearly spaced grid")
    desc:add("tolerance", po.float(), "relative tolerance on wavevector magnitude")
    desc:add("maximum-count", po.uint(), "maximum number of wavevectors per wavenumber shell")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.tolerance = group:read_attribute("tolerance", h5.float())
    args.maximum_count = group:read_attribute("maximum_count", h5.uint())
end

--
-- write module parameters to HDF5 group
--
-- @param ssf     module instance
-- @param group   HDF5 group
--
function write_parameters(ssf, group)
    -- wavenumbers are stored along with the ssf data, e.g., in structure/ssf/wavenumber
    group:write_attribute("tolerance", h5.float(), ssf.wavevector.tolerance)
    group:write_attribute("maximum_count", h5.uint(), ssf.wavevector.maximum_count)
end
