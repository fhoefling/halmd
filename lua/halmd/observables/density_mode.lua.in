--
-- Copyright © 2011-2014 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
}
local observables = {
    phase_space         = require("halmd.observables.phase_space")
}
local samples = {
    phase_space         = require("halmd.observables.samples.phase_space")
}

-- grab C++ wrappers
local density_mode_wrapper = assert(libhalmd.observables.density_mode)
local modulation_wrapper = {
    [2] = assert(libhalmd.observables.density_mode_2_)
  , [3] = assert(libhalmd.observables.density_mode_3_)
}
-- grab standard library
local assert = assert
local pairs = pairs
local unpack = unpack or table.unpack -- support Lua 5.1 and 5.2

-- copy the entries of a table (does a shallow copy for nested tables)
local function table_copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

local M = module("halmd.observables.density_mode")

--
-- construct instance of density_mode module
--
-- @param args              parameter table:
--     args.wavevector      instance of wavevector module
--     args.modulation      modulation type for GID experiments, a table with
--                          an identifier ("unity", "exponential", "catenary")
--                          followed by a parameter list
-- @returns instance of density_mode module
--
function M.__new(args)
    -- dependency injection
    local wavevector = assert(args.wavevector)
    local modulation = table_copy(args.modulation) or { "unity" } -- copy table to leave caller's table untouched
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton

    local sample
    if device() then
        sample = assert(samples.phase_space{memory = "gpu"})
    else
        sample = assert(samples.phase_space{memory = "host"})
    end
    local dimension = assert(sample.dimension)
    local logger = assert(args.logger)

    -- construct modulation functor
    local name = assert(table.remove(modulation, 1))
    local float_type = (sample.memory == "gpu") and "float" or "double"
    local modulation_wrapper = assert(modulation_wrapper[dimension][float_type][name],
                                      "unknown modulation type: " .. name)
    -- append box height for "exponential", "catenary"
    -- FIXME this is an inefficient hack, the proper solution would compute the
    -- density modes from the original, wrapped particle positions (in
    -- mdsim::particle, not samples::phase_space)
    if name ~= "unity" then
        table.insert(modulation, box.length[dimension-1])
    end
    local modulation = modulation_wrapper(unpack(modulation)) -- pass arguments to constructor

    -- construct instance
    local observable = density_mode_wrapper(sample, wavevector, clock, logger, modulation)

    local phase_space
    if device() then
        phase_space = assert(observables.phase_space{memory = "gpu"})
    else
        phase_space = assert(observables.phase_space{memory = "host"})
    end

    -- acquire phase space before acquiring density modes
    observable:on_acquire(phase_space.acquire)

    return observable
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, acquire = "computation of density modes"}
end

return M
