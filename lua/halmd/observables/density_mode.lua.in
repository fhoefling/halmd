--
-- Copyright © 2011-2013  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log      = require("halmd.io.log")
local utility  = require("halmd.utility")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")
local sampler  = require("halmd.observables.sampler")

-- grab C++ wrappers
local density_mode = assert(libhalmd.observables.density_mode)

-- grab standard library
local assert = assert
local property = property

---
-- Density mode
-- ============
--
-- The module computes the complex Fourier modes of the particle density field,
--
-- .. math::
--
--     \rho(\vec k) = \sum_{n=1}^N \exp(\text{i} \vec k \cdot \vec r_n) \/.
--
-- The auxiliary module :class:`halmd.obseravbles.utility.wavevector` provides
-- suitable wavevectors that are compatible with the reciprocal lattice of the
-- periodic simulation box.
--

---
-- Construct instance of :class:`halmd.observables.density_mode`.
--
-- :param table args: keyword arguments
-- :param args.group:      instance of :mod:`halmd.mdsim.particle_groups`
-- :param args.wavevector: instance of :class:`halmd.observables.utility.wavevector`
-- :returns: instance of density mode sampler
--
-- .. method:: disconnect()
--
--    Disconnect density mode sampler from profiler.
--
-- .. attribute:: wavevector
--
--    The wavevector instance passed upon construction.
--
-- .. attribute:: label
--
--    The label of the underlying particle group.
--
-- .. attribute:: count
--
--    The particle count of the underlying particle group.
--
-- .. class:: writer(args)
--
--    Write time series of density modes to file.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param args.location: location within file *(optional)*
--    :param number args.every: sampling interval
--    :type args.location: string table
--    :returns: instance of density mode writer
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. If omitted it defaults to
--    ``{"structure", self.label, "density_modes"}``.
--
--    .. method:: disconnect()
--
--       Disconnect density mode writer from observables sampler.
--
local M = module(function(args)
    local group = utility.assert_kwarg(args, "group")
    local particle = assert(group.particle)
    local wavevector = utility.assert_kwarg(args, "wavevector")

    -- inherit label from particle group
    local label = assert(group.label)
    local logger = log.logger({label = ("density_mode (%s)"):format(label)})

    local self = density_mode(particle, group, wavevector, logger)

    -- store label and particle count as Lua properties
    self.label = property(function(self) return label end)

    local count = assert(group.size)
    self.count = property(function(self) return count end)

    self.writer = function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local location = utility.assert_type(
            args.location or {"structure", assert(self.label), "density_mode"}
          , "table")
        local every = utility.assert_kwarg(args, "every")

        -- write wavevectors only at start of simulation
        local writer = file:writer{location = location, mode = "truncate"}
        writer:on_write(wavevector.value, {"wavevector"})
        writer:write() -- FIXME pass arguments directly to write(), avoiding on_write

        -- write time series of density modes: register acquisitor with writer
        local writer = file:writer{location = location, mode = "append"}
        writer:on_write(self.acquisitor, {"value"})

        -- sequence of signal connections
        local conn = {}
        writer.disconnect = utility.signal.disconnect(conn, ("density_mode writer (%s)"):format(label))

        -- connect writer to sampler
        if every > 0 then
            table.insert(conn, assert(sampler:on_sample(writer.write, every, 0)))
        end

        return writer
    end

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, ("density_mode (%s)"):format(label))

    -- connect runtime accumulators to module profiler
    local desc = ("computation of density modes for %s particles"):format(label)
    table.insert(conn, assert(profiler:on_profile(self.runtime.acquire, desc)))

    return self
end)

return M
