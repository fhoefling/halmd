--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.clock")
require("halmd.modules")
require("halmd.observables.phase_space")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local density_mode_wrapper = {
    host = {
        [2] = libhalmd.observables.host.density_mode_2_
      , [3] = libhalmd.observables.host.density_mode_3_
    }
  , [2] = libhalmd.observables.density_mode_2_
  , [3] = libhalmd.observables.density_mode_3_
}
if libhalmd.observables.gpu then
    density_mode_wrapper.gpu = {
        [2] = libhalmd.observables.gpu.density_mode_2_
      , [3] = libhalmd.observables.gpu.density_mode_3_
    }
end
-- grab standard library
local assert = assert

module("halmd.observables.density_mode", halmd.modules.register)

--
-- construct instance of density_mode module
--
-- @param args              parameter table:
--     args.wavevector      instance of wavevector module
-- @returns instance of density_mode module
--
function new(args)
    -- dependency injection
    local wavevector = assert(args.wavevector)
    local clock = mdsim.clock() -- singleton

    local phase_space
    if device() then
        phase_space = assert(observables.phase_space{ memory = "gpu" })
    else
        phase_space = assert(observables.phase_space{ memory = "host" })
    end

    local dimension = assert(phase_space.dimension)
    local density_mode
    if device() then
        density_mode = assert(density_mode_wrapper.gpu[dimension])
    else
        density_mode = assert(density_mode_wrapper.host[dimension])
    end
    local observable = density_mode(phase_space, wavevector, clock)

    -- acquire phase space before acquiring density modes
    observable:on_acquire(phase_space.acquire)

    return observable
end
