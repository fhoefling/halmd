--
-- Copyright © 2011-2018 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local module  = require("halmd.utility.module")
local numeric = require("halmd.numeric")
local utility = require("halmd.utility")

-- grab C++ wrappers
local wavevector = assert(libhalmd.observables.utility.wavevector)

---
-- Wavevector
-- ==========
--
-- The module constructs a set of wavevectors :math:`\vec k` compatible with
-- the reciprocal space of the periodic simulation box and grouped into shells
-- according to their wavenumber, :math:`|\vec k|`. The wavevectors are of
-- the form
--
-- .. math::
--
--   \vec k = (k_x, k_y, \dots) = \left(n_x \frac{2\pi}{L_x}, n_y
--   \frac{2\pi}{L_y}, \dots \right)
--
-- where :math:`n_x, n_y, \dots` are integers and :math:`L_x, L_y, \dots`
-- denote the edge length of the cuboid box.
--
-- Two modes are supported:
--
--   1) a *sparse sampling* of thin shells according to a predefined set of
--      wavenumbers :math:`\{ k_i \}`, allowing for a relative deviation of the
--      wavenumber. The number of wavevectors per shell may be limited to avoid
--      excessively large shells for large wavenumber.
--
--   2) a *dense grid* of wavevectors from all points of the reciprocal lattice
--      up to the maximum wavenumber given, :math:`|\vec k| < \max \{ k_i \}`.
--      The result is grouped into shells according to the wavenumbers given.
--      In this case, shells are half-open sets, :math:`k_{i-1} \leq |\vec k| < k_i`,
--      provided that :math:`k_i < k_j` for all :math:`i < j`.
--
-- The list of wavenumbers may be constructed using :class:`halmd.observables.utility.semilog_grid`,
-- where the smallest wavenumber is given by :math:`2\pi / \max(L_x, L_y, \dots)`.
--
-- Example::
--
--    local numeric = halmd.numeric
--    local utility = halmd.observables.utility
--
--    local box = halmd.mdsim.box({length={5,10,20}})
--
--    local qmin = 2 * math.pi / numeric.max(box.length)
--    local grid = utility.semilog_grid({start=qmin, stop=5 * math.pi, decimation=10})
--    local wavevector = utility.wavevector({box = box, wavenumber = grid.value, tolerance=0.05, max_count=7})
--

---
-- Construct instance of wavevector module.
--
-- :param table args: keyword arguments
-- :param args.box:               instance of :class:`halmd.mdsim.box`
-- :param table args.wavenumber:  list of wavenumbers
-- :param boolean args.dense:     dense grid of wavevectors (*default:* ``false``)
-- :param number args.tolerance:  relative tolerance on wavevector magnitude
-- :param integer args.max_count: maximum number of wavevectors per wavenumber shell
-- :param table args.filter:      filter on wavevectors (*default:* ``{1, …, 1}``)
--
-- If ``dense`` is ``true``, a dense grid of wavevectors is created. Otherwise,
-- the arguments ``tolerance`` and ``max_count`` are required and a sparse
-- sampling of wavevectors is returned.
--
-- The argument ``filter`` contains 0 or 1 for each Cartesian coordinate, 0
-- deletes the respective wavevector component.
--
-- .. method:: wavenumber()
--
--    Returns data slot that yiels the wavenumber grid.
--
-- .. method:: value()
--
--    Returns data slot that yiels the list of wavevectors grouped by their
--    magnitude in ascending order.
--
-- .. method:: __eq(other)
--
--    :param other: instance of :class:`halmd.observables.utility.wavevector`
--
--    Implements the equality operator ``a = b`` and returns true if the other
--    ``wavevector`` instance is the same as this one.
--
local M = module(function(args)
    local box = utility.assert_kwarg(args, "box")
    local wavenumber = utility.assert_type(utility.assert_kwarg(args, "wavenumber"), "table")
    local dense = utility.assert_type(not (args.dense == nil) and args.dense, "boolean")  -- default: false

    -- provide default value: {1, …, 1}
    local dimension = box.dimension
    local filter = args.filter or numeric.scalar_matrix(1, dimension, 1)[1] -- construct 1×n matrix and take first row

    utility.assert_type(filter, "table")
    if #filter ~= dimension then
        error("invalid size of argument 'filter'", 2)
    end

    if dense then
        return wavevector(wavenumber, box.length, filter)
    else
        local tolerance = utility.assert_type(utility.assert_kwarg(args, "tolerance"), "number")
        local max_count = utility.assert_type(utility.assert_kwarg(args, "max_count"), "number")
        return wavevector(wavenumber, box.length, tolerance, max_count, filter)
    end
end)

---
-- .. function:: add_options(parser, defaults)
--
--    Add module options to command line parser: ``wavenumbers``, ``tolerance``, ``max-count``.
--
--    :param parser: instance of :class:`halmd.utility.program_options.argument_parser`
--    :param dictionary defaults: default values for the options
--

function M.add_options(parser, defaults)
    local parser = assert(parser)

    parser:add_argument("wavenumbers", {type = "vector", dtype = "number"
      , default = defaults and defaults.wavenumbers
      , help = "list of wavenumbers"
    })
    parser:add_argument("tolerance", {type="number"
      , default = defaults and defaults.tolerance
      , help = "relative tolerance on wavevector magnitude"
    })
    parser:add_argument("max-count", {type="integer"
      , default = defaults and defaults.max_count
      , help = "maximum number of wavevectors per wavenumber shell"
    })
end

return M
