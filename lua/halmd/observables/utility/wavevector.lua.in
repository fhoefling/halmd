--
-- Copyright © 2011-2013  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

-- grab C++ wrappers
local wavevector = assert(libhalmd.observables.utility.wavevector)

-- grab standard library
local assert = assert

---
-- Wavevector
-- ==========
--
-- The module constructs a set of wavevector shells compatible with the
-- reciprocal space of a periodic simulation box and a list of wavenumbers. The
-- wavevectors are of the form
--
-- .. math::
--
--   \vec k = (k_x, k_y, \dots) = \left(n_x \frac{2\pi}{L_x}, n_y
--   \frac{2\pi}{L_y}, \dots \right)
--
-- where :math:`n_x, n_y, \dots` are integers and :math:`L_x, L_y, \dots`
-- denote the edge length of the cuboid box.  A wavevector "shell" is defined
-- by its wavenumber, i.e. the magnitude :math:`k=|\vec k|`, including a
-- tolerance. The number of wavevectors within each shell may be limited to
-- avoid excessively large shells for large wavenumber.
--
-- The list of wavenumbers may be constructed using :class:`halmd.observables.utility.semilog_grid`,
-- where the smallest wavenumber is given by :math:`2\pi / \max(L_x, L_y, \dots)`.
--
-- Example::
--
--    local numeric = halmd.utility.numeric
--    local utility = halmd.observables.utility
--
--    local box = halmd.mdsim.box({length={5,10,20}})
--
--    local qmin = 2 * math.pi / numeric.max(box.length)
--    local grid = utility.semilog_grid({start=qmin, stop=5 * math.pi, decimation=10})
--    local wavevector = utility.wavevector({box = box, wavenumber = grid.value, tolerance=0.05, max_count=7})
--

---
-- Construct instance of wavevector module.
--
-- :param table args: keyword arguments
-- :param args.box:               instance of :class:`halmd.mdsim.box`
-- :param args.wavenumber:        list of wavenumbers
-- :param number args.tolerance:  relative tolerance on wavevector magnitude
-- :param integer args.max_count: maximum number of wavevectors per wavenumber shell
--
-- .. method:: wavenumber()
--
--    Returns data slot that yiels the wavenumber grid.
--
-- .. method:: value()
--
--    Returns data slot that yiels the list of wavevectors grouped by their
--    magnitude in ascending order.
--
local M = module(function(args)
    local box = assert(args.box)
    local wavenumber = assert(args.wavenumber)
    local tolerance = assert(args.tolerance)
    local max_count = assert(args.max_count)

    return wavevector(wavenumber, box.length, tolerance, max_count)
end)

---
-- .. function:: add_options(parser)
--
--    Add module options to command line parser: ``wavenumbers``, ``tolerance``, ``max-count``.
--
--    :param parser: instance of :class:`halmd.utility.program_options.argument_parser`
--

function M.add_options(parser)
    local parser = assert(parser)

    parser:add_argument("wavenumbers", {type="vector", dtype="number",
        help="list of wavenumbers"
    })
    parser:add_argument("tolerance", {type="number", default=0.01,
        help="relative tolerance on wavevector magnitude"
    })
    parser:add_argument("max-count", {type="integer", default=7,
        help="maximum number of wavevectors per wavenumber shell"
    })
end

return M
