--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.mdsim.box")
require("halmd.modules")

-- grab modules
local mdsim = halmd.mdsim
-- grab C++ wrappers
local wavevector_wrapper = {
    [2] = libhalmd.observables.utility.wavevector_2_
  , [3] = libhalmd.observables.utility.wavevector_3_
}
-- grab standard library
local assert = assert

module("halmd.observables.utility.wavevector", halmd.modules.register)

--
-- construct instance of wavevector module
--
-- @param args parameter table:
--     args.wavenumber      list of wavenumbers, or alternatively:
--     args.max_wavenumber  maximum wavenumber of semi-linearly spaced grid
--     args.decimation      decimation of wavenumber grid (0=disabled, 1=logarithmic, ...)
--     args.tolerance       relative tolerance on wavevector magnitude
--     args.max_count       maximum number of wavevectors per wavenumber shell
-- @returns instance of wavevector module
--
function new(args)
    -- options
    local wavenumber = args.wavenumber
    local max_wavenumber = args.max_wavenumber
    local decimation = args.decimation or 0 -- default value: disable decimation
    local tolerance = assert(args.tolerance)
    local max_count = assert(args.max_count)
    assert(wavenumber or max_wavenumber)

    -- dependency injection
    local box = mdsim.box() -- singleton
    local dimension = assert(box.dimension)

    local wavevector = assert(wavevector_wrapper[dimension])
    if wavenumber then
        return wavevector(wavenumber, box.length, tolerance, max_count)
    else
        return wavevector(max_wavenumber, decimation, box.length, tolerance, max_count)
    end
end
