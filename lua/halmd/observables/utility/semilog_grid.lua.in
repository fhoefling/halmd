--
-- Copyright © 2011-2013  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

-- grab C++ wrappers
local semilog_grid = assert(libhalmd.observables.utility.semilog_grid)

---
-- Semi-logarithmic grid
-- =====================
--
-- Construct a semi-logarithmically spaced grid. The grid consists of a
-- concatenation of linearly spaced grids and starts with multiples of the
-- smallest value. After a given number of points, the grid is "decimated" by
-- doubling the spacing until a maximum value is reached. A logarithmic grid is
-- obtained by ``decimation=1``, decimation is disabled by default.
--
-- Example::
-- 
--    -- construct grid from 0.1 to 4, double spacing every 3 points
--    local grid = semilog_grid({start=0.1, stop=4, decimation=3})
--
--    -- print the result
--    for i,x in pairs(grid.value) do
--        io.write(x .. " ")
--    end
--    io.write("\n")
--
-- The result is a grid of 12 points: ``0.1 0.2 0.3 0.4 0.6 0.8 1.0 1.4 1.8 2.2 3.0 3.8``.
--
-- .. attribute:: value
--
--    Return array of grid points.
--

---
-- Construct instance of semilog_grid module.
--
-- :param table args: keyword arguments
-- :param number args.start:       first grid point, corresponds to initial spacing
-- :param number args.stop:        upper limit on grid points (not included)
-- :param integer args.decimation: decimation parameter: 0=disabled *(default)*, 1=logarithmic, …
--
local M = module(function(args)
    local start = assert(args.start)
    local stop = assert(args.stop)
    local decimation = args.decimation or 0 -- default value: disable decimation

    return semilog_grid(start, stop, decimation)
end)

---
-- .. function:: add_options(parser)
--
--    Add module options to command line parser.
--
--    :param parser: instance of :class:`halmd.utility.program_options.argument_parser`
--

function M.add_options(parser)
    local parser = assert(parser)

    parser:add_argument("maximum", {type="number",
        help="maximum value of semi-logarithmically spaced grid"
    })
    parser:add_argument("decimation", {type="integer",
        help="decimation of grid"
    })
end

return M
