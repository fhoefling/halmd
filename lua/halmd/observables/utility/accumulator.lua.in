--
-- Copyright © 2013      Nicolas Höft
-- Copyright © 2013-2014 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local log      = require("halmd.io.log")
local clock    = require("halmd.mdsim.clock")
local utility  = require("halmd.utility")
local module   = require("halmd.utility.module")
local sampler  = require("halmd.observables.sampler")

local accumulator = assert(libhalmd.observables.utility.accumulator)

---
-- Accumulator
-- ===========
--
-- This module accumulates values (e.g., the pressure) over the course of the
-- simulation and returns statistical measures (e.g., sum, mean, and variance).
--

---
-- Construct accumulator module.
--
-- :param args: keyword arguments
-- :param args.acquire: callable that returns a number
-- :param number args.every: interval for aquiring the value
-- :param number args.start: start step for aquiring the value (*default:* :attr:`halmd.mdsim.clock.step`)
-- :param string args.desc: profiling description
-- :param table args.aux_enable: sequence of :class:`halmd.mdsim.particle` instances *(optional)*
--
-- The parameter ``aux_enable`` is useful if ``acquire()`` depends on one of
-- the auxiliary force variables, see :meth:`halmd.mdsim.particle.aux_enable`
-- for details. In sampling steps of the accumulator, each ``particle``
-- instance listed in ``aux_enable`` is notified to update the auxiliary
-- variables before the integration step. Thereby, redundant force calculations
-- can be avoided.
--
-- .. method:: sample()
--
--    Sample next value by calling ``args.acquire``.
--
-- .. method:: sum()
--
--    Sum of accumulated values. Calculated as ``mean × count``.
--
-- .. method:: mean()
--
--    Mean of accumulated values.
--
-- .. method:: error_of_mean()
--
--    Standard error of mean of accumulated values.
--
-- .. method:: variance()
--
--    Variance of accumulated values.
--
-- .. method:: count()
--
--    Number of samples accumulated.
--
-- .. method:: reset()
--
--    Reset the accumulator.
--
-- .. method:: disconnect()
--
--    Disconnect accumulator from core.
--
-- .. attribute:: desc
--
--    Profiler description.
--
-- .. method:: writer(file, args)
--
--    Write statistical measures to a file.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param args.location: location within file
--    :param number args.every: sampling interval
--    :param boolean args.reset: Reset accumulator after writing if true (disabled by default).
--    :type args.location: string table
--
--    :returns: instance of group writer
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings, for example ``{"observables",
--    "averaged_pressure"}``.
--
local M = module(function(args)
    local aquire = utility.assert_kwarg(args, "aquire")
    local every = utility.assert_type(utility.assert_kwarg(args, "every"), "number")
    local start = utility.assert_type(args.start or clock.step, "number")

    local desc = utility.assert_type(utility.assert_kwarg(args, "desc"), "string")
    local logger = log.logger({label = ("accumulator (%s)"):format(desc)})

    local self = accumulator(aquire, logger)

    self.desc = property(function(self) return desc end)

    self.writer = function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local location = utility.assert_type(utility.assert_kwarg(args, "location"), "table")
        local every = utility.assert_kwarg(args, "every")

        -- split off last component of location
        assert(#location > 0)
        local name = table.remove(location, #location)
        local writer = file:writer({location = location, mode = "append"})

        -- register data slots with writer
        writer:on_write(self.mean, self.error_of_mean, self.count, {name})

        -- register writer with sampler
        sampler:on_sample(writer.write, every, start + every)

        if args.reset then
            writer:on_append_write(self.reset)
        end

        return writer
    end

    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "accumulator module")

    if args.aux_enable then
        local particles = utility.assert_type(args.aux_enable, "table")
        for i,p in ipairs(particles) do
            table.insert(conn, sampler:on_prepare(function() p:aux_enable() end, every, start))
        end
    end

    -- connect to sampler
    table.insert(conn, sampler:on_sample(self.sample, every, start))

    return self
end)

return M
