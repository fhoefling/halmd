--
-- Copyright © 2013  Nicolas Höft
-- Copyright © 2013  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log      = require("halmd.io.log")
local utility  = require("halmd.utility")
local module   = require("halmd.utility.module")
local sampler  = require("halmd.observables.sampler")

local accumulator = assert(libhalmd.observables.utility.accumulator)

---
-- Accumulator
-- ===========
--
-- This module accumulates values (e.g., the pressure) over the course of the
-- simulation and returns statistical measures (e.g., sum, mean, and variance).
--

---
-- Construct accumulator module.
--
-- :param args: keyword arguments
-- :param args.acquire: callable that returns a number
-- :param number args.every: interval for aquiring the value
-- :param number args.start: start step for aquiring the value (default: ``0``)
-- :param string args.desc: profiling description
--
-- .. method:: sample()
--
--    Sample next value by calling ``args.acquire``.
--
-- .. method:: sum()
--
--    Sum of accumulated values. Calculated as ``mean × count``.
--
-- .. method:: mean()
--
--    Mean of accumulated values.
--
-- .. method:: error_of_mean()
--
--    Standard error of mean of accumulated values.
--
-- .. method:: variance()
--
--    Variance of accumulated values.
--
-- .. method:: count()
--
--    Number of samples accumulated.
--
-- .. method:: reset()
--
--    Reset the accumulator.
--
-- .. method:: disconnect()
--
--    Disconnect accumulator from core.
--
-- .. attribute:: desc
--
--    Profiler description.
--
-- .. method:: writer(file, args)
--
--    Write statistical measures to a file.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param string table args.location: location within file
--    :param table args.fields: data fields to be written *(optional)*
--    :param number args.every: sampling interval
--    :param boolean args.reset: Reset accumulator after writing if true (disabled by default).
--
--    :returns: instance of group writer
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings, for example ``{"observables", group
--    label}``.
--
--    The table ``fields`` specifies which statistical measures are written,
--    It may either be passed as an indexed table, e.g. ``{"mean",
--    "error_of_mean"}``, or as a dictionary, e.g., ``{mu = "mean", sigma =
--    "variance"}``; the table form is interpreted as ``{mean = "mean", ...}``.
--    The keys denote the field names in the file and are appended to
--    ``location``. The values specify the data slots, i.e, the methods of the
--    ``accumulator`` module, valid values are ``sum``, ``mean``,
--    ``error_of_mean``, ``variance``, and ``count``.  Defaults to ``{"mean",
--    "error_of_mean", "count"}``.
--
local M = module(function(args)
    local aquire = utility.assert_kwarg(args, "aquire")
    local every = utility.assert_type(utility.assert_kwarg(args, "every"), "number")
    local start = utility.assert_type(args.start or 0, "number")

    local desc = utility.assert_type(utility.assert_kwarg(args, "desc"), "string")
    local logger = log.logger({label = ("accumulator (%s)"):format(desc)})

    local self = accumulator(aquire, logger)

    self.desc = property(function(self) return desc end)

    self.writer = function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local location = utility.assert_type(utility.assert_kwarg(args, "location"), "table")
        local fields = utility.assert_type(args.fields or {"mean", "error_of_mean", "count"}, "table")
        local every = utility.assert_kwarg(args, "every")

        local writer = file:writer({location = location, mode = "append"})

        -- register data slots with writer, the keys of 'field' may either be
        -- strings (dictionary) or numbers (table), in the latter case, the
        -- value string is used as group name
        for k,v in pairs(fields) do
            local name = (type(k) == "string") and k or v
            writer:on_write(assert(self[v]), {name})
        end

        sampler:on_sample(writer.write, every, start)

        if args.reset then
            writer:on_append_write(self.reset)
        end

        return writer
    end

    local conn = {}
    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("accumulator is already disconnected")
        end
    end

    -- connect to sampler
    table.insert(conn, assert(sampler:on_sample(self.sample, every, start)))

    return self
end)

return M
