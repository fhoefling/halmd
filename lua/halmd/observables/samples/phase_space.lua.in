--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local module            = require("halmd.utility.module")
local samples = {
    particle_group      = require("halmd.observables.samples.particle_group")
}

-- grab C++ wrappers
local phase_space_wrapper = {
    host = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_double_
          , [3] = libhalmd.observables.host.samples.phase_space_3_double_
        }
    }
}
if libhalmd.observables.gpu then
    phase_space_wrapper.gpu = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_float_
          , [3] = libhalmd.observables.host.samples.phase_space_3_float_
        }
      , gpu = {
            [2] = libhalmd.observables.gpu.samples.phase_space_2_
          , [3] = libhalmd.observables.gpu.samples.phase_space_3_
        }
    }
end
local property = property
-- grab standard library
local assert = assert

local M = module("halmd.observables.samples.phase_space")

--
-- construct phase_space module
--
-- @param args       parameter table
--   args.particle          instance of particle or particle_group
--   args.memory            specify memory location of sample ("host", "gpu")
--
function M.__new(args)
    local particle = assert(args.particle, "missing parameter: particle")
    local memory = assert(args.memory, "missing parameter: memory")

    local particle_group
    if particle.particle then
        particle_group = particle
    else
        particle_group = samples.particle_group{particle = particle}
    end

    local dimension = assert(particle_group.dimension)
    local phase_space
    if device() then
        phase_space = assert(phase_space_wrapper.gpu[memory][dimension])
    else
        phase_space = assert(phase_space_wrapper.host[memory][dimension])
    end
    local sample = phase_space(particle_group.size)

    return sample
end

return M
