--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.particle")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local phase_space_wrapper = {
    host = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_double_
          , [3] = libhalmd.observables.host.samples.phase_space_3_double_
        }
    }
}
if libhalmd.observables.gpu then
    phase_space_wrapper.gpu = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_float_
          , [3] = libhalmd.observables.host.samples.phase_space_3_float_
        }
      , gpu = {
            [2] = libhalmd.observables.gpu.samples.phase_space_2_
          , [3] = libhalmd.observables.gpu.samples.phase_space_3_
        }
    }
end
-- grab standard library
local assert = assert

module("halmd.observables.samples.phase_space", halmd.modules.register)

-- singleton
local sample = {}

--
-- construct phase_space module
--
-- @param args       parameter table
--   args.memory     specify memory location of sample ("host", "gpu")
--
function new(args)
    local memory = assert(args.memory)

    if not sample[memory] then
        local particle = mdsim.particle() -- singleton
        local dimension = assert(particle.dimension)

        local phase_space
        if device() then
            phase_space = assert(phase_space_wrapper.gpu[memory][dimension])
        else
            phase_space = assert(phase_space_wrapper.host[memory][dimension])
        end
        sample[memory] = phase_space(particle.ntypes)
    end
    return sample[memory]
end
