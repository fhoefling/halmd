--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local phase_space_wrapper = {
    host = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_double_
          , [3] = libhalmd.observables.host.samples.phase_space_3_double_
        }
    }
}
if libhalmd.observables.gpu then
    phase_space_wrapper.gpu = {
        host = {
            [2] = libhalmd.observables.host.samples.phase_space_2_float_
          , [3] = libhalmd.observables.host.samples.phase_space_3_float_
        }
      , gpu = {
            [2] = libhalmd.observables.gpu.samples.phase_space_2_
          , [3] = libhalmd.observables.gpu.samples.phase_space_3_
        }
    }
end
local property = property
-- grab standard library
local assert = assert

---
-- Phase Space
-- ===========
--
-- A :class:`phase_space` sample contains the phase space coordinates of
-- all or a subset of the particles in the system. The sample contains
-- the position (periodically extended by the net number of boundary
-- crossings in each dimension of a particle), the velocity, the integer
-- species and the mass of the particles.
--
-- The :class:`phase_space` sample is the conjugate data structure to
-- :class:`halmd.mdsim.particle`. The latter is sorted by positions,
-- according to a space-filling curve, while the former is sorted by
-- particle tag. The array index of particle in :class:`phase_space`
-- remains the same over the course of the simulation, which allows
-- the calculation of single-particle observables, such as the
-- mean-square displacement.
--
local M = module("halmd.observables.samples.phase_space")

---
-- Construct a phase_space sample.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of particle or particle_group
-- :param args.memory: memory location of sample ("host", "gpu")
-- :returns: instance of phase_space sample
--
-- .. attribute:: dimension
--
--    The dimension of positions and velocities.
--
-- .. attribute:: memory
--
--    The memory location of the sample, either "host" or "gpu".
--
-- In a debug build, additional attributes are available:
--
-- .. attribute:: position
--
--    A sequence of particle positions ordered by tag.
--
-- .. attribute:: velocity
--
--    A sequence of particle velocities ordered by tag.
--
function M.__new(args)
    local particle = args.particle
    if not particle then
        error("missing argument 'particle'", 3)
    end
    local memory = args.memory
    if not memory then
        error("missing argument 'memory'", 3)
    end

    local dimension = assert(particle.dimension)
    local size = assert(particle.size or particle.nbox)

    local phase_space
    if device() then
        phase_space = assert(phase_space_wrapper.gpu)
    else
        phase_space = assert(phase_space_wrapper.host)
    end
    phase_space = phase_space[memory]
    if not phase_space then
        error(("undefined memory location '%s'"):format(tostring(memory)), 3)
    end
    phase_space = assert(phase_space[dimension])

    local sample = phase_space(size)

    sample.memory = property(function(self)
        return memory
    end)

    return sample
end

---
-- .. function:: position(slot)
--
--    Extract position array from data slot returning phase_space sample.
--
--    :param slot: data slot returning phase_space sample
--    :returns: data slot returning position array
--
M.position = assert(libhalmd.observables.samples.phase_space.position)

---
-- .. function:: velocity(slot)
--
--    Extract velocity array from data slot returning phase_space sample.
--
--    :param slot: data slot returning phase_space sample
--    :returns: data slot returning velocity array
--
M.velocity = assert(libhalmd.observables.samples.phase_space.velocity)

---
-- .. function:: species(slot)
--
--    Extract species array from data slot returning phase_space sample.
--
--    :param slot: data slot returning phase_space sample
--    :returns: data slot returning species array
--
M.species = assert(libhalmd.observables.samples.phase_space.species)

return M
