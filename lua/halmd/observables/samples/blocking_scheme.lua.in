--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")
require("halmd.observables.dynamics.blocking_scheme")

-- grab C++ wrappers
local blocking_scheme_wrapper = libhalmd.observables.samples.blocking_scheme
local dynamics = halmd.observables.dynamics
-- grab standard library
local assert = assert

module("halmd.observables.samples.blocking_scheme", halmd.modules.register)

-- block samples by sample
local block_samples = {}

--
-- construct blocking_scheme module
--
-- @param args    parameter table
--   args.sampler sampler module that acquires sample
--
function new(args)
    local sampler = assert(args.sampler)
    local sample = assert(sampler.sample)

    local block_sample = block_samples[sample]
    if not block_sample then
        local blocking_scheme = dynamics.blocking_scheme() -- singleton
        local count = assert(blocking_scheme.count)
        local size = assert(blocking_scheme.block_size)
        block_sample = assert(blocking_scheme_wrapper)(sample, count, size)

        -- register correlation data with blocking scheme
        blocking_scheme:on_sample(block_sample)
        -- update input data before computation of correlations
        blocking_scheme:on_prepend_sample(sampler.acquire)

        -- store block sample for sample
        block_samples[sample] = block_sample
    end
    return block_sample
end
