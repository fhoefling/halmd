--
-- Copyright © 2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.mdsim.clock")
require("halmd.modules")
require("halmd.observables.sampler")
require("halmd.singleton")

-- grab modules
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local blocking_scheme_wrapper = libhalmd.observables.dynamics.blocking_scheme
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.observables.dynamics.blocking_scheme", halmd.modules.register, halmd.singleton)

--
-- construct module blocking_scheme
-- @param args   parameter table
--   maximum_time  maximum lag time for which correlations are computed
--   resolution    time resolution of level 0 (determined by sampling rate)
--   size          size of each block, determines coarse-graining factor
--   shift         coarse-graining shift between odd and even levels
--   compute       table of time correlations functions to be computed
-- @returns instance of blocking_scheme module
--
function new(args)
    local every = args.every or 100 -- default value
    local size  = args.size or 10 -- default value
    local shift = args.shift or 0 -- default value

    -- construct driver module blocking_scheme
    local clock = mdsim.clock() -- singleton
    local sampler = observables.sampler() -- singleton
    local maximum_time = assert(sampler.total_time)
    local resolution = clock.timestep * every
    local logger = assert(args.logger) -- module logger
    local blocking_scheme = assert(blocking_scheme_wrapper)(clock, maximum_time, resolution, size, shift, logger)

    -- connect to sampler
    sampler:on_sample{blocking_scheme.sample, every, tracker = blocking_scheme}
    sampler:on_finish{blocking_scheme.finalise, tracker = blocking_scheme}

    return blocking_scheme
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("every", po.uint64(), "sampling interval for time-correlation functions")
    desc:add("size", po.uint(), "block size, corresponds to coarse-graining factor")
    desc:add("shift", po.uint(), "coarse-graining shift between adjacent blocking levels")
end
