--
-- Copyright © 2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local sampler           = require("halmd.observables.sampler")

-- grab C++ wrappers
local blocking_scheme_wrapper = libhalmd.observables.dynamics.blocking_scheme
local po = libhalmd.po
-- grab standard library
local assert = assert

local M = module.singleton("halmd.observables.dynamics.blocking_scheme")

--
-- construct module blocking_scheme
-- @param args   parameter table
--   every         sampling interval of lowest coarse-graining level
--   size          size of each block, determines coarse-graining factor
--   shift         coarse-graining shift between odd and even levels
--   separation    minimal separation of samples for time averages
--   compute       table of time correlations functions to be computed
-- @returns instance of blocking_scheme module
--
function M.__new(args)
    local every = args.every or 100 -- default value
    local size  = args.size or 10 -- default value
    local shift = args.shift or 0 -- default value
    local separation = args.separation or every * size -- default value

    -- construct driver module blocking_scheme
    local maximum_time = assert(sampler.total_time)
    local resolution = clock.timestep * every
    local logger = log.logger({label = "blocking_scheme"})
    local blocking_scheme = assert(blocking_scheme_wrapper)
    blocking_scheme = blocking_scheme(clock, maximum_time, resolution, size, shift, separation, logger)

    -- connect to sampler
    sampler:on_sample(blocking_scheme.sample, every)
    sampler:on_finish(blocking_scheme.finalise)

    return blocking_scheme
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("every", po.uint(), "sampling interval for time-correlation functions")
    desc:add("size", po.uint(), "block size, corresponds to coarse-graining factor")
    desc:add("shift", po.uint(), "coarse-graining shift between adjacent blocking levels")
    desc:add("separation", po.uint(), "minimal sample separation for time averages")
end

--
-- write module parameters to HDF5 group
--
-- @param blocking_scheme module instance
-- @param group HDF5 group
--
function M.write_parameters(blocking_scheme, group)
--     group:write_attribute("separation", h5.uint(), blocking_scheme.separation)
end

return M
