--
-- Copyright © 2011  Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

require("halmd.device")
require("halmd.mdsim.core")
require("halmd.observables.samples.phase_space")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local msd_wrapper = {
    host = {
        [2] = libhalmd.observables.host.dynamics.mean_square_displacement_2_
      , [3] = libhalmd.observables.host.dynamics.mean_square_displacement_3_
}
}
if libhalmd.observables.gpu then
    msd_wrapper.gpu = {
--        [2] = libhalmd.observables.gpu.dynamics.mean_square_displacement_2_
--      , [3] = libhalmd.observables.gpu.dynamics.mean_square_displacement_3_
    }
end

local h5 = libhalmd.h5
local po = libhalmd.po
local property = property
-- grab standard library
local assert = assert

module("halmd.observables.dynamics.correlations.mean_square_displacement", halmd.modules.register)

--
-- construct instance of msd module
--
-- @param args parameter tabletype_
--   species   particle species (type) for which the computation is done
-- @returns instance of msd module, instance of phase space sample
--
function new(args)
    -- command line options
    local species = args.species or 0 -- default value

    -- dependency injection
    local core = mdsim.core()
    local dimension = assert(core.dimension)
    local backend = device() and "gpu" or "host"

    -- construct msd module
    local msd = assert(msd_wrapper[backend][dimension])(species)
    -- obtain appropriate phase space sample
    local sample = assert(observables.samples.phase_space{ memory = backend })
    -- extend msd module with read-only sample property
    msd.sample = property(function(self) return sample end)

    return msd
end

--
-- returns module description
--
function name()
    return "mean-square displacement"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
--function options(desc)
--end

--
-- read module parameters from HDF5 group
--
--function read_parameters(args, group)
--end

--
-- write module parameters to HDF5 group
--
-- @param ssf     module instance
-- @param group   HDF5 group
--
--function write_parameters(ssf, group)
--end
