--
-- Copyright © 2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.io.writers.file")
require("halmd.modules")
require("halmd.observables.dynamics.blocking_scheme")
require("halmd.observables.dynamics.correlations")
require("halmd.observables.samples.blocking_scheme")

-- grab modules
local correlations = halmd.observables.dynamics.correlations
local observables = halmd.observables
local writers = halmd.io.writers
-- grab C++ wrappers
local correlation_wrapper = libhalmd.observables.dynamics.correlation
local property = property
-- grab standard library
local assert = assert
local ipairs = ipairs
local type = type

module("halmd.observables.dynamics.correlation", halmd.modules.register)

--
-- add time correlation function to blocking_scheme
--
-- @param args parameter table
--   name             trajectory correlation function (e.g. "mean_square_displacement")
--   sampler          list of pairs (label, sampler instance), e.g., phase_space sampler
--
function new(args)
    local name = assert(args.correlation)
    local sampler = assert(args.sampler)
    assert(type(sampler) == "table", "invalid table")

    -- store constructor of tcf functor
    local tcf = assert(correlations[name])

    local blocking_scheme = observables.dynamics.blocking_scheme() -- singleton
    local file = writers.file() -- singleton
    local writer = file:writer{location = {"dynamics"}, mode = "truncate"}

    local observable = {}
    for i, val in ipairs(sampler) do
        local label = val[1]
        local sampler = val[2]
        -- construct the tcf functor
        local tcf_ = tcf{sample = assert(sampler.sample)}
        -- construct or retrieve associated blocking scheme for sample data
        local block_sample = observables.samples.blocking_scheme{sampler = sampler}
        -- construct correlation function
        local logger = assert(args.logger) -- FIXME use tcf module logger
        local correlation = assert(correlation_wrapper)(tcf_, block_sample, logger)

        -- write correlation function results
        writer:on_write(blocking_scheme.time, {name, label, "time"}) -- FIXME hardlink
        writer:on_write(correlation.mean, {name, label, "mean"})
        writer:on_write(correlation.error, {name, label, "error"})
        writer:on_write(correlation.count, {name, label, "count"})

        -- register correlation function with blocking scheme
        blocking_scheme:on_correlate(correlation)

        observable[i] = {label, correlation}
    end

    -- write correlation results to H5MD file
    blocking_scheme:on_append_finalise(writer.write)

    -- store tcf module for profiler description
    local desc = tcf.description()
    observable.desc = property(function(self) return desc end) -- FIXME "luabind: property_tag function can't be called"

    return observable
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    local desc = "FIXME" -- assert(self.desc)
    for i, val in ipairs(self) do
        local label = val[1]
        local correlation = val[2]
        profiler:on_profile{correlation, tcf = "computation of " .. desc .. " for " .. label .. " particles"}
    end
end
