--
-- Copyright © 2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log                       = require("halmd.io.log")
local module                    = require("halmd.utility.module")
local correlations = {
    mean_quartic_displacement   = require("halmd.observables.dynamics.mean_quartic_displacement")
  , mean_square_displacement    = require("halmd.observables.dynamics.mean_square_displacement")
  , velocity_autocorrelation    = require("halmd.observables.dynamics.velocity_autocorrelation")
}
local dynamics = {
    blocking_scheme             = require("halmd.observables.dynamics.blocking_scheme")
}
local samples = {
    blocking_scheme             = require("halmd.observables.samples.blocking_scheme")
}
local writers = {
    file                        = require("halmd.io.writers.file")
}

-- grab C++ wrappers
local correlation_wrapper = libhalmd.observables.dynamics.correlation
local po = libhalmd.po
local property = property
-- grab standard library
local assert = assert

local M = module("halmd.observables.dynamics.correlation")

--
-- add time correlation function to blocking_scheme
--
-- @param args parameter table
--   name   trajectory correlation function (e.g. "mean_square_displacement")
--
function M.__new(args)
    local name = assert(args.correlation)

    local blocking_scheme = dynamics.blocking_scheme() -- singleton
    local file = writers.file() -- singleton
    local writer = file:writer{location = {"dynamics"}, mode = "truncate"}

    -- construct the tcf functor and obtain the appropriate data sample
    local tcf = assert(correlations[name])()
    local sample = assert(tcf.sample)
    local sampler = assert(tcf.sampler)
    -- construct or retrieve associated blocking scheme for sample data
    local block_sample = samples.blocking_scheme{sample = sample, sampler = sampler}
    -- construct correlation function
    local logger = log.logger({label = name})
    local correlation = assert(correlation_wrapper)(tcf, block_sample, logger)

    -- register correlation function with blocking scheme
    blocking_scheme:on_correlate(correlation)

    -- write correlation function results
    writer:on_write(blocking_scheme.time, {name, "time"}) -- FIXME hardlink
    writer:on_write(correlation.mean, {name, "mean"})
    writer:on_write(correlation.error, {name, "error"})
    writer:on_write(correlation.count, {name, "count"})

    -- write correlation results to H5MD file
    blocking_scheme:on_append_finalise(writer.write)

    -- store tcf module for profiler description
    correlation.tcf = property(function(self) return tcf end)

    return correlation
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, tcf = "computation of " .. self.tcf.module.description()}
end

return M
