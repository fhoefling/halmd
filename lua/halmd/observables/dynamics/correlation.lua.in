--
-- Copyright © 2011-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log                       = require("halmd.io.log")
local module                    = require("halmd.utility.module")
local correlations = {
    mean_quartic_displacement   = require("halmd.observables.dynamics.mean_quartic_displacement")
  , mean_square_displacement    = require("halmd.observables.dynamics.mean_square_displacement")
  , velocity_autocorrelation    = require("halmd.observables.dynamics.velocity_autocorrelation")
}
local dynamics = {
    blocking_scheme             = require("halmd.observables.dynamics.blocking_scheme")
}
local samples = {
    blocking_scheme             = require("halmd.observables.samples.blocking_scheme")
}
local writers = {
    file                        = require("halmd.io.writers.file")
}

-- grab C++ wrappers
local correlation_wrapper = libhalmd.observables.dynamics.correlation
-- grab standard library
local assert = assert
local ipairs = ipairs
local property = property
local type = type


--
-- add time correlation function to blocking_scheme
--
-- @param args parameter table
--   name             trajectory correlation function (e.g. "mean_square_displacement")
--   sampler          list of sampler instance with attached labels
--
local M = module(function(args)
    local name = assert(args.correlation)
    local sampler = assert(args.sampler)
    assert(type(sampler) == "table", "invalid table")

    -- store constructor of tcf functor
    local tcf = assert(correlations[name])

    local blocking_scheme = dynamics.blocking_scheme() -- singleton
    local logger = log.logger({label = name})
    local file = writers.file() -- singleton
    local writer = file:writer{location = {"dynamics"}, mode = "truncate"}

    local observable = {}
    for i, sampler in ipairs(sampler) do
        local sample = assert(sampler.sample)
        -- construct the tcf functor
        local tcf_ = tcf{sample = sample}
        -- construct or retrieve associated blocking scheme for sample data
        local block_sample = samples.blocking_scheme{sampler = sampler}
        -- construct correlation function
        local correlation = assert(correlation_wrapper)(tcf_, block_sample, logger)

        -- write correlation function results
        local label = assert(sampler.label)
        writer:on_write(blocking_scheme.time, {name, label, "time"}) -- FIXME hardlink
        writer:on_write(correlation.mean, {name, label, "mean"})
        writer:on_write(correlation.error, {name, label, "error"})
        writer:on_write(correlation.count, {name, label, "count"})

        -- store label as Lua property
        correlation.label = property(function(self) return label end)

        -- register correlation function with blocking scheme
        blocking_scheme:on_correlate(correlation)

        observable[i] = correlation
    end

    -- write correlation results to H5MD file
    blocking_scheme:on_append_finalise(writer.write)

    -- store description for profiler description
    observable.description = tcf.description()

    return observable
end)

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    local desc = assert(self.description)
    for i, correlation in ipairs(self) do
        local label = assert(correlation.label)
        profiler:on_profile{correlation, tcf = "computation of " .. desc .. " for " .. label .. " particles"}
    end
end

return M
