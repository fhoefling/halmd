--
-- Copyright © 2013 Nicolas Höft
-- Copyright © 2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local utility = require("halmd.utility")
local module  = require("halmd.utility.module")

---
-- Correlation Function
-- ====================
--
-- This module permits the implementation of a user-defined time correlation
-- function within the Lua simulation script.
--
-- The following example shows the use of this module together with
-- :class:`halmd.observables.dynamics.blocking_scheme` to determine the
-- mean-square displacement of the centre of mass of a certain particle group.
-- From this, the collective self-diffusion constant may be obtained.  The
-- centre of mass is computed efficiently by
-- :meth:`halmd.observables.thermodynamics.center_of_mass`, the squared
-- displacement is then computed by the script function passed as
-- ``correlate``. ::
--
--     local msv = observables.thermodynamics({box = box, group = group, force = force})
--     local collective_msd = dynamics.correlation({
--         -- acquire centre of mass
--         acquire = function()
--             return msv:center_of_mass()
--         end
--         -- correlate centre of mass at first and second point in time
--         , correlate = function(first, second)
--             local result = 0
--             for i = 1, #first do
--                 result = result + math.pow(second[i] - first[i], 2)
--             end
--             return result
--         end
--         -- H5MD path
--         , group = {"AA", "mean_square_displacement"}
--         -- profiling description
--         , desc = "collective mean-square displacement of AA particles"
--     })
--
--     local blocking_scheme = dynamics.blocking_scheme({
--         max_lag = max_lag
--         , every = 100
--         , size = 10
--         , separation = separation
--     })
--     blocking_scheme:correlation(collective_msd, writer)
--

-- grab C++ wrappers
local correlation_adaptor = assert(libhalmd.observables.dynamics.correlation_adaptor)
local blocking_scheme_adaptor = assert(libhalmd.observables.samples.blocking_scheme_adaptor)

---
-- Construct user-defined correlation function.
--
-- :param args: keyword arguments
-- :param args.acquire: callable that returns a value
-- :param args.correlate: callable that accepts two values and returns a ``number``
-- :param table args.group: sequence of strings of H5MD group names
-- :param string args.desc: profiling description
--
-- .. method:: acquire()
--
--    Acquire sample.
--
--    :returns: sample
--
-- .. method:: correlate(first, second)
--
--    Correlate two samples.
--
--    :param first: first sample
--    :param second: second sample
--    :returns: value
--
-- .. attribute:: group
--
--    H5MD group.
--
-- .. attribute:: desc
--
--    Profiler description.
--
local M = module(function(args)
    local acquire   = utility.assert_kwarg(args, "acquire")
    local correlate = utility.assert_kwarg(args, "correlate")
    local group     = utility.assert_type(utility.assert_kwarg(args, "group"), "table")
    local desc      = utility.assert_type(utility.assert_kwarg(args, "desc"), "string")

    -- construct instance
    local self = correlation_adaptor(correlate)

    -- attach acquire function as read-only property
    self.acquire = property(function(self)
        return blocking_scheme_adaptor(acquire)
    end)

    -- attach H5MD group
    self.group = property(function(self)
        return {"dynamics", table.unpack(group)}
    end)

    -- attach profiler description
    self.desc = property(function(self)
        return desc
    end)

    return self
end)

return M
