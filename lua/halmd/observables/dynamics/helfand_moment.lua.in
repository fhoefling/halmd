--
-- Copyright © 2013 Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local clock       = require("halmd.mdsim.clock")
local utility     = require("halmd.utility")
local module      = require("halmd.utility.module")
local correlation = require("halmd.observables.dynamics.correlation")
local accumulator = require("halmd.observables.utility.accumulator")

---
-- Helfand Moment
-- ==============
--
-- This module calculates mean-square difference of the Helfand moment for the
-- stress tensor [1]_\ [2]_,
--
-- .. math::
--     \delta G^2_{\alpha\beta}(t) := \frac{1}{N}
--      \bigl\langle [G_{\alpha\beta}(t) - G_{\alpha\beta}(0)]^2 \bigr\rangle
--      \qquad \alpha, \beta \in \{x, y, z\} \, ,
--
-- where the Helfand moment :math:`G_{\alpha\beta}(t)` is defined as the time
-- integral of the stress tensor :math:`\Pi_{\alpha\beta}(t)`,
--
-- .. math::
--     G_{\alpha\beta}(t) = \int_0^t \! \Pi_{\alpha\beta}(t') \, \mathrm{d}t'
--     \approx \sum_{k=0}^{n-1} \Pi_{\alpha\beta}(k \delta t) \, \delta t \,
--     \qquad t = n \, \delta t \, .
--
-- The normalisation with the particle number :math:`N` renders :math:`\delta
-- G^2_{\alpha\beta}(t)` finite in the thermodynamic limit. The stress tensor
-- is obtained from :meth:`halmd.observables.thermodynamics.stress_tensor()`,
-- and the integral is computed numerically over discrete time intervals
-- :math:`\delta t` using :mod:`halmd.observables.utility.accumulator`.
--
-- The shear viscosity :math:`\eta` is obtained from :math:`\delta
-- G^2_{\alpha\beta}(t)` by virtue of the Einstein–Helfand relation
--
-- .. math::
--     \eta = \frac{\rho}{k_B T} \lim_{t\to\infty}
--     \frac{\mathrm{d}}{2 \mathrm{d}t} \delta G^2_{\alpha\beta}(t) \, .
--
-- .. [1] B. J. Alder, D. M. Gass, and T. E. Wainwright,
--       *Studies in molecular dynamics. VIII. The transport coefficients for a hard-sphere fluid*,
--       J. Chem. Phys. **53**, 3813 (1970)
--       `[Link] <http://dx.doi.org/10.1063/1.1673845>`__.
--
-- .. [2] S. Viscardy and P. Gaspard,
--        *Viscosity in molecular dynamics with periodic boundary conditions*,
--        Phys. Rev. E **68**, 041204 (2003)
--        `[Link] <http://dx.doi.org/10.1103/PhysRevE.68.041204>`__.
--
-- .. note::
--
--     The module returns the sum over all off-diagonal elements,
--     :math:`\sum_{\alpha < \beta} \delta G^2_{\alpha\beta}(t)` analogously to
--     :mod:`halmd.observables.dynamics.mean_square_displacement`.
--

---
-- Construct Helfand moment
--
-- This module implements a :mod:`halmd.observables.dynamics.correlation` module.
--
-- :param args: keyword arguments
-- :param args.thermodynamics: instance of :class:`halmd.observables.thermodynamics`
-- :param number args.interval: time interval for the integration of the stress
--   tensor in simulation steps
--
-- .. method:: acquire()
--
--    Acquire stress tensor
--
--    :returns: Stress tensor sample
--
-- .. method:: correlate(first, second)
--
--    Correlate two stress tensor samples.
--
--    :param first: first phase space sample
--    :param second: second phase space sample
--    :returns: mean-square integral of the off-diagonal elements of the stress
--      tensor
--
-- .. attribute:: desc
--
--    Module description.
--
-- .. method:: disconnect()
--
--    Disconnect module from core.
--
-- .. class:: writer(args)
--
--    Construct file writer.
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param args.location: location within file *(optional)*
--    :type args.location: string table
--    :return: file writer as returned by ``file:writer()``.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. It defaults to ``{"dynamics",
--    self.label, "mean_square_helfand_moment"}``.
--
local M = module(function(args)
    local msv = utility.assert_kwarg(args, "thermodynamics")
    local interval = utility.assert_type(utility.assert_kwarg(args, "interval"), "number")

    local resolution = interval * assert(clock.timestep)
    local label = assert(msv.group.label)
    local dimension = assert(msv.dimension)
    local nparticle = msv:particle_number()

    local stress_tensor = accumulator({
        aquire = msv.stress_tensor
      , every = interval
      , desc = "stress tensor"
      , aux_enable = {msv.group.particle}
    })

    -- construct correlation module from helfand moment
    local self = assert(correlation({
        -- acquire function as read-only property
        acquire = function(self)
            return stress_tensor:sum()
        end

      , correlate = function(first, second)
            local result = 0
            -- skip the diagonal elements
            for i = dimension + 1, #first do
                -- integrate via rectangular rule by multiplying with Δt
                result = result + math.pow((second[i] - first[i]) * resolution, 2)
            end
            -- normalise by the number of particle used to compute the stress tensor
            return result / nparticle
        end
        -- file location
      , location = {"dynamics", label, "mean_square_helfand_moment"}
        -- module description
      , desc = ("MSD of the Helfand moment of %s particles"):format(label)
    }))

    -- add disconnect() function in order to remove the stress tensor accumulator
    self.disconnect = function(self)
        stress_tensor:disconnect()
    end

    return self
end)

return M
