--
-- Copyright © 2011  Felix Höfling and Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.modules")
require("halmd.observables.phase_space")
require("halmd.observables.samples.phase_space")

-- grab modules
local device = halmd.device
local observables = halmd.observables
-- grab C++ wrappers
local vac_wrapper = libhalmd.observables.dynamics.velocity_autocorrelation
local po = libhalmd.po
local property = property
-- grab standard library
local assert = assert

module("halmd.observables.dynamics.correlations.velocity_autocorrelation", halmd.modules.register)

--
-- construct instance of vac module
--
-- @returns instance of vac module, instance of phase space sample
--
function new(args)
    local particle = assert(args.particle)

    -- obtain phase space sampler
    local backend = device() and not args.disable_gpu and "gpu" or "host"
    local phase_space = observables.phase_space{particle = particle, memory = backend}
    local sample = assert(phase_space.sample)

    -- construct vac module
    local vac = assert(vac_wrapper)(sample)

    -- add phase space sampler as read-only property
    vac.sampler = property(function(self)
        return phase_space
    end)

    return vac
end

--
-- returns module description
--
function description()
    return "velocity autocorrelation"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    if device.with_gpu() then
        desc:add("disable-gpu", po.bool_switch(), "disable GPU acceleration")
    end
end
