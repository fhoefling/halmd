--
-- Copyright © 2012 Peter Colberg
-- Copyright © 2011 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local module            = require("halmd.utility.module")
local utility = {
    posix_signal       = require("halmd.utility.posix_signal")
  , timer_service       = require("halmd.utility.timer_service")
}

---
-- Runtime Estimate
-- ================
--
local M = module("halmd.observables.runtime_estimate")

-- grab C++ wrappers
local runtime_estimate = assert(libhalmd.observables.runtime_estimate)

---
-- Construct runtime_estimate instance.
--
-- :param table args: keyword arguments
-- :param number steps: length of simulation run
-- :param number first: time to first estimate in seconds
-- :param number interval: frequency of estimates in seconds
-- :param number sample: frequency of sampling in seconds
--
function M.__new(args)
    local steps = args.steps
    if not steps then
        error("missing argument: steps", 3)
    end
    local first = args.first
    if not first then
        error("missing argument: first", 3)
    end
    local interval = args.interval
    if not interval then
        error("missing argument: interval", 3)
    end
    local sample = args.sample
    if not sample then
        error("missing argument: sample", 3)
    end

    -- construct instance
    local self = runtime_estimate(clock, steps)

    -- sequence of signal connections
    local conn = {}

    self.connect = function(self)
        if #conn == 0 then
            local timer_service = utility.timer_service() -- singleton
            table.insert(conn, timer_service:on_periodic(self.estimate, interval, first))
            table.insert(conn, timer_service:on_periodic(self.sample, sample, 0))

            local posix_signal = utility.posix_signal() -- singleton
            table.insert(conn, posix_signal:on_usr1(self.estimate))
        else
            error("runtime estimate is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("runtime estimate is already disconnected", 2)
        end
    end

    self:connect()

    return self
end

return M
