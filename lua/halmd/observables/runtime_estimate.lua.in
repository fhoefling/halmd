--
-- Copyright © 2012 Peter Colberg
-- Copyright © 2011 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local module            = require("halmd.utility.module")
local posix_signal      = require("halmd.utility.posix_signal")
local timer_service     = require("halmd.utility.timer_service")

---
-- Runtime Estimate
-- ================
--
-- Given the number of steps, this module estimates the remaining runtime.
--
-- Example::
--
--    -- setup simulation box
--    halmd.observables.sampler:setup()
--
--    -- number of MD steps
--    local steps = 1000000
--
--    -- calculate remaining runtime every minute, and log every 15 minutes
--    local runtime = halmd.observables.runtime_estimate({steps = steps, first = 10, interval = 900, sample = 60})
--
--    -- run simulation
--    halmd.observables.sampler:run(steps)
--
-- A runtime estimate may be triggered by sending the process signal ``USR1``::
--
--    killall -USR1 halmd
--

-- grab C++ wrappers
local runtime_estimate = assert(libhalmd.observables.runtime_estimate)

---
-- Construct runtime_estimate instance.
--
-- :param table args: keyword arguments
-- :param number steps: length of simulation run
-- :param number first: time to first estimate in seconds
-- :param number interval: frequency of estimates in seconds
-- :param number sample: frequency of sampling in seconds
--
local M = module(function(args)
    local steps = args.steps
    if not steps then
        error("missing argument: steps", 2)
    end
    local first = args.first
    if not first then
        error("missing argument: first", 2)
    end
    local interval = args.interval
    if not interval then
        error("missing argument: interval", 2)
    end
    local sample = args.sample
    if not sample then
        error("missing argument: sample", 2)
    end

    -- construct instance
    local self = runtime_estimate(clock, steps)

    -- sequence of signal connections
    local conn = {}

    self.connect = function(self)
        if #conn == 0 then
            table.insert(conn, assert(timer_service:on_periodic(self.estimate, interval, first)))
            table.insert(conn, assert(timer_service:on_periodic(self.sample, sample, 0)))
            table.insert(conn, assert(posix_signal:on_usr1(self.estimate)))
        else
            error("runtime estimate is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("runtime estimate is already disconnected", 2)
        end
    end

    self:connect()

    return self
end)

return M
