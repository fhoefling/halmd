--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")
require("halmd.mdsim.clock")
require("halmd.mdsim.core")
require("halmd.observables.runtime_estimate")
require("halmd.singleton")
require("halmd.utility.timer_service")

-- grab modules
local mdsim = halmd.mdsim
local observables = halmd.observables
local utility = halmd.utility
-- grab C++ wrappers
local sampler_wrapper = libhalmd.sampler
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local math = math

module("halmd.observables.sampler", halmd.modules.register, halmd.singleton)

--
-- construct sampler module
--
function new(args)
    -- dependency injection
    local clock = mdsim.clock()
    local core = mdsim.core()

    -- command line options
    local steps = args.steps or 10000 -- default value
    local time = args.time -- optional

    if time then
        steps = math.floor((time / clock.timestep) + 0.5)
    end

    -- construct sampler module
    local sampler = assert(sampler_wrapper)(clock, core, steps)

    -- process timer service every step
    sampler:on_sample(utility.timer_service().process, 1)

    -- construct and connect runtime estimator.
    local runtime_estimate = observables.runtime_estimate{
        total_steps = steps
      , current_step = clock.step
    }
    local timer_service = utility.timer_service()
    timer_service:on_periodic(runtime_estimate.sample, 15 * 60) -- every 15 minutes

    return sampler
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc, globals)
    globals:add("steps", po.uint64(), "number of simulation steps")
    globals:add("time", po.float():conflicts("steps"), "total simulation time")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group, globals)
    args.steps = globals:read_attribute("steps", h5.uint64())
    -- args.time is optional parameter
end

--
-- write module parameters to HDF5 group
--
-- @param sampler module instance
-- @param group HDF5 group
--
function write_parameters(sampler, group, globals)
    globals:write_attribute("steps", h5.uint64(), sampler.steps)
    globals:write_attribute("time", h5.float(), sampler.total_time)
end
