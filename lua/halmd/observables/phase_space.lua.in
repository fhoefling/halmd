--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.box")
require("halmd.mdsim.clock")
require("halmd.modules")
require("halmd.observables.samples.particle_group")
require("halmd.observables.samples.phase_space")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local phase_space_wrapper = assert(libhalmd.observables.phase_space)
local property = property
-- grab standard library
local assert = assert
local ipairs = ipairs
local type = type

module("halmd.observables.phase_space", halmd.modules.register)

--
-- construct phase_space module
--
-- @param args       parameter table
--   args.particle_group    list of pairs (label, particle_group instance)
--   args.memory            specify memory location of phase_space sample ("host", "gpu"),
--                          if omitted use "gpu" if device is available
-- @returns list of pairs (label, phase_space sampler instance)
--
function new(args)
    -- parameters
    local particle_group = assert(args.particle_group, "missing parameter: particle_group")
    assert(type(particle_group) == "table", "invalid table")
    local memory = args.memory or (device() and "gpu" or "host")
    local logger = assert(args.logger)

    -- dependency injection
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton

    local phase_space = {}
    for i, val in ipairs(particle_group) do
        local label = val[1]
        local group = val[2]
        local sample = assert(observables.samples.phase_space{particle_group = group, memory = memory})
        local sampler = phase_space_wrapper(sample, group, box, clock, logger)

        -- store phase space sample as property
        sampler.sample = property(function(self) return sample end)

        -- store memory as property for profiler description
        sampler.memory = property(function(self) return memory end)

        phase_space[i] = { label, sampler }
    end

    return phase_space
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    for i, val in ipairs(self) do
        local label = val[1]
        local phase_space = val[2]
        local memory = assert(phase_space.memory)
        local str = "phase space sample of " .. label .. " particles on " .. memory
        profiler:on_profile{phase_space, acquire = "acquisition of " .. str}
        profiler:on_profile{phase_space, reset = "reset " .. str}
    end
end
