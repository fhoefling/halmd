--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
  , particle            = require("halmd.mdsim.particle")
}
local samples = {
    phase_space         = require("halmd.observables.samples.phase_space")
}

-- grab C++ wrappers
local phase_space_wrapper = assert(libhalmd.observables.phase_space)
local property = property
-- grab standard library
local assert = assert

local M = module("halmd.observables.phase_space")

--
-- construct phase_space module
--
-- @param args       parameter table
--   args.memory     specify memory location of phase_space sample ("host", "gpu")
--
function M.__new(args)
    -- parameters
    local memory = assert(args.memory)

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton
    local sample = assert(samples.phase_space{memory = memory})
    local logger = assert(args.logger)
    local phase_space = phase_space_wrapper(sample, particle, box, clock, logger)

    -- store memory as property for profiler description
    phase_space.memory = property(function(self) return memory end)

    return phase_space
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    local memory = assert(self.memory)
    profiler:on_profile{self, acquire = "acquisition of phase space sample on " .. memory}
    profiler:on_profile{self, reset = "reset phase space sample on " .. memory}
end

return M
