--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
}
local samples = {
    phase_space         = require("halmd.observables.samples.phase_space")
}

-- grab C++ wrappers
local phase_space_wrapper = assert(libhalmd.observables.phase_space)
local property = property
-- grab standard library
local assert = assert
local ipairs = ipairs
local type = type

---
-- Phase Space
-- ===========
--
-- A phase_space sampler acquires particle coordinates from an instance of
-- particle or particle_group. The sampler can copy particle data from
-- host to host, gpu to host, or gpu to gpu memory. The particles are
-- ordered by tag, which guarantees that a particle has the same array
-- index over the course of the simulation.
--
local M = module("halmd.observables.phase_space")

---
-- Construct phase_space sampler.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of instances, of particle or particle_group
-- :param string args.memory: memory location of phase_space sample (optional)
-- :returns: instance, or sequence of instances, of phase_space sampler
--
-- The supported values for ``memory`` are "host" and "gpu". If ``memory``
-- is not specified, the memory location is selected according to the
-- compute device.
--
-- .. note::
--
--    The sample will be updated at most *once* per step, so you can reuse
--    the same sampler with multiple observable modules for optimal
--    performance.
--
function M.__new(args)
    -- parameters
    local particle_group = assert(args.particle_group, "missing parameter: particle_group")
    assert(type(particle_group) == "table", "invalid table")
    local memory = args.memory or (device() and "gpu" or "host")
    local logger = log.logger({label = "phase_space"})

    -- dependency injection
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton

    local phase_space = {}
    for i, group in ipairs(particle_group) do
        local sample = assert(samples.phase_space{particle_group = group, memory = memory})
        local sampler = phase_space_wrapper(sample, group, box, clock, logger)

        -- store phase space sample as Lua property
        sampler.sample = property(function(self) return sample end)

        -- store memory as Lua property for profiler description
        sampler.memory = property(function(self) return memory end)

        -- store label as Lua property
        local label = assert(group.label)
        sampler.label = property(function(self) return label end)

        phase_space[i] = sampler
    end
    return phase_space
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    for i, phase_space in ipairs(self) do
        local label = assert(phase_space.label)
        local memory = assert(phase_space.memory)
        local str = "phase space sample of " .. label .. " particles on " .. memory
        profiler:on_profile{phase_space, acquire = "acquisition of " .. str}
        profiler:on_profile{phase_space, reset = "reset " .. str}
    end
end

return M
