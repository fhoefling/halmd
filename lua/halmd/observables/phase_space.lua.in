--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local clock    = require("halmd.mdsim.clock")
local device   = require("halmd.utility.device")
local log      = require("halmd.io.log")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")
local sampler  = require("halmd.observables.sampler")
local utility  = require("halmd.utility")

-- grab C++ classes
local phase_space = {host = assert(libhalmd.observables.host.phase_space)}
if device.gpu then
    phase_space.gpu = assert(libhalmd.observables.gpu.phase_space)
end

---
-- Phase Space
-- ===========
--
-- A phase_space sampler acquires particle coordinates from an instance of
-- particle or particle_group. The sampler can copy particle data from
-- host to host, gpu to host, or gpu to gpu memory. The particles are
-- ordered by tag, which guarantees that a particle has the same array
-- index over the course of the simulation.
--

---
-- Construct phase_space sampler.
--
-- :param table args: keyword arguments
-- :param args.group: instance of :class:`halmd.mdsim.particle_group`
-- :param args.box: instance of :class:`halmd.mdsim.box`
--
-- .. note::
--
--    The sample will be updated at most *once* per step, so you can reuse
--    the same sampler with multiple observable modules for optimal
--    performance.
--
-- .. method:: acquire(args)
--
--    Returns data slot to acquire phase space sample.
--
--    :param table args: keyword arguments (optional)
--    :param string args.memory: memory location of phase space sample (optional)
--
--    The supported values for ``memory`` are "host" and "gpu". If ``memory``
--    is not specified, the memory location is selected according to the
--    compute device.
--
-- .. method:: position()
--
--    Returns data slot that acquires phase space sample and returns position array.
--
--    :returns: data slot that returns position array in host memory
--
-- .. method:: velocity()
--
--    Returns data slot that acquires phase space sample and returns velocity array.
--
--    :returns: data slot that returns velocity array in host memory
--
-- .. method:: species()
--
--    Returns data slot that acquires phase space sample and returns species array.
--
--    :returns: data slot that returns species array in host memory
--
-- .. method:: mass()
--
--    Returns data slot that acquires phase space sample and returns mass array.
--
--    :returns: data slot that returns mass array in host memory
--
-- .. method:: set(sample)
--
--    Set positions, velocities, species and masses from phase space sample.
--
-- .. method:: disconnect()
--
--    Disconnect phase_space sampler from profiler.
--
-- .. attribute:: group
--
--    The particle group used by the sampler.
--
-- .. class:: writer(args)
--
--    Write trajectory of particle group to file.
--
--    http://nongnu.org/h5md/h5md.html#particles-group
--
--    :param table args: keyword arguments
--    :param args.file: instance of file writer
--    :param table args.fields: data field names to be written
--    :param args.location: location within file (optional)
--    :param number args.every: sampling interval (optional)
--    :type args.location: string table
--
--    :returns: instance of group writer
--
--    The table ``fields`` specifies which data fields are written. It may
--    either be passed as an indexed table, e.g. ``{"position", "velocity"}``,
--    or as a dictionary, e.g., ``{r = "position", v = "velocity"}``; the table
--    form is interpreted as ``{position = "position", ...}``. The keys denote
--    the field names in the file and are appended to ``location``. The values
--    specify the methods of the ``phase_space`` module, valid values are
--    ``position``, ``velocity``, ``species``, ``mass``.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings. If omitted it defaults to
--    ``{"particles", group.label}``.
--
--    If ``every`` is not specified or 0, a phase space sample will be written
--    at the start and end of the simulation.
--
--    .. method:: disconnect()
--
--       Disconnect phase_space writer from observables sampler.
--
local M = module(function(args)
    local group = utility.assert_kwarg(args, "group")
    local box = utility.assert_kwarg(args, "box")
    local particle = assert(group.particle)
    local label = assert(group.label)
    local logger = log.logger({label = ("phase_space (%s)"):format(label)})

    -- construct phase space samplers
    local samplers = {}
    samplers.host = phase_space.host(particle, group, box, clock, logger)
    if particle.memory == "gpu" then
        samplers.gpu = phase_space.gpu(particle, group, box, clock, logger)
    end

    -- construct unified Lua object for host and gpu sampler
    local self = {group = group}

    self.acquire = function(self, args)
        local memory = args and args.memory
        if not memory then
            memory = samplers.gpu and "gpu" or "host"
        end
        local sampler = samplers[memory]
        if not sampler then
            error(("unsupported phase_space memory type '%s'"):format(memory), 2)
        end
        return assert(sampler.acquire)
    end

    self.position = function(self)
        return assert(samplers.host.position)
    end

    self.velocity = function(self)
        return assert(samplers.host.velocity)
    end

    self.species = function(self)
        return assert(samplers.host.species)
    end

    self.mass = function(self)
        return assert(samplers.host.mass)
    end

    self.writer = function(self, args)
        local file = utility.assert_kwarg(args, "file")
        local fields = utility.assert_type(utility.assert_kwarg(args, "fields"), "table")
        local location = utility.assert_type(
            args.location or {"particles", assert(self.group.label)}
          , "table")
        local every = args.every

        local writer = file:writer({location = location, mode = "append"})

        -- register data fields with writer,
        -- the keys of 'field' may either be strings (dictionary) or numbers (table),
        -- in the latter case, the value string is assigned to the group name
        for k,v in pairs(fields) do
            local name = (type(k) == "string") and k or v
            writer:on_write(assert(self[v])(), {name})
        end

        -- store box information
        box:writer({file = file, location = location}) -- box is fixed in time
--        box:writer({writer = writer}) -- box is variable in time

        -- sequence of signal connections
        local conn = {}
        writer.disconnect = utility.signal.disconnect(conn, "phase_space writer")

        -- connect writer to sampler
        if every and every > 0 then
            table.insert(conn, sampler:on_sample(writer.write, every, clock.step))
        else
            table.insert(conn, sampler:on_start(writer.write))
            table.insert(conn, sampler:on_finish(writer.write))
        end

        return writer
    end

    self.set = function(self, ...)
        logger:info(("setting particles from phase space sample"):format(label))
        samplers.host:set(...)
    end

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "phase_space sampler")

    -- connect runtime accumulators to profiler
    for memory, sampler in pairs(samplers) do
        local label = assert(self.group.label)
        local desc = ("phase space sample of %s particles on %s"):format(label, memory)
        local runtime = assert(sampler.runtime)
        table.insert(conn, profiler:on_profile(runtime.acquire, ("acquisition of %s"):format(desc)))
        table.insert(conn, profiler:on_profile(runtime.reset, ("reset %s"):format(desc)))
    end

    return self
end)

-- grab C++ classes
local phase_space = {}
phase_space.host = {
    [2] = assert(libhalmd.observables.host.samples.phase_space_2_double)
  , [3] = assert(libhalmd.observables.host.samples.phase_space_3_double)
}

if device.gpu then
    phase_space.gpu = {
        [2] = assert(libhalmd.observables.host.samples.phase_space_2_float)
      , [3] = assert(libhalmd.observables.host.samples.phase_space_3_float)
    }
end

---
-- .. class:: reader(args)
--
--    Construct reader for given particles group.
--
--    http://nongnu.org/h5md/h5md.html#particles-group
--
--    :param table args: keyword arguments
--    :param args.file: instance of file reader, e.g, :class:`halmd.io.readers.h5md`
--    :param args.fields: data field names to be read
--    :param args.location: location within file
--    :param string args.memory: memory location of phase space sample (optional)
--    :type args.fields: string table
--    :type args.location: string table
--
--    The supported values for ``memory`` are "host" and "gpu". If ``memory``
--    is not specified, the memory location is selected according to the
--    compute device.
--
--    Returns a group reader, and a phase space sample.
--
--    The table ``fields`` specifies which data fields are read, valid
--    values are ``position``, ``velocity``, ``species``, ``mass``. See
--    :meth:`halmd.observables.phase_space:writer` for details.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings, for example ``{"particles", group
--    label}``.
--
--    Construction of the reader module opens the file for inspection of the
--    space dimension and particle number, which are then used to allocate a
--    phase space sample in host memory. The sample is only filled upon
--    calling, e.g., ``read_at_step()``.
--
--    Example::
--
--       local file = halmd.io.readers.h5md({path = "input.h5"})
--       local reader, sample = halmd.observables.phase_space.reader({
--          file = file, fields = {"position"}, location = {"particles", "all"}
--       })
--       reader:read_at_step(0)
--       local nparticle = assert(sample.size)
--       local dimension = assert(sample.dimension)
--
--    The returned group reader has these methods.
--
--       .. method:: read_at_step(step)
--
--          Read sample at given step.
--
--          If ``step`` is negative, seek backward from last (``-1``) sample.
--
--       .. method:: read_at_time(time)
--
--          Read sample at given time in MD units.
--
--          If ``time`` is negative, seek backward from last (``-0``) sample.
--
--    The returned phase space sample has these attributes.
--
--       .. attribute:: nparticle
--
--          Returns number of particles.
--
--       .. attribute:: nspecies
--
--          Returns number of species.
--
--          .. note::
--
--             This attribute is determined from the maximum element of the species array.
--
--       .. attribute:: dimension
--
--          Returns dimension of positional coordinates.
--

function M.reader(args)
    local file = utility.assert_kwarg(args, "file")
    local fields = utility.assert_type(utility.assert_kwarg(args, "fields"), "table")
    local location = utility.assert_type(utility.assert_kwarg(args, "location"), "table")

    local memory = args and args.memory or (device.gpu and "gpu" or "host")
    if not phase_space[memory] then
        error(("unsupported phase space memory type '%s'"):format(memory), 2)
    end

    local self = file:reader({location = location, mode = "append"})
    local group = assert(#fields > 0) and ({next(fields)})[2] -- some field name
    local dataset = self.group:open_group(group):open_dataset("value")
    local shape = assert(dataset.shape)
    local nparticle = assert(shape[2])
    local dimension = assert(shape[3])
    local phase_space = phase_space[memory][dimension]
    if not phase_space then
        error(("unsupported space dimension: %d"):format(dimension), 2)
    end
    local sample = phase_space(nparticle)

    -- register data fields with reader,
    -- the keys of 'field' may either be strings (dictionary) or numbers (table),
    -- in the latter case, the value string is assigned the field name
    for k,v in pairs(fields) do
        local name = (type(k) == "string") and k or v
        local array, array_to_sample = assert(sample[v])(sample)
        self:on_read(array, {name})
        self:on_append_read(array_to_sample)
    end

    return self, sample
end

return M
