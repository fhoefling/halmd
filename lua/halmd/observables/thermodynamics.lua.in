--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.force")
require("halmd.mdsim.particle")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local thermodynamics_wrapper = {
    host = {
        [2] = libhalmd.observables.host.thermodynamics_2_
      , [3] = libhalmd.observables.host.thermodynamics_3_
    }
  , [2] = libhalmd.observables.thermodynamics_2_
  , [3] = libhalmd.observables.thermodynamics_3_
}
if libhalmd.observables.gpu then
    thermodynamics_wrapper.gpu = {
        [2] = libhalmd.observables.gpu.thermodynamics_2_
      , [3] = libhalmd.observables.gpu.thermodynamics_3_
    }
end
-- grab standard library
local assert = assert

module("halmd.observables.thermodynamics", halmd.modules.register)

--
-- construct thermodynamics module
--
function new(args)
    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton
    local force = mdsim.force() -- singleton
    local logger = assert(args.logger)

    local observable
    if device() then
        observable = thermodynamics_wrapper.gpu[dimension](particle, box, clock, force, logger)
    else
        observable = thermodynamics_wrapper.host[dimension](particle, box, clock, force, logger)
    end
    return observable
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    profiler:on_profile{self, sample = "computation of macroscopic state variables"}
end
