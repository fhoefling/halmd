--
-- Copyright © 2010-2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
  , core                = require("halmd.mdsim.core")
}
local observables = {
    sampler             = require("halmd.observables.sampler")
}
local writers = {
    file                = require("halmd.io.writers.file")
}

-- grab C++ wrappers
local thermodynamics_wrapper = libhalmd.observables.thermodynamics
local po = libhalmd.po
-- grab standard library
local assert = assert
local ipairs = ipairs
local property = property
local type = type

local M = module("halmd.observables.thermodynamics")

--
-- construct thermodynamics module
--
-- @param args parameter table
--   args.particle_group    list of particle group instances with attached labels
--   args.force             list of associated force instances
--   args.every             sampling interval
-- @returns list of thermodynamics modules with attached labels
function M.__new(args)
    local particle_group = assert(args.particle_group, "missing parameter: particle_group")
    local every = assert(args.every)
    assert(type(particle_group) == "table", "invalid table")

    -- dependency injection
    local box = mdsim.box() -- singleton
    local dimension = assert(box.dimension)
    local clock = mdsim.clock() -- singleton
    local force = assert(args.force)
    local logger = log.logger({label = "thermodynamics"})

    local sampler = observables.sampler() -- singleton
    local file = writers.file() -- singleton
    local writer = file:writer{location = {"observables"}, mode = "append"}

    local thermodynamics = {}
    for i, group in ipairs(particle_group) do
        -- construct thermodynamics module
        -- FIXME drop dependency on force module
        local observable = thermodynamics_wrapper(group, box, clock, force[i], logger)

        -- store label as Lua property
        local label = assert(group.label)
        observable.label = property(function(self) return label end)

        -- connect results with writer
        writer:on_write(observable.en_pot, {label, "potential_energy"})
        writer:on_write(observable.en_kin, {label, "kinetic_energy"})
        writer:on_write(observable.en_tot, {label, "total_energy"})
        writer:on_write(observable.v_cm, {label, "center_of_mass_velocity"})
        writer:on_write(observable.pressure, {label, "pressure"})
        writer:on_write(observable.temp, {label, "temperature"})
        writer:on_write(observable.virial, {label, "virial"})
        writer:on_write(observable.hypervirial, {label, "hypervirial"})

        -- connect writer to sampler
        sampler:on_sample{writer.write, every, tracker = observable}

        -- turn on computation of auxiliary variables _before_ force computation
        -- in each sampling step
        -- FIXME move from force to particle
        sampler:on_prepare{force[i].aux_enable, every, tracker = observable}

        thermodynamics[i] = observable
    end

    return thermodynamics
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    for i, thermodynamics in ipairs(self) do
        local label = assert(thermodynamics.label)
        local str = " of " .. label .. " particles"
        profiler:on_profile{thermodynamics, en_kin = "summation of kinetic energy" .. str}
        profiler:on_profile{thermodynamics, v_cm = "summation of centre-of-mass velocity" .. str}
        if device() then
            profiler:on_profile{thermodynamics, en_pot = "summation of potential energy" .. str}
            profiler:on_profile{thermodynamics, virial = "summation of virial" .. str}
            profiler:on_profile{thermodynamics, hypervirial = "summation of hypervirial" .. str}
        end
    end
end

-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("every", po.uint64(), "sample interval for macroscopic state variables")
end

return M
