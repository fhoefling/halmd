--
-- Copyright © 2010-2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.io.writers.file")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
  , core                = require("halmd.mdsim.core")
  , particle            = require("halmd.mdsim.particle")
}
require("halmd.modules")
require("halmd.observables.sampler")

-- grab modules
local device = halmd.device
local observables = halmd.observables
local writers = halmd.io.writers
-- grab C++ wrappers
local thermodynamics_wrapper = {
    host = {
        [2] = libhalmd.observables.host.thermodynamics_2_
      , [3] = libhalmd.observables.host.thermodynamics_3_
    }
  , [2] = libhalmd.observables.thermodynamics_2_
  , [3] = libhalmd.observables.thermodynamics_3_
}
if libhalmd.observables.gpu then
    thermodynamics_wrapper.gpu = {
        [2] = libhalmd.observables.gpu.thermodynamics_2_
      , [3] = libhalmd.observables.gpu.thermodynamics_3_
    }
end
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.observables.thermodynamics", halmd.modules.register)

--
-- construct thermodynamics module
--
function new(args)
    local every = args.every or 100 -- default value

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton
    local force = assert(args.force)
    local logger = assert(args.logger)

    local observable
    if device() then
        observable = thermodynamics_wrapper.gpu[dimension](particle, box, clock, force, logger)
    else
        observable = thermodynamics_wrapper.host[dimension](particle, box, clock, force, logger)
    end

    local file = writers.file() -- singleton
    local writer = file:writer{location = {"observables"}, mode = "append"}

    -- connect results with writer
    writer:on_write(observable.en_pot, {"potential_energy"})
    writer:on_write(observable.en_kin, {"kinetic_energy"})
    writer:on_write(observable.en_tot, {"total_energy"})
    writer:on_write(observable.v_cm, {"center_of_mass_velocity"})
    writer:on_write(observable.pressure, {"pressure"})
    writer:on_write(observable.temp, {"temperature"})
    writer:on_write(observable.virial, {"virial"})
    writer:on_write(observable.hypervirial, {"hypervirial"})

    -- connect writer to sampler
    local sampler = observables.sampler() -- singleton
    sampler:on_sample{writer.write, every, tracker = observable}

    -- turn on computation of auxiliary variables _before_ force computation
    -- in each sampling step
    sampler:on_prepare{force.aux_enable, every, tracker = observable}

    return observable
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    profiler:on_profile{self, en_kin = "summation of kinetic energy"}
    profiler:on_profile{self, v_cm = "summation of centre-of-mass velocity"}
    if device() then
        profiler:on_profile{self, en_pot = "summation of potential energy"}
        profiler:on_profile{self, virial = "summation of virial"}
        profiler:on_profile{self, hypervirial = "summation of hypervirial"}
    end
end

-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("every", po.uint64(), "sample interval for macroscopic state variables")
end
