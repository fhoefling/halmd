--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

-- grab environment
local reader_wrapper = {
    host = {
        [2] = halmd_wrapper.io.trajectory.readers.halmd_0_1_x_2_double_
      , [3] = halmd_wrapper.io.trajectory.readers.halmd_0_1_x_3_double_
    }
  , gpu = {
        [2] = halmd_wrapper.io.trajectory.readers.halmd_0_1_x_2_float_
      , [3] = halmd_wrapper.io.trajectory.readers.halmd_0_1_x_3_float_
    }
}
local trajectory = require("halmd.observables.samples.trajectory")
local mdsim = {
  core = require("halmd.mdsim.core")
}
local device = require("halmd.device")
local h5 = halmd_wrapper.h5
local po = halmd_wrapper.po
local assert = assert
local error = error
local io = io
local setmetatable = setmetatable

module("halmd.io.trajectory.readers.halmd_0_1_x", halmd.modules.register, halmd.modules.provider)

-- function to check file format
format = reader_wrapper.host[2].format

--
-- construct HALMD 0.1.x trajectory reader module
--
function new(args)
    local file = assert(args.file)
    local offset = assert(args.offset)

    local sample = assert(trajectory())
    local core = assert(mdsim.core())
    local dimension = assert(core.dimension)

    local halmd_0_1_x
    if device() then
        halmd_0_1_x = assert(reader_wrapper.gpu[dimension])
    else
        halmd_0_1_x = assert(reader_wrapper.host[dimension])
    end
    return halmd_0_1_x(sample, file, offset)
end

-- module parameters
local vm = {}

--
-- provide parameters for given module
--
function parameters(module)
    if module.read_parameters then
        local vm = vm[module.namespace]
        if vm then
            return setmetatable({}, { __index = vm })
        end
    end
end

--
-- read module parameters from trajectory file
--
-- @param file HDF5 trajectory file
--
function read_module_parameters(file)
    local param = file:open_group("param")
    local mdsim = param:open_group("mdsim")
    local correlation = param:open_group("correlation")

    vm.box = {}
    vm.box.dimension = mdsim:read_attribute("dimension", h5.int())
    -- FIXME scalar vm.box.particles = mdsim:read_attribute("particles", h5.uint())
    vm.box.particles = mdsim:read_attribute("particles", h5.uint_array())
    vm.box.density = mdsim:read_attribute("density", h5.float())
    -- FIXME optional vm.box.length = mdsim:read_attribute("box_length", h5.float())

    vm.verlet = {}
    vm.verlet.timestep = mdsim:read_attribute("timestep", h5.float())
    vm.integrator = "verlet"

    -- FIXME scalar vm.lennard_jones.cutoff = mdsim:read_attribute("cutoff_radius", h5.float())
    -- FIXME vm.lennard_jones.cutoff = mdsim:read_attribute("cutoff_radius", h5.float_array())
    -- FIXME vm.lennard_jones.epsilon = mdsim:read_attribute("potential_epsilon", h5.float_array())
    -- FIXME vm.lennard_jones.sigma = mdsim:read_attribute("potential_sigma", h5.float_array())
    -- FIXME vm.lennard_jones.smooth = mdsim:read_attribute("potential_smoothing", h5.float())
    vm.force = "lennard_jones"

    vm.neighbour = {}
    vm.neighbour.occupancy = mdsim:read_attribute("cell_occupancy", h5.float())
    vm.neighbour.skin = mdsim:read_attribute("neighbour_skin", h5.float())

    vm.gpu = {}
    vm.gpu.threads = mdsim:read_attribute("threads", h5.uint())

    vm.boltzmann = {}
    vm.boltzmann.temperature = mdsim:read_attribute("temperature", h5.float())

    -- vm.FIXME = mdsim:read_attribute("pair_separation", h5.float())

    vm.sampler = {}
    vm.sampler.steps = correlation:read_attribute("steps", h5.uint64())
    -- FIXME optional vm.sampler.time = correlation:read_attribute("time", h5.float())

    -- vm.FIXME = correlation:read_attribute("sample_rate", h5.uint())
    -- vm.FIXME = correlation:read_attribute("block_size", h5.uint())
    -- vm.FIXME = correlation:read_attribute("max_samples", h5.uint64_array())
    -- vm.FIXME = correlation:read_attribute("min_samples", h5.uint64())
    -- vm.FIXME = correlation:read_attribute("q_values", h5.float_array())
    -- vm.FIXME = correlation:read_attribute("q_error", h5.float())
end
