--
-- Copyright © 2013      Felix Höfling
-- Copyright © 2010-2011 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local module            = require("halmd.utility.module")
local posix_signal      = require("halmd.utility.posix_signal")
local utility           = require("halmd.utility")

-- grab C++ modules
local h5md = libhalmd.io.writers.h5md

---
-- H5MD Writer
-- ===========
--
-- This module provides a file writer for the H5MD format.
--
-- http://nongnu.org/h5md/
--

---
-- Construct H5MD writer.
--
-- :param table args: keyword arguments
-- :param string args.path: pathname of output file
-- :param string args.email: email address of file author *(optional)*
-- :param boolean args.overwrite: if true, overwrite existing file *(default: false)*
-- :returns: instance of file writer
--
-- Create the output file and writes the H5MD metadata.
--
-- http://nongnu.org/h5md/h5md.html#h5md-metadata
--
-- The author name is retrieved from the password file entry for the real user
-- id of the calling process.
--
-- .. warning:: The output file will be truncated if it exists.
--
-- The file may be flushed to disk by sending the USR2 signal to the process::
--
--    killall -USR2 halmd
--
-- This yields a consistent snapshot on disk (until the next sample
-- is written), which is useful to peek at output data during the
-- simulation.
--
-- .. method:: writer(self, args)
--
--    Construct a group writer.
--
--    :param table args: keyword arguments
--    :param table args.location: sequence with group's path
--    :param string args.mode: write mode ("append" or "truncate")
--    :returns: instance of group writer
--
--    Example for creating and using a truncate writer::
--
--       local writer = file:writer({location = {"particles", "box"}, mode = "truncate"})
--       writer:on_write(box.origin, {"offset"})
--       writer:on_write(box.edges, {"edges"})
--
--       local sampler = require("halmd.observables.sampler")
--       sampler:on_start(writer.write)
--
--    Example for creating and using an append writer::
--
--       local writer = file:writer({location = {"observables"}, mode = "append"})
--       writer:on_prepend_write(observable.sample)
--       writer:on_write(observable.en_pot, {"potential_energy"})
--       writer:on_write(observable.en_kin, {"kinetic_energy"})
--       writer:on_write(observable.en_tot, {"internal_energy"})
--
--       local sampler = require("halmd.observables.sampler")
--       sampler:on_start(writer.write)
--
-- .. method:: flush()
--
--    Flush the output file to disk.
--
-- .. attribute:: root
--
--    HDF5 root group of the file.
--
-- .. attribute:: path
--
--    Filename of the file.
--
local M = module(function(args)
    local path = utility.assert_kwarg(args, "path")
    local email = args.email or ""
    local overwrite = args.overwrite or false
    local file = h5md.file(path, "", email, overwrite) -- retrieve author name automatically if field is empty

    file.writer = function(self, args)
        local mode = utility.assert_kwarg(args, "mode")
        local writer
        if mode == "append" then
            writer = h5md.append(self.root, args.location, clock)

        elseif mode == "truncate" then
            writer = h5md.truncate(self.root, args.location)

        else
            error("invalid mode: " .. mode)
        end
        return writer
    end

    -- flush H5MD file to disk on SIGUSR2
    posix_signal:on_usr2(function() file:flush() end)

    return file
end)

---
-- .. function:: version()
--
--    Returns sequence of integers with major and minor H5MD version.
M.version = assert(h5md.file.version)

return M
