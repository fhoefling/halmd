--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local hooks             = require("halmd.hooks")
local module            = require("halmd.utility.module")
local mdsim = {
    clock               = require("halmd.mdsim.clock")
}
local utility = {
    posix_signal        = require("halmd.utility.posix_signal")
}

-- grab C++ modules
local h5md = libhalmd.io.writers.h5md
local h5 = libhalmd.h5
-- grab standard library
local assert = assert
local error = error
local io = io
local setmetatable = setmetatable
local type = type

---
-- H5MD Writer
-- ===========
--
-- This module provides a file writer for the H5MD format.
--
-- http://nongnu.org/h5md/
--
local M = module("halmd.io.writers.h5md")

---
-- Construct H5MD writer.
--
-- :param table args: keyword arguments
-- :param string args.path: pathname of output file
-- :returns: instance of file writer
--
-- Create the output file and writes the H5MD attribute group.
--
-- http://nongnu.org/h5md/draft.html#global-attributes
--
-- .. warning:: The output file will be truncated if it exists.
--
-- .. method:: writer(args)
--
--    Construct a group writer.
--
--    :param table args: keyword arguments
--    :param table args.location: sequence with group's path
--    :param string args.mode: write mode ("append" or "truncate")
--    :returns: instance of group writer
--
--    Example for creating and using a truncate writer::
--
--       local writer = file:writer({location = {"trajectory", "box"}, mode = "truncate"})
--       writer:on_write(box.origin, {"offset"})
--       writer:on_write(box.edges, {"edges"})
--
--       local sampler = observables.sampler() -- singleton
--       sampler:on_start(writer.write)
--
--    Example for creating and using an append writer::
--
--       local writer = file:writer({location = {"observables"}, mode = "append"})
--       writer:on_prepend_write(observable.sample)
--       writer:on_write(observable.en_pot, {"potential_energy"})
--       writer:on_write(observable.en_kin, {"kinetic_energy"})
--       writer:on_write(observable.en_tot, {"total_energy"})
--
--       local sampler = observables.sampler() -- singleton
--       sampler:on_start(writer.write)
--
-- .. attribute:: flush
--
--    Callable slot to flush the output file to disk.
--
-- .. attribute:: root
--
--    HDF5 root group of the file.
--
-- .. attribute:: path
--
--    Filename of the file.
--
function M.__new(args)
    local path = args.path
    if not path then
        error("missing argument 'path'", 3)
    end
    local file = h5md.file(path)

    file.writer = function(self, args)
        assert(type(args) == "table", "missing argument table")
        local writer
        local mode = assert(args.mode, "missing mode")
        if mode == "append" then
            local clock = mdsim.clock() -- singleton
            writer = h5md.append(self.root, args.location, clock)

        elseif mode == "truncate" then
            writer = h5md.truncate(self.root, args.location)

        else
            error("invalid mode: " .. mode)
        end
        return writer
    end

    -- create parameter group
    local param = file.root:open_group("halmd")

    -- store HALMD script to ease reproducibility
    if args.script then
        local f = assert(io.open(args.script, "r"))
        local s = f:read("*all")
        f:close()
        param:write_attribute("script", h5.string(), s)
    end

    -- register hook to write HALMD parameters
    hooks.register_module_hook(function(module, object)
        local write_parameters = module.write_parameters
        if write_parameters then
            --
            -- If write_parameters only stores global parameters, or stores
            -- no parameters at all, the module's HDF5 parameter group would
            -- remain empty. Therefore we delay creation by creating or opening
            -- the group upon access of its methods.
            --
            local group = setmetatable({}, {
                __index = function(self, name)
                    local namespace = assert(module.namespace)
                    local group = param:open_group(namespace)
                    local method = group[name]
                    if method then
                        return function(self, ...)
                            method(group, ...)
                        end
                    end
                end
            })
            write_parameters(object, group, param)
        end
    end)

    -- flush H5MD file to disk on SIGUSR2
    local posix_signal = utility.posix_signal() -- singleton
    posix_signal:on_usr2(file.flush)

    return file
end

---
-- .. function:: version()
--
--    Returns sequence of integers with major and minor H5MD version.
M.version = assert(h5md.file.version)

return M
