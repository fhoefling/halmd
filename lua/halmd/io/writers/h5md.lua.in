--
-- Copyright Â© 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")
require("halmd.mdsim.clock")

-- grab modules
local mdsim = halmd.mdsim
-- grab C++ modules
local h5md = libhalmd.io.writers.h5md
-- grab standard library
local assert = assert
local error = error
local type = type

module("halmd.io.writers.h5md", halmd.modules.register)

--
-- construct H5MD writer
--
function new(args)
    local path = assert(args.path, "missing path")
    local file = h5md.file(path)

    -- extend H5MD file with a file:writer method
    --
    -- This function wraps the constructors of h5md::append and h5md::truncate,
    -- which allows observable modules to construct a collective dataset writer
    -- without knowledge of the file format.
    --
    -- Example for creating and using a truncate writer:
    --
    --   local writer = file:writer{location = {"trajectory", "box"}, mode = "truncate"}
    --   writer:on_write(box.origin, {"offset"})
    --   writer:on_write(box.edges, {"edges"})
    --
    --   local sampler = observables.sampler{} -- singleton
    --   sampler:on_start(writer.write)
    --
    -- Example for creating and using an append writer:
    --
    --   local writer = file:writer{location = {"observables"}, mode = "append"}
    --   writer:on_prepend_write(observable.sample)
    --   writer:on_write(observable.en_pot, {"potential_energy"})
    --   writer:on_write(observable.en_kin, {"kinetic_energy"})
    --   writer:on_write(observable.en_tot, {"total_energy"})
    --
    --   local sampler = observables.sampler{} -- singleton
    --   sampler:on_start(writer.write)
    --
    file.writer = function(self, args)
        assert(type(args) == "table", "missing argument table")
        local writer
        local mode = assert(args.mode, "missing mode")
        if mode == "append" then
            local clock = mdsim.clock() -- singleton
            writer = h5md.append(self.root, args.location, clock)

        elseif mode == "truncate" then
            writer = h5md.truncate(self.root, args.location)

        else
            error("invalid mode: " .. mode)
        end
        return writer
    end

    return file
end

--
-- returns module description
--
function name()
    return "H5MD file format"
end
