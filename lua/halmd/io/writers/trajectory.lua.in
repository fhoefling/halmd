--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.io.writers.file")
require("halmd.mdsim.box")
require("halmd.mdsim.particle")
require("halmd.modules")
require("halmd.observables.phase_space")
require("halmd.observables.sampler")
require("halmd.observables.samples.phase_space")

-- grab modules
local writers = halmd.io.writers
local mdsim = halmd.mdsim
local observables = halmd.observables
-- grab C++ wrappers
local po = libhalmd.po
local h5 = libhalmd.h5
-- grab standard library
local assert = assert
local string = string

module("halmd.io.writers.trajectory", halmd.modules.register)

--
-- construct trajectory writer module
--
function new(args)
    local particle = assert(args.particle, "missing parameter: particle")
    local group = assert(args.group, "missing parameter: group")
    local every = args.every or 1000 -- default value

    -- create trajectory file
    local file = writers.file{extension = "trj"}

    -- FIXME share phase_space instance with observables::host::density_mode
    local phase_space = assert(observables.phase_space{particle = particle, memory = "host"})
    local sample = assert(phase_space.sample)
    local box = mdsim.box() -- singleton
    local sampler = observables.sampler() -- singleton

    -- write box edge vectors and offset to trajectory group
    --
    -- @future time series for NPT ensemble
    --
    local writer = file:writer{location = {"trajectory", "box"}, mode = "truncate"}
    writer:on_write(box.edges, {"edges"})
    writer:on_write(box.origin, {"offset"})
    sampler:on_start{writer.write, tracker = writer}

    -- sample and write phase space at fixed interval
    local writer = file:writer{location = {"trajectory", group}, mode = "append"}
    writer:on_prepend_write(phase_space.acquire)
    writer:on_write(sample.position, {"position"})
    writer:on_write(sample.velocity, {"velocity"})
    local _, species = writer:on_write(sample.types, {"species"})
    sampler:on_sample{writer.write, every, tracker = writer}

    -- store attributes
    species:write_attribute("mass", h5.float_array(), particle.mass)

    return writer
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("every", po.uint64(), "sample interval for trajectory")
end
