--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
}
local observables = {
    phase_space         = require("halmd.observables.phase_space")
  , sampler             = require("halmd.observables.sampler")
}
local samples = {
    phase_space         = require("halmd.observables.samples.phase_space")
}
local writers = {
    file                = require("halmd.io.writers.file")
}

-- grab C++ wrappers
local po = libhalmd.po
local h5 = libhalmd.h5
-- grab standard library
local assert = assert
local ipairs = ipairs
local string = string
local type = type

local M = module("halmd.io.writers.trajectory")

--
-- construct trajectory writer module
--
-- @param args       parameter table
--   args.particle_group    list of particle_group instances with attached labels
--   args.every             sampling interval, default (0) writes at start and finish only
--
function M.__new(args)
    local particle_group = assert(args.particle_group, "missing parameter: particle_group")
    assert(type(particle_group) == "table", "invalid table")
    local every = args.every or 0 -- default value

    -- create trajectory file
    local file = writers.file{extension = "trj"}

    local box = mdsim.box() -- singleton
    local sampler = observables.sampler() -- singleton

    -- write box edge vectors and offset to trajectory group
    --
    -- @future time series for NPT ensemble
    --
    local writer = file:writer{location = {"trajectory", "box"}, mode = "truncate"}
    writer:on_write(box.edges, {"edges"})
    writer:on_write(box.origin, {"offset"})
    sampler:on_start{writer.write, tracker = writer}

    -- construct list of phase space samplers
    --
    -- FIXME share phase_space instance with observables::host::density_mode -- is this a worthy optimisation?
    local phase_space = assert(observables.phase_space{particle_group = particle_group, memory = "host"})

    for i, phase_space in ipairs(phase_space) do
        local sample = assert(phase_space.sample)
        local label = assert(phase_space.label)

        -- sample and write phase space at fixed interval
        local writer = file:writer{location = {"trajectory", label}, mode = "append"}
        writer:on_prepend_write(phase_space.acquire)
        writer:on_write(sample.position, {"position"})
        writer:on_write(sample.velocity, {"velocity"})
        local _, species = writer:on_write(sample.types, {"species"})
        if every > 0 then
            sampler:on_sample{writer.write, every, tracker = writer}
        else
            sampler:on_finish{writer.write, tracker = writer}
        end

        -- store attributes
--         species:write_attribute("mass", h5.float_array(), particle.mass) -- FIXME
    end

    return writer
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("every", po.uint64(), "sample interval for trajectory")
end

return M
