--
-- Copyright Â© 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

---
-- H5MD Reader
-- ===========
--
-- This module provides a file reader for the H5MD format.
--
-- http://nongnu.org/h5md/

-- grab C++ modules
local h5md = assert(libhalmd.io.readers.h5md)

---
-- Construct H5MD reader.
--
-- :param table args: keyword arguments
-- :param string args.path: pathname of input file
--
-- .. method:: reader(args)
--
--    Construct a group reader.
--
--    :param table args: keyword arguments
--    :param table args.location: sequence with group's path
--    :param string args.mode: read mode ("append" or "truncate")
--    :returns: instance of group reader
--
-- .. method:: close()
--
--    Close file.
--
-- .. attribute:: root
--
--    HDF5 root group of the file.
--
-- .. attribute:: path
--
--    Filename of the file.
--
-- .. attribute:: version
--
--    H5MD major and minor version of file.
--
-- .. attribute:: creator
--
--    Name of the program that created the file.
--
-- .. attribute:: creator_version
--
--    Version of the program that created the file.
--
-- .. attribute:: creation_time
--
--    Creation time of the file in seconds since the Unix epoch.
--
-- .. attribute:: author
--
--    Name of author of the file.
--
local M = module(function(args)
    local path = args and args.path
    if type(path) ~= "string" then
        error("bad argument 'path'", 2)
    end

    -- open H5MD file for reading
    local file = h5md.file(path)

    file.reader = function(self, args)
        local location = args and args.location
        if type(location) ~= "table" then
            error("bad argument 'location'", 2)
        end
        local mode = args.mode
        if type(mode) ~= "string" then
            error("bad argument 'mode'", 2)
        end

        local reader
        if mode == "append" then
            reader = h5md.append(self.root, location)
        elseif mode == "truncate" then
            reader = h5md.truncate(self.root, location)
        else
            error(("invalid mode: %s"):format(mode), 2)
        end
        return reader
    end

    return file
end)

---
-- Check whether file is H5MD file.
--
-- :param path: filename
-- :returns: ``true`` if file is H5MD file, ``false`` if not, or ``nil`` if file does not exist
--
function M.check(path)
    if type(path) ~= "string" then
        error("bad argument 'path'", 2)
    end
    return io.open(path, "r") and h5md.file.check(path)
end

return M
