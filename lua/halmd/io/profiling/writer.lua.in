--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

require("halmd.hooks")
require("halmd.io.profiling.writers")

-- grab modules
local hooks = halmd.hooks
local profiling = halmd.io.profiling
-- grab C++ wrappers
local profiler_wrapper = halmd_wrapper.utility.profiler
local po = halmd_wrapper.po
-- grab standard library
local assert = assert
local pairs = pairs
local table = table

module("halmd.io.profiling.writer", halmd.modules.register)

--
-- construct profiler module
--
function new(args)
    local format = args.format -- optional

    -- add log writer by default
    local writer = { profiling.writers.log() }

    -- add optional writer chosen with --format option
    if args.format then
        table.insert(writer, profiling.writers[format]())
    end

    hooks.register_object_hook(function(object, module)
        if object.register_runtimes then
            local group = assert(module._NAME):gsub("^halmd%.", ""):gsub("%.", "/")
            local profiler = profiler_wrapper(writer, group)
            object:register_runtimes(profiler)
        end
    end)

    return writer
end

-- override module namespace
namespace = "profiling"

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)

    -- writer module choices with descriptions
    local choices = {}
    for writer, module in pairs(profiling.writers) do
        if module.name then
            choices[writer] = module.name()
        end
    end

    desc:add("format", po.string():choices(choices), "profiling output file format")
end
