--
-- Copyright Â© 2010-2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

-- grab C++ wrappers
local logger    = assert(libhalmd.io.logger)
local logging   = assert(libhalmd.io.logging)

-- logging severity levels
local level = {
    error       = assert(logging.error),
    warning     = assert(logging.warning),
    info        = assert(logging.info),
    debug       = assert(logging.debug),
    trace       = assert(logging.trace),
}

---
-- Logging
-- =======
--
-- This module provides logging to HALMD scripts and modules.
--
local M = {}

---
-- Script Logger
-- -------------
--
-- The script logger may be used in HALMD scripts.
--
-- A message is logged with one of the following severity levels.
--
-- =========  ===========================================
-- Severity   Description
-- =========  ===========================================
-- error      An error has occurred, and HALMD will abort
-- warning    Warn user, e.g. when using single precision
-- info       Normal logging level, e.g. for parameters
-- debug      Low frequency debugging messages
-- trace      High frequency debugging messages
-- =========  ===========================================
--
-- This example shows use of the script logger::
--
--    local halmd = require("halmd")
--
--    local log = halmd.io.log
--
--    function my_simulation(args)
--        log.info("box edge lengths: %s", table.concat(args.length, " "))
--
--        log.info("equilibrate system for %d steps", args.equilibrate)
--
--        log.info("measure mean-square displacement for %d steps", args.steps)
--    end

---
-- .. function:: error(msg, ...)
--
--    Log message with severity ``error``.
--
--    :param string msg: see `string.format`_
--
-- .. function:: warning(msg, ...)
--
--    Log message with severity ``warning``.
--
--    :param string msg: see `string.format`_
--
-- .. function:: info(msg, ...)
--
--    Log message with severity ``info``.
--
--    :param string msg: see `string.format`_
--
-- .. function:: debug(msg, ...)
--
--    Log message with severity ``debug``.
--
--    :param string msg: see `string.format`_
--
-- .. function:: trace(msg, ...)
--
--    Log message with severity ``trace``.
--
--    :param string msg: see `string.format`_
--
-- .. _string.format: http://www.lua.org/manual/5.2/manual.html#pdf-string.format
--
for k, v in pairs(level) do
    local log = assert(logger.log)
    local self = logger.get()
    M[k] = function(format, ...)
        local status, result = pcall(string.format, tostring(format), ...)
        if not status then
            error(result, 2)
        end
        log(self, v, result)
    end
end

---
-- Module Logger
-- -------------
--
-- This class provides module loggers for Lua and C++ modules.
--
-- A logger may optionally have a label, which is prepended to messages
-- to distinguish output of a module from that of other modules.
--
-- This example shows use of a logger in a HALMD module::
--
--    local log    = require("halmd.io.log")
--    local module = require("halmd.utility.module")
--
--    -- C++ class
--    local my_potential = assert(libhalmd.mdsim.potentials.my_potential)
--
--    -- use the same logger for all instances
--    local logger = log.logger({label = "my_potential"})
--
--    local M = module(function(args)
--        -- logs message with prefix "my_potential: "
--        logger:info("parameters: %g %g %g", 1.0, 0.88, 0.8)
--
--        -- pass module logger to C++ constructor
--        local self = my_potential(..., logger)
--
--        return self
--    end)
--
--    return M

---
-- .. class:: logger(args)
--
--    Construct a logger instance, optionally with given label.
--
--    :param table args: keyword arguments (optional)
--    :param string args.label: logging prefix (optional)
--
--    .. method:: error(self, msg, ...)
--
--       Log message with severity ``error``.
--
--       :param string msg: see `string.format`_
--
--    .. method:: warning(self, msg, ...)
--
--       Log message with severity ``warning``.
--
--       :param string msg: see `string.format`_
--
--    .. method:: info(self, msg, ...)
--
--       Log message with severity ``info``.
--
--       :param string msg: see `string.format`_
--
--    .. method:: debug(self, msg, ...)
--
--       Log message with severity ``debug``.
--
--       :param string msg: see `string.format`_
--
--    .. method:: trace(self, msg, ...)
--
--       Log message with severity ``trace``.
--
--       :param string msg: see `string.format`_
--

function M.logger(args)
    local self
    if args and args.label then
        self = logger(tostring(args.label))
    else
        self = logger()
    end
    for k, v in pairs(level) do
        local log = assert(logger.log)
        self[k] = function(self, format, ...)
            local status, result = pcall(string.format, tostring(format), ...)
            if not status then
                error(result, 2)
            end
            log(self, v, result)
        end
    end
    return self
end

---
-- Logging Setup
-- -------------
--
-- The following functions setup available logging sinks.
--
-- By default, messages are logged to console with severity ``warning``.
--
-- This example shows logging setup in a HALMD script::
--
--    local halmd = require("halmd")
--
--    -- log warning and error messages to console
--    halmd.io.log.open_console({severity = "warning"})
--    -- log anything except trace messages to file
--    halmd.io.log.open_file("kob_andersen.log", {severity = "debug"})

--
-- Returns C++ representation of severity level.
--
-- :param string severity: logging severity level
--
-- If ``severity`` is ``nil``, returns default ``info``.
--
local function logging_severity(severity)
    local result
    if severity then
        result = level[severity]
        if not result then
            error(("undefined severity level '%s'"):format(severity), 2)
        end
    else
        result = assert(level.info)
    end
    return result
end

---
-- Log messages with equal or higher ``severity`` to console.
--
-- If ``severity`` is not specified, it is set to ``info``.
--
-- :param table args: keyword arguments (optional)
-- :param string args.severity: log severity level (optional)
--
function M.open_console(args)
    local severity = logging_severity(args and args.severity)
    logging.get():open_console(severity)
end

---
-- Disable logging to console.
--
function M.close_console()
    logging.get():close_console()
end

---
-- Log messages with equal or higher ``severity`` to file.
--
-- If ``severity`` is not specified, it is set to ``info``.
--
-- If a file with ``filename`` exists, it is truncated.
--
-- :param string filename: log filename
-- :param table args: keyword arguments (optional)
-- :param string args.severity: log severity level (optional)
--
function M.open_file(filename, args)
    local severity = logging_severity(args and args.severity)
    logging.get():open_file(filename, severity)
end

---
-- Close log file.
--
function M.close_file()
    logging.get():close_file()
end

return M
