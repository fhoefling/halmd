--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module = require("halmd.utility.module")

-- grab C++ wrappers
local logger_wrapper = libhalmd.io.logger
local logging_wrapper = libhalmd.io.logging
-- grab standard library
local assert = assert
local rawget = rawget
local rawset = rawset
local setmetatable = setmetatable
local tostring = tostring

---
-- Logging
-- =======
--
local M = module("halmd.log")

--
-- provide module logger
--
function M.parameters(module)
    local logger = logger_wrapper()
    logger:add_attribute("Module", assert(module.namespace))
    return {logger = logger}
end

---
-- Log message with severity fatal.
--
-- :param string format: see `string.format`_
--
-- .. _string.format: http://www.lua.org/manual/5.2/manual.html#pdf-string.format
--
function M.fatal(format, ...)
    logging_wrapper.fatal(tostring(format):format(...))
end

---
-- Log message with severity error.
--
-- :param string format: see `string.format`_
--
function M.error(format, ...)
    logging_wrapper.error(tostring(format):format(...))
end

---
-- Log message with severity warning.
--
-- :param string format: see `string.format`_
--
function M.warning(format, ...)
    logging_wrapper.warning(tostring(format):format(...))
end

---
-- Log message with severity info.
--
-- :param string format: see `string.format`_
--
function M.info(format, ...)
    logging_wrapper.info(tostring(format):format(...))
end

---
-- Log message with severity debug.
--
-- :param string format: see `string.format`_
--
-- :func:`halmd.log.debug` has no effect in a non-debug build.
--
function M.debug(format, ...)
    if logging_wrapper.debug then
        logging_wrapper.debug(tostring(format):format(...))
    end
end

---
-- Log message with severity trace.
--
-- :param string format: see `string.format`_
--
-- :func:`halmd.log.trace` has no effect in a non-debug build.
--
function M.trace(format, ...)
    if logging_wrapper.trace then
        logging_wrapper.trace(tostring(format):format(...))
    end
end

return M
