--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local random_wrapper = {
    host = libhalmd.host.random
}
if libhalmd.gpu then
    random_wrapper.gpu = libhalmd.gpu.random
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local error = error

local M = module("halmd.random")

-- random number generator singleton per memory type
local random = {}

--
-- construct random module
--
function M.__new(args)
    local memory = args.memory -- optional argument
    if not memory then
        memory = device() and "gpu" or "host"
    end

    if not random[memory] then
        local defaults
        if memory == "gpu" then
            defaults = assert(random_wrapper.gpu.rand48.defaults)
        else
            defaults = assert(random_wrapper.host.gfsr4.defaults)
        end
        local seed = args.seed or defaults.seed()
        local logger = assert(args.logger)

        if memory == "gpu" then
            local blocks = args.blocks or defaults.blocks()
            local threads = args.threads or defaults.threads()
            local shuffle_threads = defaults.shuffle_threads()
            random[memory] = random_wrapper.gpu.rand48(seed, logger, blocks, threads, shuffle_threads)
        else
            random[memory] = random_wrapper.host.gfsr4(seed, logger)
        end
    end
    return random[memory]
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("seed", po.uint(), "random number generator integer seed")
    if random_wrapper.gpu then
        desc:add("blocks", po.uint(), "number of CUDA blocks")
        desc:add("threads", po.uint(), "number of CUDA threads per block")
    end
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    if random_wrapper.gpu then
        args.blocks = group:read_attribute("blocks", h5.uint())
        args.threads = group:read_attribute("threads", h5.uint())
    end
end

--
-- write module parameters to HDF5 group
--
-- @param random module instance
-- @param group HDF5 group
--
function M.write_parameters(random, group)

    -- FIXME serialize random number generator state

    if random.blocks then
        group:write_attribute("blocks", h5.uint(), random.blocks)
        group:write_attribute("threads", h5.uint(), random.threads)
    end
end

return M
