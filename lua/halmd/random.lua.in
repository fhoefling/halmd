--
-- Copyright Â© 2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device = require("halmd.utility.device")

---
-- Random Numbers
-- ==============
--
-- This module provides random number generators and random distributions.
--
local M = {}

-- grab C++ wrappers
local random = {host = assert(libhalmd.random.host.gfsr4)}
if device.gpu then
    random.gpu = assert(libhalmd.random.gpu.rand48)
end

-- construct random number generators with default seed
local generator = {}
for memory, random in pairs(random) do
    generator[memory] = random()
end

---
-- Seed random number generator.
--
-- :param number seed: random number generator seed
--
function M.seed(seed)
    if not type(seed) ~= "number" then
        error("bad argument #1 (expected number)", 2)
    end
    for memory, generator in pairs(generator) do
        generator.seed(seed)
    end
end

---
-- Get random number generator.
--
-- :param table args: keyword arguments
-- :param string args.memory: ``host`` or ``gpu`` (defaults to compute device)
-- :returns: random number generator
--
function M.generator(args)
    local memory = args and args.memory
    if not memory then
        memory = device.gpu and "gpu" or "host"
    end
    local self = generator[memory]
    if not self then
        error("bad argument 'memory'", 2)
    end
    return self
end

return M
