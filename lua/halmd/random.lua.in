--
-- Copyright © 2013-2014 Felix Höfling
-- Copyright © 2012      Peter Colberg
-- Copyright © 2022      Jaslo Ziska
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device  = require("halmd.utility.device")
local module  = require("halmd.utility.module")
local utility = require("halmd.utility")

-- grab C++ wrappers
local random = {host = {
    mt19937 = assert(libhalmd.random.host.mt19937)
}}
if device.gpu then
    random.gpu = {
        rand48 = assert(libhalmd.random.gpu.rand48),
        MRG32k3a = assert(libhalmd.random.gpu.MRG32k3a)
    }
end

---
-- Random Numbers
-- ==============
--
-- This module provides pseudo-random number generators (RNGs) and random
-- distributions. Supported generators are:
--
--   * Mersenne-Twister *MT19937* for the host CPU,
--   * L’Ecuyer’s *MRG32k3a* for the GPU, and
--   * a POSIX implementation of *rand48* for the GPU.
--

-- keep random number generators as singleton instances
local M = {}

---
-- Get pseudo-random number generator.
--
-- :param table args: keyword arguments
-- :param string args.algorithm: RNG algorithm (*default:* ``mt19937`` for the host and ``rand48`` for the GPU)
-- :param string args.memory: ``host`` or ``gpu`` (*default:* compute device)
-- :param number args.seed: initial seed value *(optional)*
--
-- :returns: pseudo-random number generator
--
-- The first call for each memory argument constructs a singleton instance of
-- the pseudo-random number generator, which is returned in subsequent calls.
-- Unrelated RNG instances are constructed for the host CPU and the GPU.
--
-- The argument ``algorithm`` specifies the RNG algorithm used and is either
-- ``mt19937`` if ``memory`` equals ``host`` and ``MRG32k3a`` or ``rand48`` if
-- ``memory`` is ``gpu``.
--
-- If the argument ``seed`` is omitted, the initial seed is obtained from the
-- system's random device, e.g., ``/dev/urandom`` on Linux.
--
-- .. method:: seed(seed)
--
--    Set (or reset) the seed of the pseudo-random number generator.
--
-- .. method:: shuffle(sequence)
--
--    Return randomly shuffled sequence. The sequence is given as a Lua table.
--
--    The method is only available if the random number generator was
--    constructed with ``memory = "host"``.
--
function M.generator(args)
    local memory = args and args.memory or (device.gpu and "gpu" or "host")
    local seed = args and args.seed
    utility.assert_type(memory, "string")
    if seed then
        utility.assert_type(seed, "number")
    end
    local algorithm = args and args.algorithm or (memory == "gpu" and "rand48" or "mt19937")

    -- retrieve singleton instance if it exists
    local self = M[algorithm]
    if not self then
        local algorithms = random[memory]
        if not algorithms then
            error("bad argument 'memory'", 2)
        end
        local rng = algorithms[algorithm]
        if not rng then
            error("bad argument 'algorithm'", 2)
        end

        -- construct random number generator
        self = seed and rng(seed) or rng()
        M[algorithm] = self
    end

    return self
end

return M
