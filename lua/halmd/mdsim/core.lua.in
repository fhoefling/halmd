--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.mdsim.clock")
require("halmd.modules")
require("halmd.singleton")

-- grab modules
local signals = require("halmd.modules.signals")
local mdsim = halmd.mdsim
-- grab C++ wrappers
local core_wrapper = libhalmd.mdsim.core
-- grab standard library
local assert = assert

module("halmd.mdsim.core", halmd.modules.register, halmd.singleton)

--
-- construct core module
--
function new(args)
    local clock = mdsim.clock() -- singleton
    return core_wrapper(clock)
end

-- patch C++ objects with signal connection handlers
-- @see module halmd.modules.signals
--
-- For an example, this allows disconnecting an NVT integrator after
-- thermalising the system, and continuing with an NVE integrator for
-- the production run:
--
--   local integrator = mdsim.integrators.verlet_nvt_andersen{}
--   integrator:disconnect()
--   mdsim.integrator.verlet{}
--
signals.patch(_M)
