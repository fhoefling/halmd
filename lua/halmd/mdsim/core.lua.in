--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local profiler = require("halmd.utility.profiler")

-- grab C++ wrappers
local core = assert(libhalmd.mdsim.core)

---
-- Core
-- ====
--
-- The simulation core drives the MD step.
--
-- .. method:: setup()
--
--    Prepare microscopic system state.
--
--    This method is invoked by :meth:`halmd.observables.sampler.setup`.
--
-- .. method:: mdstep()
--
--    Perform a single MD integration step.
--
--    This method is invoked by :meth:`halmd.observables.sampler.run`.
--
-- .. method:: on_prepend_setup(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_setup(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_append_setup(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_prepend_integrate(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_integrate(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_append_integrate(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_prepend_force(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_force(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_append_force(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_prepend_finalize(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_finalize(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--
-- .. method:: on_append_finalize(slot)
--
--    Connect nullary slot to signal.
--
--    :returns: signal connection
--

-- construct singleton instance
local self = core()

-- connect runtime accumulators to profiler
local runtime = assert(self.runtime)
profiler:on_profile(runtime.setup, "microscopic state preparation")
profiler:on_profile(runtime.mdstep, "MD integration step")

return self
