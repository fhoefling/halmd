--
-- Copyright Â© 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local excluded_volume_wrapper = {
    [3] = {
        double = assert(libhalmd.mdsim.positions.excluded_volume_3_double)
      , float = assert(libhalmd.mdsim.positions.excluded_volume_3_float)
    }
  , [2] = {
        double = assert(libhalmd.mdsim.positions.excluded_volume_2_double)
      , float = assert(libhalmd.mdsim.positions.excluded_volume_2_float)
    }
}
-- grab standard library
local assert = assert
local class_info = class_info


local M = module(function(args)
    -- parameters
    local cell_length = args.cell_length or 1 -- default value
    -- dependencies
    local box = assert(args.box)
    local dimension = #box.edges
    local logger = log.logger({label = "excluded_volume"})

    local excluded_volume
    -- FIXME query precision from HALMD C++ library
    if device.gpu then
        excluded_volume = assert(excluded_volume_wrapper[dimension].float)
    else
        excluded_volume = assert(excluded_volume_wrapper[dimension].double)
    end
    return excluded_volume(box, cell_length, logger)
end)

return M
