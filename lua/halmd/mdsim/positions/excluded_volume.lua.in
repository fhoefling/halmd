--
-- Copyright © 2011  Peter Colberg
-- Copyright © 2012  Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local excluded_volume = assert(libhalmd.mdsim.positions.excluded_volume)

---
-- Excluded volume
-- =======================
--
-- This module implements a method to place a number of spheres
-- that have no overlap.
--
-- This example shows use of the excluded volume with the placement of 1000 particles
-- at random positions with a diameter of ``1`` in a cubic box with each edge being
-- ``50``:
--
-- .. literalinclude:: /test/lua/mdsim/positions/excluded_volume.lua
--    :lines: 40-65
--
-- .. note::
--
--    If one uses the random number generator from Lua , this should be done in
--    conjunction with LuaJIT, only. Standard Lua uses the OS-dependent ``rand()`` function.
--
--    See http://luajit.org/extensions.html#math_random
--

---
-- Construct excluded volume instance
--
-- :param table args: keyword arguments
-- :param number args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.cell_length: cell length for internal binning (must not be
--                                 smaller than largest sphere diameter)
--
-- .. method:: exclude_sphere(centre, diameter)
--
--    Place a single sphere at ``centre`` with a diameter of ``diameter``
--
-- .. method:: exclude_spheres(centres, diameters)
--
--    Place a set of spheres with their respective centres and diameters
--
-- .. method:: place_spheres(centre, diameter)
--
--    Test if a sphere at ``centre`` with diameter ``diameter`` can be placed without
--    overlap with any other previously set sphere
--
local M = module(function(args)
    local box = args.box
    if not box then
        error("missing argument: box", 2)
    end
    local cell_length = args.cell_length
    if not cell_length then
        error("missing argument: cell_length", 2)
    end
    if type(cell_length) ~= "number" then
        error("bad argument 'cell_length'", 2)
    end

    local logger = log.logger({label = "excluded_volume"})

    return excluded_volume(box, cell_length, logger)
end)

return M
