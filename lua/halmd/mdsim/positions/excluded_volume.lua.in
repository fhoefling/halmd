--
-- Copyright Â© 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.box")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local excluded_volume_wrapper = {
    [3] = {
        double = assert(libhalmd.mdsim.positions.excluded_volume_3_double)
      , float = assert(libhalmd.mdsim.positions.excluded_volume_3_float)
    }
  , [2] = {
        double = assert(libhalmd.mdsim.positions.excluded_volume_2_double)
      , float = assert(libhalmd.mdsim.positions.excluded_volume_2_float)
    }
}
-- grab standard library
local assert = assert
local class_info = class_info
local print = print

module("halmd.mdsim.positions.excluded_volume", halmd.modules.register)

function new(args)
    -- parameters
    local cell_length = args.cell_length or 1 -- default value
    -- dependencies
    local box = mdsim.box() -- singleton
    local dimension = assert(box.dimension)
    local logger = assert(args.logger)

    local excluded_volume
    -- FIXME query precision from HALMD C++ library
    if device() then
        excluded_volume = assert(excluded_volume_wrapper[dimension].float)
    else
        excluded_volume = assert(excluded_volume_wrapper[dimension].double)
    end
    return excluded_volume(box, cell_length, logger)
end
