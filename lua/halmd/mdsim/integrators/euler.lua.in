--
-- Copyright © 2011-2012  Michael Kopp and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.mdsim.box")
require("halmd.mdsim.clock")
require("halmd.mdsim.core")
require("halmd.mdsim.particle")
require("halmd.modules")

-- grab modules
local mdsim = halmd.mdsim
-- grab C++ wrappers
local euler_wrapper = libhalmd.mdsim.integrators.euler
local h5 = libhalmd.h5
-- grab standard library
local assert = assert

module("halmd.mdsim.integrators.euler", halmd.modules.register)

--
-- construct euler module
--
function new(args)
    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton
    local timestep = assert(clock.timestep)
    local logger = assert(args.logger)

    local integrator = euler_wrapper(particle, box, timestep, logger)

    -- connect integrator to core
    local core = mdsim.core() -- singleton
    core:on_integrate{integrator.integrate, tracker = integrator}
    -- note: euler.finalize is an empty function

    return integrator
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    profiler:on_profile{self, integrate = "Euler integration"}
end

--
-- returns module description
--
function description()
    return "Euler integrator"
end

--
-- write module parameters to HDF5 group
--
-- @param euler module instance
-- @param group HDF5 group
--
function write_parameters(euler, group)
    group:write_attribute("timestep", h5.float(), euler.timestep)
end
