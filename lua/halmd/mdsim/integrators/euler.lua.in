--
-- Copyright © 2011-2012  Michael Kopp
-- Copyright © 2011-2012  Felix Höfling
-- Copyright © 2014       Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock    = require("halmd.mdsim.clock")
local core     = require("halmd.mdsim.core")
local log      = require("halmd.io.log")
local utility  = require("halmd.utility")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")

---
-- Euler
-- =====
--
-- This integrator implements the explicit Euler method.
--
-- The algorithm propagates the positions in time as follows:
--
-- .. math::
--
--    \vec{r}(t + \tau) = \vec{r}(t) + \tau \vec{v}(t)
--
-- where :math:`\tau` is the timestep.
--

-- grab C++ wrappers
local euler = assert(libhalmd.mdsim.integrators.euler)

---
-- Construct Euler integrator for given system of particles
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.timestep: integration time step (defaults to :attr:`halmd.mdsim.clock.timestep`)
--
-- .. method:: set_timestep(timestep)
--
--    Set integration time step in MD units.
--
--    :param number timestep: integration timestep
--
--    This method forwards to :meth:`halmd.mdsim.clock.set_timestep`,
--    to ensure that all integrators use an identical time step.
--
-- .. attribute:: timestep
--
--    Integration time step in MD units.
--
-- .. method:: disconnect()
--
--    Disconnect integrator from core and profiler.
--
-- .. method:: integrate()
--
--    Calculate integration step
--
--    By default this function is connected to :meth:`halmd.mdsim.core.on_integrate`.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    local box = utility.assert_kwarg(args, "box")

    local timestep = args.timestep
    if timestep then
        clock:set_timestep(timestep)
    else
        timestep = assert(clock.timestep)
    end
    local logger = log.logger({label = "euler"})

    local self = euler(particle, box, timestep, logger)

    -- capture C++ method set_timestep
    local set_timestep = assert(self.set_timestep)
    -- forward Lua method set_timestep to clock
    self.set_timestep = function(self, timestep)
        clock:set_timestep(timestep)
    end

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "integrator")

    -- connect integrator to core
    table.insert(conn, assert(core:on_integrate(function() self:integrate() end)))
    table.insert(conn, assert(clock:on_set_timestep(function(timestep) set_timestep(self, timestep) end)))

    local runtime = assert(self.runtime)
    table.insert(conn, assert(profiler:on_profile(runtime.integrate, "Euler integration step")))

    return self
end)

return M
