--
-- Copyright © 2011  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.core")

require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local verlet_nvt_hoover_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.integrators.verlet_nvt_hoover_2_
      , [3] = libhalmd.mdsim.host.integrators.verlet_nvt_hoover_3_
    }
}
if libhalmd.mdsim.gpu then
    verlet_nvt_hoover_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.integrators.verlet_nvt_hoover_2_
      , [3] = libhalmd.mdsim.gpu.integrators.verlet_nvt_hoover_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.mdsim.integrators.verlet_nvt_hoover", halmd.modules.register)

--
-- construct verlet_nvt_hoover module
--
function new(args)
    local timestep = args.timestep or 0.001 -- default value
    local temperature = args.temperature or 1.12 -- default value
    local resonance_frequency = args.resonance_frequency or 5 -- default value

    -- dependency injection
    local core = mdsim.core()
    local dimension = assert(core.dimension)
    local particle = assert(core.particle)
    local box = assert(core.box)

    local integrator
    if device() then
        integrator = verlet_nvt_hoover_wrapper.gpu[dimension]
    else
        integrator = verlet_nvt_hoover_wrapper.host[dimension]
    end
    return integrator(particle, box, timestep, temperature, resonance_frequency)
end

--
-- returns module description
--
function name()
    return "Thermostatted velocity-Verlet integrator using a Nosé-Hoover chain"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("timestep", po.float(), "integration timestep")
    desc:add("temperature", po.float(), "thermostat temperature")
    desc:add("resonance-frequency", po.float(), "resonance frequency of heat bath")
-- FIXME reintroduce mass as alternative to resonance_frequency
--    desc:add("mass", po.float_array(), "coupling parameters: `mass' of heat bath variables")
end

--
-- write module parameters to HDF5 group
--
-- @param integrator module instance
-- @param group HDF5 group
--
function write_parameters(integrator, group)
    group:write_attribute("timestep", h5.float(), integrator.timestep)
    group:write_attribute("temperature", h5.float(), integrator.temperature)
    group:write_attribute("resonance_frequency", h5.float(), integrator.resonance_frequency)
    group:write_attribute("mass", h5.float_array(), integrator.mass)
end
