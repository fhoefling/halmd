--
-- Copyright © 2011  Felix Höfling
-- Copyright © 2012  Nicolas Höft
-- Copyright © 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local core              = require("halmd.mdsim.core")
local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local sampler           = require("halmd.observables.sampler")
local writers = {
    file                = require("halmd.io.writers.file")
}

---
-- Velocity Verlet with Nosé-Hoover thermostat
-- ============================================
--
-- This NVT-ensemble integrator implements the :doc:`Verlet algorithm <verlet>` algorithm
-- with Nosé-Hoover chain thermostat with a chain length :math:`M = 2`.
--
-- For reference and detailed description of the algorithm see the original papers by S. Nosé, W.G. Hoover and Martyna et al.:
--
-- - `S. Nosé, J. Chem. Phys. 81, 511 <http://dx.doi.org/10.1063/1.447334>`_ (1984)
--
-- - `W. G. Hoover, Phys. Rev. A 31, 1695 <http://dx.doi.org/10.1063/1.447334>`_ (1985)
--
-- - `J. Martyna et al., J. Chem. Phys. 97, 2635 <http://dx.doi.org/10.1063/1.463940>`_ (1992)
--

-- grab C++ wrappers
local verlet_nvt_hoover = assert(libhalmd.mdsim.integrators.verlet_nvt_hoover)
local h5 = assert(libhalmd.h5)

---
-- Construct velocity-Verlet integrator with Nosé-Hoover chain thermostat.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.force: instance of :mod:`halmd.mdsim.forces`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.timestep: integration time step (defaults to :attr:`halmd.mdsim.clock.timestep`)
-- :param number args.temperature: temperature of heat bath
-- :param number args.resonance_frequency: Coupling rate of the thermostat
-- :param number args.every: Number of time steps between writing of theromostat chain values
--
-- .. method:: set_timestep(timestep)
--
--    Set integration time step in MD units.
--
--    :param number timestep: integration timestep
--
--    This method forwards to :meth:`halmd.mdsim.clock.set_timestep`,
--    to ensure that all integrators use an identical time step.
--
-- .. attribute:: timestep
--
--    Integration time step in MD units.
--
-- .. method:: set_temperature(temperature)
--
--    Set temperature of heat bath.
--
--    :param number temperature: temperature of heat bath
--
-- .. attribute:: temperature
--
--    Temperature of heat bath.
--
-- .. attribute:: resonance_frequency
--
--    Resonance frequency of the Nosé-Hoover thermostat, this is connected to the mass of the thermostat via
--    :math:`m_1 = d T / \Omega^2` and :math:`m_2 = T/\Omega^2`, where :math:`\Omega` is
--    :math:`2\pi\times\textrm{Coupling frequency}` and :math:`d` the dimension.
--
-- .. method:: set_mass(mass)
--
--    Set mass of heat bath.
--
--    :param table mass: Sequence of masses :math:`m_1, m_2` for the heat bath coupling.
--
-- .. attribute:: mass
--
--    Array of masses :math:`m_1, m_2` of heat bath, connected to the coupling strength of the thermostat.
--
-- .. method:: disconnect()
--
--    Disconnect integrator from core and profiler.
--
-- .. method:: connect()
--
--    Connect integrator to core and profiler.
--
--    By default the integrator is connected.
--
-- .. method:: integrate()
--
--    Calculate first half-step.
--
--    By default this function is connected to :meth:`halmd.mdsim.core.on_integrate`.
--
-- .. method:: finalize()
--
--    Calculate second half-step.
--
--    By default this function is connected to :meth:`halmd.mdsim.core.on_finalize`.
--
local M = module(function(args)
    local particle = args.particle
    if not particle then
        error("missing parameter: particle", 2)
    end
    local force = args and args.force
    if not force then
        error("missing argument 'force'", 2)
    end
    local box = args.box
    if not box then
        error("missing parameter: box", 2)
    end
    local timestep = args.timestep
    if timestep then
        clock:set_timestep(timestep)
    else
        timestep = assert(clock.timestep)
    end

    local temperature = args.temperature
    if not temperature then
        error("missing parameter: temperature", 2)
    end
    local resonance_frequency = args.resonance_frequency
    if not resonance_frequency then
        error("missing parameter: resonance_frequency", 2)
    end
    local every = args.every
    if not every then
        error("missing parameter: every", 2)
    end

    local logger = log.logger({label = "verlet_nvt_hoover"})

    local self = verlet_nvt_hoover(particle, box, timestep, temperature, resonance_frequency, logger)

    local set_timestep = assert(self.set_timestep)
    self.set_timestep = function(self, timestep)
        clock:set_timestep(timestep)
    end

    -- sequence of signal connections
    local conn = {}

    self.connect = function(self)
        if #conn == 0 then
            table.insert(conn, assert(clock:on_set_timestep(function(timestep) set_timestep(self, timestep) end)))
            table.insert(conn, assert(core:on_integrate(self.integrate)))
            table.insert(conn, assert(core:on_finalize(self.finalize)))
            table.insert(conn, assert(profiler:on_profile(self.runtime.integrate, "first half-step of velocity-Verlet (+ Nosé-Hoover chain)")))
            table.insert(conn, assert(profiler:on_profile(self.runtime.finalize, "second half-step of velocity-Verlet (+ Nosé-Hoover chain)")))
            table.insert(conn, assert(profiler:on_profile(self.runtime.propagate, "propagate Nosé-Hoover chain")))
            if device.gpu then
                table.insert(conn, assert(profiler:on_profile{self.runtime.rescale, "rescale velocities in Nosé-Hoover thermostat"}))
            end
        else
            error("integrator is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("integrator is already disconnected", 2)
        end
    end

    -- add description for profiler
    self.description = property(function()
        return "Thermostatted velocity-Verlet integrator using a Nosé-Hoover chain"
    end)

    self.writer = function(self, file, args)
        -- connect writer to sampler
        local every = args.every
        if not every then
            error("missing parameter 'every'", 2)
        end

        -- connect chain variables to writers of trajectory file
        local writer = file:writer{location = {"trajectory", "nose_hoover"}, mode = "append"}
        writer:on_write(self.xi, {"position"})
        writer:on_write(self.v_xi, {"velocity"})
        -- connect writer to sampler
        sampler:on_sample(writer.write, every)

        -- connect chain energy to writers of observables file
        writer = file:writer{location = {"observables"}, mode = "append"}
        writer:on_write(self.en_nhc, {"total_energy_nose_hoover_chain"})
        -- connect writer to sampler
        sampler:on_sample(writer.write, every)

        return writer
    end

    -- connect integrator to core
    self:connect()

    return self
end)

return M
