--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
  , core                = require("halmd.mdsim.core")
}

-- grab C++ wrappers
local verlet = assert(libhalmd.mdsim.integrators.verlet)
local h5 = libhalmd.h5

local M = module("halmd.mdsim.integrators.verlet")

--
-- construct verlet module
--
function M.__new(args)
    -- dependency injection
    local particle = assert(args.particle, "missing parameter: particle")
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local clock = mdsim.clock() -- singleton
    local timestep = assert(clock.timestep)
    local logger = log.logger({label = "verlet"})

    local integrator = verlet(particle, box, timestep, logger)

    -- sequence of signal connections
    local conn = {}

    integrator.connect = function(self)
        if #conn == 0 then
            local core = mdsim.core() -- singleton
            table.insert(conn, core:on_integrate(self.integrate))
            table.insert(conn, core:on_finalize(self.finalize))
        else
            error("integrator is already connected", 2)
        end
    end

    integrator.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("integrator is already disconnected", 2)
        end
    end

    -- connect integrator to core
    integrator:connect()

    return integrator
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, integrate = "first half-step of velocity-Verlet"}
    profiler:on_profile{self, finalize = "second half-step of velocity-Verlet"}
end

--
-- returns module description
--
function M.description()
    return "Velocity-Verlet integrator"
end

--
-- write module parameters to HDF5 group
--
-- @param verlet module instance
-- @param group HDF5 group
--
function M.write_parameters(verlet, group)
    group:write_attribute("timestep", h5.float(), verlet.timestep)
end

return M
