--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local clock             = require("halmd.mdsim.clock")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , core                = require("halmd.mdsim.core")
}
local utility = {
    profiler            = require("halmd.utility.profiler")
}

---
-- Velocity Verlet
-- ===============
--
-- This NVE-ensemble integrator implements the velocity-Verlet algorithm in
-- `J. Chem. Phys. 76, 637 <http://dx.doi.org/10.1063/1.442716>`_ (1982).
--
-- The algorithm consists of a first half-step
--
-- .. math::
--
--    \vec{v}\Bigl(t + \frac{\tau}{2}\Bigr) &= \vec{v}\Bigl(t\Bigr) + \frac{\tau}{2} \frac{\vec{F}\left(t\right)}{m}
--    \\
--    \vec{r}\Bigl(t + \tau\Bigr) &= \vec{r}\Bigl(t\Bigr) + \tau \vec{v}\Bigl(t + \frac{\tau}{2}\Bigr)
--
-- and a second half-step
--
-- .. math::
--
--    \vec{v}\Bigl(t + \tau\Bigr) = \vec{v}\Bigl(t + \frac{\tau}{2}\Bigr) + \frac{\tau}{2} \frac{\vec{F}\left(t + \tau\right)}{m}
--
local M = module("halmd.mdsim.integrators.verlet")

-- grab C++ wrappers
local verlet = assert(libhalmd.mdsim.integrators.verlet)

---
-- Construct velocity-Verlet integrator for given system of particles.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param number args.timestep: integration time step (defaults to :attr:`halmd.mdsim.clock.timestep`)
--
-- .. method:: set_timestep
--
--    Set integration time step in MD units.
--
--    This method forwards to :meth:`halmd.mdsim.clock.set_timestep`,
--    to ensure that all integrators use an identical time step.
--
-- .. attribute:: timestep
--
--    Integration time step in MD units.
--
-- .. attribute:: integrate
--
--    Nullary slot to calculate first half-step.
--
--    By default this slot is connected to :meth:`halmd.mdsim.core.on_integrate`.
--
-- .. attribute:: finalize
--
--    Nullary slot to calculate second half-step.
--
--    By default this slot is connected to :meth:`halmd.mdsim.core.on_finalize`.
--
function M.__new(args)
    local particle = args.particle
    if not particle then
        error("missing parameter: particle", 3)
    end
    local timestep = args.timestep
    if timestep then
        clock:set_timestep(timestep)
    else
        timestep = assert(clock.timestep)
    end

    local box = mdsim.box() -- singleton
    local dimension = assert(box.dimension)
    local logger = log.logger({label = "verlet"})

    local self = verlet(particle, box, timestep, logger)

    -- sequence of signal connections
    local conn = {}
    -- capture C++ method set_timestep
    local set_timestep = assert(self.set_timestep)

    self.connect = function(self)
        if #conn == 0 then
            local core = mdsim.core() -- singleton
            table.insert(conn, core:on_integrate(self.integrate))
            table.insert(conn, core:on_finalize(self.finalize))

            table.insert(conn, clock:on_set_timestep(function(timestep)
                set_timestep(self, timestep)
            end))

            local profiler = utility.profiler() -- singleton
            local runtime = assert(self.runtime)
            table.insert(conn, profiler:on_profile(runtime.integrate, "first half-step of velocity-Verlet"))
            table.insert(conn, profiler:on_profile(runtime.finalize, "second half-step of velocity-Verlet"))
        else
            error("integrator is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("integrator is already disconnected", 2)
        end
    end

    -- forward Lua method set_timestep to clock
    self.set_timestep = function(self, timestep)
        clock:set_timestep(timestep)
    end

    -- connect integrator to core
    self:connect()

    return self
end

return M
