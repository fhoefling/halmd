--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.particle")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local verlet_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.integrators.verlet_2_
      , [3] = libhalmd.mdsim.host.integrators.verlet_3_
    }
}
if libhalmd.mdsim.gpu then
    verlet_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.integrators.verlet_2_
      , [3] = libhalmd.mdsim.gpu.integrators.verlet_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.mdsim.integrators.verlet", halmd.modules.register)

--
-- construct verlet module
--
function new(args)
    local timestep = args.timestep or 0.001 -- default value

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton

    local verlet
    if device() then
        verlet = assert(verlet_wrapper.gpu[dimension])
    else
        verlet = assert(verlet_wrapper.host[dimension])
    end
    local integrator = verlet(particle, box, timestep)

    local core = mdsim.core()
    -- connect integrator to core
    core.integrator = integrator

    return integrator
end

--
-- returns module description
--
function name()
    return "Velocity-Verlet integrator"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("timestep", po.float(), "integration timestep")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.timestep = group:read_attribute("timestep", h5.float())
end

--
-- write module parameters to HDF5 group
--
-- @param verlet module instance
-- @param group HDF5 group
--
function write_parameters(verlet, group)
    group:write_attribute("timestep", h5.float(), verlet.timestep)
end
