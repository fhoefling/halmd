--
-- Copyright © 2010  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local module            = require("halmd.utility.module")
local random            = require("halmd.random")
local mdsim = {
    box                 = require("halmd.mdsim.box")
  , clock               = require("halmd.mdsim.clock")
  , core                = require("halmd.mdsim.core")
  , particle            = require("halmd.mdsim.particle")
}

-- grab C++ wrappers
local verlet_nvt_andersen_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.integrators.verlet_nvt_andersen_2_
      , [3] = libhalmd.mdsim.host.integrators.verlet_nvt_andersen_3_
    }
}
if libhalmd.mdsim.gpu then
    verlet_nvt_andersen_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.integrators.verlet_nvt_andersen_2_
      , [3] = libhalmd.mdsim.gpu.integrators.verlet_nvt_andersen_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

local M = module("halmd.mdsim.integrators.verlet_nvt_andersen")

--
-- construct verlet_nvt_andersen module
--
function M.__new(args)
    local temperature = args.temperature or 1.12 -- default value
    local collision_rate = args.collision_rate or 10 -- default value

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton
    local random = assert(random())
    local clock = mdsim.clock() -- singleton
    local timestep = assert(clock.timestep)
    local logger = assert(args.logger)

    local andersen
    if device() then
        andersen = verlet_nvt_andersen_wrapper.gpu[dimension]
    else
        andersen = verlet_nvt_andersen_wrapper.host[dimension]
    end
    local integrator = andersen(particle, box, random, timestep, temperature, collision_rate, logger)

    local core = mdsim.core()
    -- connect integrator to core
    core:on_integrate{integrator.integrate, tracker = integrator}
    core:on_finalize{integrator.finalize, tracker = integrator}

    return integrator
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, integrate = "first half-step of velocity-Verlet"}
    profiler:on_profile{self, finalize = "second half-step of velocity-Verlet (+ Andersen thermostat)"}
end

--
-- returns module description
--
function M.description()
    return "Velocity-Verlet integrator with Andersen thermostat"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("temperature", po.float(), "thermostat temperature")
    desc:add("collision-rate", po.float(), "collision rate for Andersen thermostat")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.temperature = group:read_attribute("temperature", h5.float())
    args.collision_rate = group:read_attribute("collision_rate", h5.float())
end

--
-- write module parameters to HDF5 group
--
-- @param verlet_nvt_andersen module instance
-- @param group HDF5 group
--
function M.write_parameters(andersen, group)
    group:write_attribute("timestep", h5.float(), andersen.timestep)
    group:write_attribute("temperature", h5.float(), andersen.temperature)
    group:write_attribute("collision_rate", h5.float(), andersen.collision_rate)
end

return M
