--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.binning")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.maximum_squared_displacement")
require("halmd.mdsim.particle")
require("halmd.mdsim.sort")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local neighbour_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.neighbour_2_
      , [3] = libhalmd.mdsim.host.neighbour_3_
    }
}
if libhalmd.mdsim.gpu then
    neighbour_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.neighbour_2_
      , [3] = libhalmd.mdsim.gpu.neighbour_3_
    }
end
local predicates = libhalmd.predicates
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local math = math

module("halmd.mdsim.neighbour", halmd.modules.register)

--
-- construct neighbour module
--
-- @param r_cut symmetric matrix with potential cutoff radii
--
function new(args)
    -- cutoff radius matrix of truncated potential
    local r_cut = assert(args.r_cut)
    -- neighbour list skin
    local skin = args.skin or 0.5 -- default value

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton

    -- domain decomposition
    local binning = mdsim.binning{ r_cut = r_cut, skin = skin }

    -- neighbour lists
    local neighbour
    if device() then
        local occupancy = args.occupancy or 0.4 -- default value
        neighbour = neighbour_wrapper.gpu[dimension](particle, box, binning, r_cut, skin, occupancy)
    else
        neighbour = neighbour_wrapper.host[dimension](particle, box, binning, r_cut, skin)
    end

    -- particle sorting
    local sort = mdsim.sort()
    -- maximum squared displacement computation
    local maximum_squared_displacement = mdsim.maximum_squared_displacement()

    -- system preparation after setting positions and velocities
    local core = mdsim.core()
    core:on_append_prepare(sort.order)
    core:on_append_prepare(binning.update)
    core:on_append_prepare(neighbour.update)
    core:on_append_prepare(maximum_squared_displacement.zero)

    -- compare maximum squared displacement to squared half skin size
    local limit = math.pow(neighbour.r_skin / 2, 2)
    local greater = predicates.greater(maximum_squared_displacement.compute, limit)

    -- evaluate maximum squared displacement every step
    core:on_prepend_force(greater.evaluate)

    -- if maximum squared displacement is greater than squared half skin size:
    greater:on_greater(sort.order)
    greater:on_greater(binning.update)
    greater:on_greater(neighbour.update)
    greater:on_greater(maximum_squared_displacement.zero)

    return neighbour
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("skin", po.float(), "neighbour list skin")
    if neighbour_wrapper.gpu then
        desc:add("occupancy", po.float(), "desired average cell occupancy")
    end
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.skin = group:read_attribute("skin", h5.float())
    if neighbour_wrapper.gpu then
        args.occupancy = group:read_attribute("occupancy", h5.float())
    end
end

--
-- write module parameters to HDF5 group
--
-- @param neighbour module instance
-- @param group HDF5 group
--
function write_parameters(neighbour, group)
    group:write_attribute("skin", h5.float(), neighbour.r_skin)
    if neighbour.cell_occupancy then
        group:write_attribute("occupancy", h5.float(), neighbour.cell_occupancy)
    end
end
