--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")

-- grab environment
local neighbour_wrapper = {
    host = {
        [2] = halmd_wrapper.mdsim.host.neighbour_2_
      , [3] = halmd_wrapper.mdsim.host.neighbour_3_
    }
}
if halmd_wrapper.mdsim.gpu then
    neighbour_wrapper.gpu = {
        [2] = halmd_wrapper.mdsim.gpu.neighbour_2_
      , [3] = halmd_wrapper.mdsim.gpu.neighbour_3_
    }
end
local mdsim = {
    core = require("halmd.mdsim.core")
}
local device = require("halmd.device")
local h5 = halmd_wrapper.h5
local po = halmd_wrapper.po
local assert = assert

module("halmd.mdsim.neighbour", halmd.modules.register)

--
-- construct neighbour module
--
function new(args)
    -- dependency injection
    local core = mdsim.core()
    local dimension = assert(core.dimension)
    local particle = assert(core.particle)
    local box = assert(core.box)
    local force = assert(core.force)

    -- neighbour module is only needed if truncated pair force
    local r_cut = force.r_cut
    if not r_cut then
        return nil
    end

    -- command line options
    local skin = args.skin or 0.5 -- default value

    if device() then
        local occupancy = args.occupancy or 0.4 -- default value

        return neighbour_wrapper.gpu[dimension](particle, box, r_cut, skin, occupancy)
    else
        return neighbour_wrapper.host[dimension](particle, box, r_cut, skin)
    end
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("skin", po.float(), "neighbour list skin")
    if neighbour_wrapper.gpu then
        desc:add("occupancy", po.float(), "desired average cell occupancy")
    end
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.skin = group:read_attribute("skin", h5.float())
    if neighbour_wrapper.gpu then
        args.occupancy = group:read_attribute("occupancy", h5.float())
    end
end

--
-- write module parameters to HDF5 group
--
-- @param neighbour module instance
-- @param group HDF5 group
--
function write_parameters(neighbour, group)
    group:write_attribute("skin", h5.float(), neighbour.r_skin)
    if neighbour.cell_occupancy then
        group:write_attribute("occupancy", h5.float(), neighbour.cell_occupancy)
    end
end
