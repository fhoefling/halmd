--
-- Copyright © 2013       Nicolas Höft
-- Copyright © 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")
local numeric           = require("halmd.utility.numeric")
local mdsim = {
    binning             = require("halmd.mdsim.binning")
  , max_displacement    = require("halmd.mdsim.max_displacement")
  , sort                = require("halmd.mdsim.sorts.hilbert")
}

-- grab C++ wrappers
local neighbours = {
    from_binning  = assert(libhalmd.mdsim.neighbours.from_binning)
  , from_particle = assert(libhalmd.mdsim.neighbours.from_particle)
}

local defaults
if device.gpu then
    defaults = {
        [2] = assert(libhalmd.mdsim.defaults_2)
      , [3] = assert(libhalmd.mdsim.defaults_3)
    }
end

--
-- returns species label given a table of particle instances
--
local function label(particles)
    assert(#particles == 2)
    return "(" .. particles[1].label .. " ← " .. particles[2].label .. ")"
end


---
-- Neighbour List
-- ==============
--
-- This module provides the implementation for a Verlet neighbour list. It
-- stores the neighbours for each particle that are within a certain radius to
-- reduce the computational cost for the force calculation in each time step.
--
-- Due to its nature it can only work with finite interaction potentials.
--

---
-- Construct neighbour module.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param table args.r_cut: matrix with elements :math:`r_{\text{c}, ij}`
-- :param number args.skin: neighbour list skin *(default: 0.5)*
-- :param number args.occupancy: Desired cell occupancy. Defaults to
--   :class:`halmd.mdsim.defaults.occupancy()` *(GPU variant only)*
-- :param boolean args.disable_binning: Disable use of binning module and
--   construct neighbour lists from particle positions directly (*default:
--   false*).
-- :param boolean args.disable_sorting: Disable use of Hilbert sorting
--   :class:`halmd.mdsim.sorts.hilbert` (*default: false*).
-- :param args.displacement: instance of :mod:`halmd.mdsim.max_displacement` *(optional)*
--
-- If all elements in ``r_cut`` matrix are equal, a scalar value may be passed instead.
--
-- If ``displacement`` is left unspecified, a default displacement module of
-- :mod:`halmd.mdsim.max_displacement` is constructed. Providing an instance of
-- this module allows the reuse of the displacement module (e.g. when different
-- neighbour lists share the first instance of ``particle``).
--
-- .. attribute:: particle
--
--    Sequence of the two instances of :class:`halmd.mdsim.particle`.
--
-- .. attribute:: displacement
--
--    Instance of :class:`halmd.mdsim.max_displacement`.
--
-- .. attribute:: cell_occupancy
--
--    Current cell occupancy. *Only available on GPU variant.*
--
-- .. attribute:: r_skin
--
--    "Skin" of the particle. This is an additional distance ratio added to the cutoff
--    radius. Particles within this extended sphere are stored as neighbours.
--
-- .. method:: disconnect()
--
--    Disconnect neighbour module from core and profiler.
--
local M = module(function(args)
    -- cutoff radius matrix of truncated potential
    local r_cut = utility.assert_kwarg(args, "r_cut")
    if type(r_cut) ~= "table" and type(r_cut) ~= "number" then
        error("bad argument 'r_cut'", 2)
    end
    -- promote scalar to matrix
    if type(r_cut) == "number" then
        r_cut = numeric.scalar_matrix(1, 1, r_cut)
    end
    -- neighbour list skin
    local skin = args.skin or 0.5 -- default value

    -- dependency injection
    local particle = utility.assert_kwarg(args, "particle")
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end

    local memory = particle[1].memory
    if memory ~= particle[2].memory then
        error("incompatible 'memory' attributes of particle instances", 2)
    end

    local box = utility.assert_kwarg(args, "box")
    local dimension = #box:edges()
    local logger = log.logger({label = "neighbour " .. label(particle)})
    local occupancy = args.occupancy -- may be nil

    -- domain decomposition
    local binning
    if not args.disable_binning then
        -- FIXME disabling binning not working
        binning = mdsim.binning({box = box, particle = particle[2], r_cut = r_cut, skin = skin, occupancy = occupancy})
    end

    local self

    -- neighbour lists
    local displacement = args.displacement or mdsim.max_displacement{box = box, particle = particle[1]}
    if memory == "gpu" then
        if binning then
            occupancy = occupancy or assert(defaults[dimension].from_binning.occupancy)()
            self = neighbours.from_binning(particle, {binning, binning}, displacement, box, r_cut, skin, logger, occupancy)
        else
            occupancy = occupancy or assert(defaults[dimension].from_particle.occupancy)()
            self = neighbours.from_particle(particle, displacement, box, r_cut, skin, logger, occupancy)
        end
    else
        if binning then
            self = neighbours.from_binning(particle, {binning, binning}, displacement, box, r_cut, skin, logger)
        else
            self = neighbours.from_particle(particle, displacement, box, r_cut, skin, logger)
        end
    end

    -- store particle instances as Lua property
    self.particle = property(function(self) return particle end)

    -- store displacement instance as Lua property
    self.displacement = property(function(self) return displacement end)

    -- sort particles before neighbour list update
    if not args.disable_sorting then
        local sort = mdsim.sort{box = box, particle = particle[1], binning = binning}
        self:on_prepend_update(sort.order)
    end

    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "neighbour list module")

    -- connect neighbour module to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, assert(profiler:on_profile(runtime.update, "update of neighbour lists " .. label(self.particle))))

    return self
end)

return M
