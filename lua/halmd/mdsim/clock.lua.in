--
-- Copyright Â© 2011-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

-- grab C++ wrappers
local clock = assert(libhalmd.mdsim.clock)

---
-- Clock
-- =====
--
-- The clock tracks simulation step and time, and defines the integration time step.
--
-- Example::
--
--    local clock = require("halmd.mdsim.clock")
--    clock.on_set_timestep(function(timestep)
--        print(("time step has changed to %g"):format(timestep))
--    end)
--
-- .. attribute:: step
--
--    Current simulation step.
--
-- .. attribute:: time
--
--    Current simulation time in MD units.
--
-- .. attribute:: timestep
--
--    Integration time step in MD units.
--
-- .. method:: advance()
--
--    Manually advance the clock by one step. The method should be used with
--    care by experienced users only.
--
-- .. method:: set_timestep(timestep)
--
--    Define integration time step.
--
--    The value of the time step is propagated to all integrators.
--
-- .. method:: on_set_timestep(slot)
--
--    Connect a unary slot that accepts the integration time step.
--
--    This slot is called after setting the time step with :meth:`set_timestep`.
--

-- construct singleton instance
return clock()
