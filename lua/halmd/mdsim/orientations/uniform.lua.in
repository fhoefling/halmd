--
-- Copyright © 2016  Manuel Dibak
-- Copyright © 2010  Felix Höfling
-- Copyright © 2013  Nicolas Höft
-- Copyright © 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")
local random            = require("halmd.random")
local profiler          = require("halmd.utility.profiler")

-- grab C++ wrappers
local uniform = assert(libhalmd.mdsim.orientations.uniform)


---
-- Uniform
-- =======
--

---
-- Construct Lattice module
--
-- :param table args: keyword arguments
-- :param args.particle: Instance of :class:`halmd.mdsim.particle`.
--
-- .. method:: set()
--
--    Set all particle orientations uniformly in one direction.
--
-- .. method:: disconnect()
--
--    Disconnect module from profiler.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")

    -- construct module logger
    local logger = log.logger({label = "orientation"})

    local rng = random.generator({memory = particle.memory})

    local self = uniform(particle, rng)
    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "uniform module")

    -- connect to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, profiler:on_profile(runtime.set, "setting particle orientation uniformly"))

    return self
end)

return M
