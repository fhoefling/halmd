--
-- Copyright © 2010-2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local observables = {
    sampler             = require("halmd.observables.sampler"),
}

-- grab C++ wrappers
local box_wrapper = {
    [2] = libhalmd.mdsim.box_2_
  , [3] = libhalmd.mdsim.box_3_
}
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local error = error

---
-- Box
-- ===
--
-- The box module keeps the edge lengths of the simulation box, and
-- implements periodic boundary conditions for use in other modules.
-- At present the module supports cuboid box geometries.
--
-- Example::
--
--    local box = halmd.mdsim.box({length = {100, 100, 10}) -- singleton
--
local M = module.singleton("halmd.mdsim.box")

---
-- Construct box.
--
-- :param table args: keyword arguments
-- :param table length: sequence of edge lengths, according to dimensionality
-- :returns: instance of box
--
-- ``box`` is a singleton, i.e. the first call to :class:`halmd.mdsim.box`
-- creates an instance of ``box``, and subsequent calls return this instance.
--
-- .. method:: writer(file)
--
--    Write box specification to file.
--
--    http://nongnu.org/h5md/draft.html#box-specification
--
--    :param file: instance of file writer
--    :returns: instance of group writer
--
--    Note that the box specification will not be written immediately,
--    but upon the start of the simulation. The writer is connected
--    to the on_start signal of sampler.
--
-- .. attribute:: dimension
--
--    Dimensionality of system.
--
-- .. attribute:: length
--
--    Edge lengths as a sequence.
--
-- .. attribute:: origin
--
--    Callable data slot for use with a writer.
--    The slot returns the box origin.
--
-- .. attribute:: edges
--
--    Callable data slot for use with a writer.
--    The slot returns the edge lengths as a matrix.
--
function M.__new(args)
    local particles = assert(args.particles, "missing parameter: particles")
    local density = args.density or 0.75 -- default value
    local ratios = args.ratios or {}
    local length = args.length -- optional

    -- determine coordinates dimension and total number of particles
    local dimension
    local nbox = 0
    for i = 1, #particles do
        local d = assert(particles[i].dimension)
        local n = assert(particles[i].nbox)
        dimension = dimension or d
        if dimension ~= d then
            error("mismatching particle dimensions: " .. dimension .. " ≠ " .. d)
        end
        nbox = nbox + n
    end
    assert(nbox > 0, "box does not contain any particles")

    local box = assert(box_wrapper[dimension], "invalid box dimension")
    local self
    if length then
        -- complete missing values by repeating the last entry
        for i = #length + 1, dimension do
            length[i] = length[#length]
        end
        self = box(nbox, length)
    else
        -- fill up missing values with 1
        for i = #ratios + 1, dimension do
            ratios[i] = 1 -- `neutral' aspect ratio
        end
        self = box(nbox, density, ratios)
    end

    self.writer = function(self, file)
        local writer = file:writer({location = {"observables", "box"}, mode = "truncate"})
        local group = assert(writer.group)
        group:write_attribute("type", h5.string(), "cuboid")
        writer:on_write(self.edges, {"edges"})
        writer:on_write(self.origin, {"offset"})
        local sampler = observables.sampler() -- singleton
        sampler:on_start(writer.write)
        return writer
    end

    return self
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("dimension", po.uint():notifier(function(value)

        if not box_wrapper[value] then
            error(("invalid dimension '%d'"):format(value), 0)
        end

    end), "dimension of positional coordinates")
    desc:add("length", po.float_array():conflicts("density"), "edge lengths of simulation box")
    desc:add("density", po.float(), "particle density")
    desc:add("ratios", po.float_array():conflicts("length"), "relative aspect ratios of simulation box")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.dimension = group:read_attribute("dimension", h5.uint())
    -- upon continuation from a phase space sample, the box is set up from
    -- the absolute edge lengths and the particle number (which is read by
    -- the particle module). The presence of 'length' supersedes the options
    -- 'density' and 'ratios' (see function 'new').
    args.length = group:read_attribute("length", h5.float_array())
end

--
-- write module parameters to HDF5 group
--
-- @param box module instance
-- @param group HDF5 group
--
function M.write_parameters(box, group)
    group:write_attribute("dimension", h5.uint(), box.dimension)
    group:write_attribute("length", h5.float_array(), box.length)
    group:write_attribute("density", h5.float(), box.density)
end

return M
