--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local mdsim = {
    particle            = require("halmd.mdsim.particle")
}

-- grab C++ wrappers
local box_wrapper = {
    [2] = libhalmd.mdsim.box_2_
  , [3] = libhalmd.mdsim.box_3_
}
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local error = error

local M = module.singleton("halmd.mdsim.box")

--
-- construct box module instance
--
-- @param args parameter table
-- @returns box module instance
--
function M.__new(args)
    local dimension = args.dimension or 3 -- default value
    local density = args.density or 0.75 -- default value
    local ratios = args.ratios or {}
    local length = args.length -- optional

    local particle = mdsim.particle{dimension = dimension}
    -- total number of particles in box
    local nbox = assert(particle.nbox)

    local box = assert(box_wrapper[dimension])
    if length then
        -- complete missing values by repeating the last entry
        for i = #length + 1, dimension do
            length[i] = length[#length]
        end
        return box(nbox, length)
    else
        -- fill up missing values with 1
        for i = #ratios + 1, dimension do
            ratios[i] = 1 -- `neutral' aspect ratio
        end
        return box(nbox, density, ratios)
    end
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("dimension", po.uint():notifier(function(value)

        if not box_wrapper[value] then
            error(("invalid dimension '%d'"):format(value), 0)
        end

    end), "dimension of positional coordinates")
    desc:add("length", po.float_array():conflicts("density"), "edge lengths of simulation box")
    desc:add("density", po.float(), "particle density")
    desc:add("ratios", po.float_array():conflicts("length"), "relative aspect ratios of simulation box")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.dimension = group:read_attribute("dimension", h5.uint())
    -- upon continuation from a phase space sample, the box is set up from
    -- the absolute edge lengths and the particle number (which is read by
    -- the particle module). The presence of 'length' supersedes the options
    -- 'density' and 'ratios' (see function 'new').
    args.length = group:read_attribute("length", h5.float_array())
end

--
-- write module parameters to HDF5 group
--
-- @param box module instance
-- @param group HDF5 group
--
function M.write_parameters(box, group)
    group:write_attribute("dimension", h5.uint(), box.dimension)
    group:write_attribute("length", h5.float_array(), box.length)
    group:write_attribute("density", h5.float(), box.density)
end

return M
