--
-- Copyright Â© 2010-2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local sampler           = require("halmd.observables.sampler")

-- grab C++ wrappers
local box = {
    [2] = assert(libhalmd.mdsim.box_2)
  , [3] = assert(libhalmd.mdsim.box_3)
}
local h5 = assert(libhalmd.h5)

---
-- Box
-- ===
--
-- The box module keeps the edge lengths of the simulation box, and
-- implements periodic boundary conditions for use in other modules.
-- At present the module supports cuboid box geometries.
--
-- Example::
--
--    local box = halmd.mdsim.box({length = {100, 100, 10})
--

---
-- Construct box.
--
-- :param table args: keyword arguments
-- :param table args.length: sequence of edge lengths, according to dimensionality
-- :returns: instance of box
--
-- .. method:: writer(self, file)
--
--    Write box specification to file.
--
--    http://nongnu.org/h5md/draft.html#box-specification
--
--    :param file: instance of file writer
--    :returns: instance of group writer
--
--    Note that the box specification will not be written immediately,
--    but upon the start of the simulation. The writer is connected
--    to the on_start signal of sampler.
--
-- .. attribute:: dimension
--
--    Dimensionality of system.
--
-- .. attribute:: length
--
--    Edge lengths as a sequence.
--
-- .. method:: origin()
--
--    Returns the box origin.
--
-- .. method:: edges()
--
--    Returns the edge lengths as a matrix.
--
local M = module(function(args)
    local length = args and args.length
    if not length then
        error("missing parameter: length", 2)
    end
    local dimension = #length
    local box = box[dimension]
    if not box then
        error(("invalid box dimension: %s"):format(dimension), 2)
    end

    local self = box(length)

    self.writer = function(self, file)
        local writer = file:writer({location = {"observables", "box"}, mode = "truncate"})
        local group = assert(writer.group)
        group:write_attribute("type", h5.string(), "cuboid")
        writer:on_write(self.edges, {"edges"})
        writer:on_write(self.origin, {"offset"})
        sampler:on_start(writer.write)
        return writer
    end

    return self
end)

---
-- Read edge lengths of simulation domain from H5MD file.
--
-- http://nongnu.org/h5md/draft.html#box-specification
--
-- :param file: instance of :class:`halmd.io.readers.h5md`
-- :returns: edge lengths
--
function M.reader(file)
    if not file then
        error("bad argument 'file'", 2)
    end
    local self = file:reader({location = {"observables", "box"}, mode = "truncate"})
    local group = assert(self.group)
    local geometry = group:read_attribute("type", h5.string())
    if geometry ~= "cuboid" then
        error(("unsupported geometry: %s"):format(geometry), 2)
    end
    local dataset = self.group:open_dataset("edges")
    local shape = assert(dataset.shape)
    local dimension = assert(shape[1])
    local box = box[dimension]
    if not box then
        error(("unsupported dimension: %d"):format(dimension), 2)
    end
    local edges, length = box.edges_to_length()
    self:on_read(edges, {"edges"})
    self:read()
    return length()
end

return M
