--
-- Copyright © 2013      Felix Höfling
-- Copyright © 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local utility = require("halmd.utility")
local module  = require("halmd.utility.module")
local numeric = require("halmd.utility.numeric")
local sampler = require("halmd.observables.sampler")

-- grab C++ wrappers
local box = {
    [2] = assert(libhalmd.mdsim.box_2)
  , [3] = assert(libhalmd.mdsim.box_3)
}
local h5 = assert(libhalmd.h5)

---
-- Box
-- ===
--
-- The box module keeps the edge lengths of the simulation box, and
-- implements periodic boundary conditions for use in other modules.
-- At present the module supports cuboid box geometries.
--
-- Example::
--
--    local box = halmd.mdsim.box({length = {100, 100, 10})
--

---
-- Construct box.
--
-- :param table args: keyword arguments
-- :param table args.edges: sequence of edge vectors (parallelepiped)
-- :param table args.length: sequence of edge lengths (cuboid)
-- :returns: instance of box
--
-- .. warning::
--
--    Non-cuboid geometries are not implemented, ``edges`` must be a diagonal matrix.
--
-- .. attribute:: dimension
--
--    Space dimension of the simulation box as a number.
--
-- .. attribute:: length
--
--    Edge lengths as a sequence.
--
-- .. attribute:: volume
--
--    Box volume.
--
-- .. method:: edges()
--
--    Returns the edge vectors as a matrix.
--
--    For a cuboid simulation domain, ``edges`` is equal to ::
--
--       {{length[1], 0, 0},
--        {0, length[2], 0},
--        {0, 0, length[3]}}
--
-- .. method:: origin()
--
--    Returns the coordinates of the lowest corner of the box.
--
-- .. method:: writer(args)
--
--    Write box specification to file.
--
--    http://nongnu.org/h5md/draft.html#box-specification
--
--    :param table args: keyword arguments
--    :param args.writer: instance of group writer (optional)
--    :param args.file: instance of H5MD file (optional)
--    :param args.location: location within file (optional)
--    :type args.location: string table
--
--    :returns: instance of group writer
--
--    If the argument ``writer`` is present, a box varying in time is assumed
--    and the box data are written as a time series upon every invocation of
--    writer:write(). Sharing the same writer instance enables hard-linking of
--    the datasets ``step`` and ``time``.
--
--    Otherwise, a ``file`` instance along with a ``location`` must be given.
--    The current box information is immediately written to the subgroup
--    ``"box"`` as time-independent data.
--
--    The argument ``location`` specifies a path in a structured file format
--    like H5MD given as a table of strings, the group name ``"box"`` is
--    appended.
--
local M = module(function(args)
    local edges = args and args.edges
    if not edges then
        local length = utility.assert_type(utility.assert_kwarg(args, "length"), "table")
        -- construct edge vectors from edge lengths of a cuboid domain
        local dimension = #length
        edges = numeric.scalar_matrix(dimension, dimension, 0)
        for i = 1, dimension do
            edges[i][i] = length[i]
        end
    end
    utility.assert_type(edges, "table")

    local dimension = #edges
    local box = box[dimension]
    if not box then
        error(("invalid box dimension: %s"):format(dimension), 2)
    end

    -- construct box from edge vectors
    local box = box(edges)

    -- store space dimension
    box.dimension = property(function(self) return dimension end)

    box.writer = function(self, args)
        local writer = args and args.writer
        local write_once = false;
        if not writer then
            -- assume that the box is fixed in time and construct suitable writer
            local file = utility.assert_kwarg(args, "file")
            local location = utility.assert_type(utility.assert_kwarg(args, "location"), "table")

            -- TODO hard-link static box groups at different locations
            writer = file:writer({location = location, mode = "truncate"})
            write_once = true;
        end

        -- create box group
        local group = assert(writer.group):open_group("box")
        group:write_attribute("dimension", h5.int(), dimension)

        -- store boundary condition
        local boundary = {}
        for i = 1, dimension do
            boundary[i] = "periodic"
        end
        group:write_attribute("boundary", h5.string(), boundary[1])
--        FIXME support string arrays in h5xx
--        assert(writer.group):open_group("box"):write_attribute("boundary", h5.string_array(), boundary)

        -- register edges and origin for writing
        writer:on_write(self.edges, {"box", "edges"})
        writer:on_write(self.origin, {"box", "offset"})

        if write_once then
            writer:write()
        end

        return writer
    end

    return box
end)

---
-- Read edge vectors of simulation domain from H5MD file.
--
-- http://nongnu.org/h5md/draft.html#box-specification
--
-- :param file: instance of :class:`halmd.io.readers.h5md`
-- :returns: edge vectors
--
-- The return value may be used to restore the domain::
--
--    local file = readers.h5md({path = args.trajectory})
--    local edges = mdsim.box.reader({file = file})
--    local box = mdsim.box({edges = edges})
--
function M.reader(args)
    local file = utility.assert_kwarg(args, "file")
    local location = utility.assert_type(
        args.location or {"observables", "box"}
      , "table")

    local self = file:reader({location = location, mode = "truncate"}) -- FIXME mode depends on data present
    local group = assert(self.group)
    local boundary = group:read_attribute("boundary", h5.string())
    local dataset = self.group:open_dataset("edges")
    local shape = assert(dataset.shape)
    local dimension = assert(shape[1])
    local box = box[dimension]
    if not box then
        error(("unsupported dimension: %d"):format(dimension), 2)
    end
    local m = { edges = box.make_edges() }
    self:on_read(m.edges, {"edges"})
    self:read()
    return m:edges()
end

return M
