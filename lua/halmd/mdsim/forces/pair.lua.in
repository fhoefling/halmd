--
-- Copyright Â© 2016 Daniel Kirchner
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local utility       = require("halmd.utility")
local module        = require("halmd.utility.module")
local pair_full     = require("halmd.mdsim.forces.pair_full")
local pair_trunc    = require("halmd.mdsim.forces.pair_trunc")

---
-- Pair Force
-- ====================
--
--

---
-- Construct pair force.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :mod:`halmd.mdsim.box`
-- :param args.potential: instance of :mod:`halmd.mdsim.potentials`
-- :param args.neighbour: instance of :mod:`halmd.mdsim.neighbour` or a table of keyword arguments (optional)
-- :param number args.weight: weight of the auxiliary variables *(default: 1)*
--
-- The module computes the potential forces excerted by the particles
-- of the second `particle` instance on those of the first one. The two
-- instances agree if only a single instance is passed. Recomputation is
-- triggered by the signals `on_force` and `on_prepend_force` of
-- `args.particle[1]`.
--
-- The argument ``weight`` determines the fraction of the potential energy and the stress
-- tensor that that is added to by the interaction of this force module. A value of `1`
-- is defined as adding the full potential energy and stress tensor of each interaction.
-- This is especially useful when considering pair forces where the particle instances (`A`
-- and `B`) are distinct and only `AB` but not `BA` interaction is calculated.
--
-- .. note::
--
--   If two different instances of :class:`halmd.mdsim.particle` are passed,
--   Newton's 3rd law is not obeyed. To restore such a behaviour, the module
--   must be constructed a second time with the order of particle instances
--   reversed.
--
-- The argument ``neighbour`` is only relevant for truncated potentials. See
-- the description of the :mod:`truncated pair force <halmd.mdsim.forces.pair_trunc>`
-- module for details.
--
-- .. attribute:: potential
--
--    Instance of :mod:`halmd.mdsim.potentials`.
--
-- .. method:: disconnect()
--
--    Disconnect force from profiler.
--
--    .. warning::
--
--       Currently this does not disconnect particle sorting, binning and neighbour lists.
--
local M = module(function(args)
    local potential = utility.assert_kwarg(args, "potential")
    if potential.r_cut then
        return pair_trunc(args)
    else
        return pair_full(args)
    end
end)

return M
