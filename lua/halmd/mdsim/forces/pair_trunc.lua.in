--
-- Copyright © 2010-2014 Felix Höfling
-- Copyright © 2016      Sutapa Roy
-- Copyright © 2013      Nicolas Höft
-- Copyright © 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local mdsim    = require("halmd.mdsim")
local device   = require("halmd.utility.device")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")
local utility  = require("halmd.utility")

---
-- Truncated Pair Force
-- ====================
--
--

-- grab C++ wrappers
local pair_trunc = assert(libhalmd.mdsim.forces.pair_trunc)

---
-- Construct truncated pair force.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :mod:`halmd.mdsim.box`
-- :param args.potential: instance of :mod:`halmd.mdsim.potentials`
-- :param args.neighbour: instance of :mod:`halmd.mdsim.neighbour` or a table of keyword arguments (optional)
-- :param number args.weight: weight of the auxiliary variables *(default: 1)*
--
-- The module computes the truncated potential forces excerted by the particles
-- of the second `particle` instance on those of the first one. The two
-- instances agree if only a single instance is passed. Recomputation is
-- triggered by the signals `on_force` and `on_prepend_force` of
-- `args.particle[1]`.
--
-- The argument ``weight`` determines the fraction of the potential energy and
-- the stress tensor that is added to by the interaction of this force module.
-- A value of `1` is defined as adding the full potential energy and stress
-- tensor of each interaction.  This is especially useful when considering pair
-- forces where the particle instances (`A` and `B`) are distinct and only `AB`
-- but not `BA` interaction is calculated.
--
-- .. note::
--
--   If two different instances of :class:`halmd.mdsim.particle` are passed,
--   Newton's 3rd law is not obeyed. To restore such a behaviour, the module
--   must be constructed a second time with the order of particle instances
--   reversed. In this situation, `weight` needs to be set to `0.5`.
--
-- If ``neighbour`` is left unspecified, a default neighbour list module is
-- constructed using the default parameters of :mod:`halmd.mdsim.neighbour`. If
-- a different value for, e.g., the ``skin`` parameter is needed, either
-- the neighbour list module has to be provided explicitly or a keyword table
-- with the non-default arguments is passed, which is forwarded to the
-- default-constructed neighbour list module. For example:
--
-- .. code-block:: lua
--
--     mdsim.forces.pair({
--         box = [...], particle = [...], potential = [...]
--       , neighbour = {skin = 0.7}     -- override default skin width
--    })
--
-- .. attribute:: potential
--
--    Instance of :mod:`halmd.mdsim.potentials`.
--
-- .. method:: disconnect()
--
--    Disconnect force from profiler.
--
--    .. warning::
--
--       Currently this does not disconnect particle sorting, binning and neighbour lists.
--
-- .. method:: on_prepend_apply(slot)
--
--    Connect nullary slot function to signal. The signal is emitted before the
--    force computation.
--
--    :returns: signal connection
--
-- .. method:: on_append_apply(slot)
--
--    Connect nullary slot function to signal. The signal is emitted after the
--    force computation.
--
--    :returns: signal connection
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end
    local box = utility.assert_kwarg(args, "box")
    local weight = utility.assert_type(args.weight or 1, "number")
    local potential = utility.assert_kwarg(args, "potential")

    if particle[1].memory ~= particle[2].memory then
        error("mismatch of memory locations of 'particle' instances", 2)
    end
    if particle[1].memory ~= potential.memory then
        error("mismatch of memory locations of 'particle' and 'potential'", 2)
    end

    local logger = assert(potential.logger)

    -- If no instance of a neighbour list was passed, create a default one. In
    -- this case, a user-supplied table with keyword arguments is passed on to
    -- the neighbour list constructor.
    local neighbour = args.neighbour or {}
    if type(neighbour) == "table" then
        -- construct argument list
        local args = neighbour
        args.box = box
        args.particle = particle
        -- determine the cutoff radii from the potential
        args.r_cut = assert(potential.r_cut)
        neighbour = mdsim.neighbour(args)
    end

    -- construct force module
    local self = pair_trunc(potential, particle[1], particle[2], box, neighbour, weight, logger)

    -- attach potential instance as read-only Lua property
    self.potential = property(function(self)
        return potential
    end)

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "force module")

    -- test if the cache is up-to-date
    table.insert(conn, particle[1]:on_prepend_force(function() self:check_cache() end))
    -- apply the force (if necessary)
    table.insert(conn, particle[1]:on_force(function() self:apply() end))

    -- connect to profiler
    local desc = ("computation of %s"):format(potential.description)
    table.insert(conn, profiler:on_profile(assert(self.runtime).compute, desc))
    table.insert(conn, profiler:on_profile(assert(self.runtime).compute_aux, desc .. " and auxiliary variables"))

    return self
end)

return M
