--
-- Copyright © 2010  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.mdsim.box")
require("halmd.mdsim.core")
require("halmd.mdsim.neighbour")
require("halmd.mdsim.particle")
require("halmd.modules")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local pair_trunc_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.forces.pair_trunc_2_
      , [3] = libhalmd.mdsim.host.forces.pair_trunc_3_
    }
}
if libhalmd.mdsim.gpu then
    pair_trunc_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.forces.pair_trunc_2_
      , [3] = libhalmd.mdsim.gpu.forces.pair_trunc_3_
    }
end
-- grab standard library
local assert = assert

module("halmd.mdsim.forces.pair_trunc", halmd.modules.register)

--
-- construct truncated pair force module
--
-- @param args.force potential name
-- @param args.potential potential module instance
--
function new(args)
    local force = assert(args.force)
    local potential = assert(args.potential)

    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local box = mdsim.box() -- singleton

    -- create neighbour lists with cutoff radii of potential
    local neighbour = mdsim.neighbour{ r_cut = potential.r_cut }

    local pair_trunc
    if device() then
        pair_trunc = assert(pair_trunc_wrapper.gpu[dimension][force])
    else
        pair_trunc = assert(pair_trunc_wrapper.host[dimension][force])
    end
    local force = pair_trunc(potential, particle, box)

    local core = mdsim.core()
    -- connect force to core
    core.force = force

    return force
end
