--
-- Copyright © 2010-2011 Felix Höfling
-- Copyright © 2013      Nicolas Höft
-- Copyright © 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local neighbour         = require("halmd.mdsim.neighbour")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")
local utility           = require("halmd.utility")

---
-- Truncated Pair Force
-- ====================
--
--

-- grab C++ wrappers
local pair_trunc = assert(libhalmd.mdsim.forces.pair_trunc)
local discontinuous = assert(libhalmd.mdsim.forces.trunc.discontinuous)

---
-- Construct truncated pair force.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :mod:`halmd.mdsim.box`
-- :param args.potential: instance of :mod:`halmd.mdsim.potentials`
-- :param args.trunc: instance of :mod:`halmd.mdsim.forces.trunc` (optional)
-- :param args.neighbour: instance of :mod:`halmd.mdsim.neighbour` (optional)
--
-- If ``trunc`` is not specified, the pair potential is :math:`C^0` continuous at the cutoff.
--
-- If ``neighbour`` is left unspecified, a default neighbour list module is
-- constructed using the default parameters of :mod:`halmd.mdsim.neighbour`. If
-- if a different value for, e.g., the ``occupancy`` parameter is needed, the
-- neighbour list module has to be provided explicitly.
--
-- .. attribute:: potential
--
--    Instance of :mod:`halmd.mdsim.potentials`.
--
-- .. method:: get_net_force()
--
--    Returns unordered sequence with particle forces.
--
-- .. method:: get_en_pot()
--
--    Returns unordered sequence with potential energies.
--
-- .. method:: get_stress_pot()
--
--    Returns unordered sequence with potential parts of stress tensors.
--
-- .. method:: get_hypervirial()
--
--    Returns unordered sequence with hypervirials.
--
-- .. method:: disconnect()
--
--    Disconnect force from profiler.
--
--    .. warning::
--
--       Currently this does not disconnect particle sorting, binning and neighbour lists.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end
    local box = utility.assert_kwarg(args, "box")
    local potential = utility.assert_kwarg(args, "potential")

    local logger = assert(potential.logger)
    local trunc = args.trunc
    if trunc then
        -- log parameters if smoothing function was specified
        trunc:log(logger)
    else
        -- otherwise default to empty function
        trunc = discontinuous()
    end

    -- create neighbour lists with cutoff radii of potential
    local r_cut = assert(potential.r_cut)
    local neighbour = args.neighbour or neighbour({box = box, particle = particle, r_cut = r_cut})

    -- construct force module
    local self = pair_trunc(potential, particle[1], particle[2], box, neighbour, trunc, logger)

    -- attach potential instance as read-only Lua property
    self.potential = property(function(self)
        return potential
    end)

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "force module")

    -- connect to profiler
    local desc = ("computation of %s interaction"):format(potential.description)
    table.insert(conn, assert(profiler:on_profile(assert(self.runtime).compute, desc)))

    return self
end)

return M
