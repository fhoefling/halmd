--
-- Copyright © 2010  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local integrators       = require("halmd.mdsim.integrators")

-- grab C++ wrappers
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local pairs = pairs

local M = module("halmd.mdsim.integrator")

--
-- construct integrator module
--
function M.__new(args)
    local particle = assert(args.particle, "missing parameter: particle")
    local integrator = args.integrator or "verlet" --default value
    return integrators[integrator]{particle = particle}
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc, globals)

    -- integrator module choices with descriptions
    local choices = {
        euler                   = integrators.euler.description()
      , verlet                  = integrators.verlet.description()
      , verlet_nvt_andersen     = integrators.verlet_nvt_andersen.description()
      , verlet_nvt_hoover       = integrators.verlet_nvt_hoover.description()
    }

    globals:add("integrator", po.string():choices(choices), "select integration module")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group, globals)
    args.integrator = globals:read_attribute("integrator", h5.string())
end

--
-- write module parameters to HDF5 group
--
-- @param integrator module instance
-- @param group HDF5 group
--
function M.write_parameters(integrator, group, globals)
    globals:write_attribute("integrator", h5.string(), integrator.module.namespace)
end

return M
