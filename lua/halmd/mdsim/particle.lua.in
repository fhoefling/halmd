--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")

---
-- Particle
-- ========
--

-- grab C++ wrappers
local particle
if device.gpu then
    particle = {
        [2] = assert(libhalmd.mdsim.gpu.particle_2)
      , [3] = assert(libhalmd.mdsim.gpu.particle_3)
    }
else
    particle = {
        [2] = assert(libhalmd.mdsim.host.particle_2)
      , [3] = assert(libhalmd.mdsim.host.particle_3)
    }
end

---
-- Construct particle instance.
--
-- :param table args: keyword arguments
-- :param number args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.particles: number of particles
-- :param number args.species: number of species
-- :param string args.label: instance label (defaults to ``all``)
--
-- .. attribute:: nparticle
--
--    Number of particles.
--
-- .. attribute:: nspecies
--
--    Number of particle species.
--
-- .. attribute:: label
--
--    Instance label.
--
local M = module(function(args)
    local box = args.box
    if not box then
        error("missing argument: box", 2)
    end
    local nparticle = args.particles
    if not nparticle then
        error("missing argument: particles", 2)
    end
    local nspecies = args.species
    if not nspecies then
        error("missing argument: species", 2)
    end
    local label = args.label or "all"

    -- select particle class
    local dimension = assert(box.dimension)
    local particle = assert(particle[dimension])

    -- construct particle instance
    local self = particle(nparticle, nspecies)

    -- store particle label as Lua property
    self.label = property(function(self)
        return label
    end)

    -- sequence of signal connections
    local conn = {}

    self.connect = function(self)
        if #conn == 0 then
            table.insert(conn, core:on_prepend_setup(self.prepare))
            table.insert(conn, core:on_prepend_force(self.prepare))

            local runtime = assert(self.runtime)
            table.insert(conn, profiler:on_profile(runtime.rearrange, "rearrange particles by permutation"))
        else
            error("particle is already connected", 2)
        end
    end

    self.disconnect = function(self)
        if #conn > 0 then
            for i = 1, #conn do
                conn[i]:disconnect()
            end
            conn = {}
        else
            error("particle is already disconnected", 2)
        end
    end

    -- zero particle forces every step before partial forces are added
    self:connect()

    return self
end)

return M
