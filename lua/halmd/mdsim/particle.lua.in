--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local utility           = require("halmd.utility")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")
local utility           = require("halmd.utility")

---
-- Particle
-- ========
--

-- grab C++ wrappers
local particle = {}
particle.host = {
    [2] = assert(libhalmd.mdsim.host.particle_2)
  , [3] = assert(libhalmd.mdsim.host.particle_3)
}

if device.gpu then
    particle.gpu = {
        [2] = assert(libhalmd.mdsim.gpu.particle_2)
      , [3] = assert(libhalmd.mdsim.gpu.particle_3)
    }
end

---
-- Construct particle instance.
--
-- :param table args: keyword arguments
-- :param number args.box: instance of :class:`halmd.mdsim.box`
-- :param number args.particles: number of particles
-- :param number args.species: number of species
-- :param string args.memory: device where the particle information is stored (optional)
--
--    The supported values for ``memory`` are "host" and "gpu". If ``memory``
--    is not specified, the memory location is selected according to the
--    compute device.
--
-- :param string args.label: instance label (defaults to ``all``)
--
-- .. attribute:: nparticle
--
--    Number of particles.
--
-- .. attribute:: nspecies
--
--    Number of particle species.
--
-- .. attribute:: label
--
--    Instance label.
--
-- .. attribute:: memory
--
--    Device where the particle memory resides.
--
-- .. warning::
--
--    During simulation, particle arrays are reordered in memory according
--    to a space-filling curve. To access particles in initial order, use
--    :meth:`get_reverse_tag` to retrieve the current particle indices.
--
-- .. method:: get_position()
--
--    Returns sequence with particle positions.
--
-- .. method:: set_position(position)
--
--    Set particle positions to given sequence.
--
-- .. method:: get_image()
--
--    Returns sequence with particle images.
--
-- .. method:: set_image(image)
--
--    Set particle images to given sequence.
--
-- .. method:: get_velocity()
--
--    Returns sequence with particle velocities.
--
-- .. method:: set_velocity(velocity)
--
--    Set particle velocities to given sequence.
--
-- .. method:: get_tag()
--
--    Returns sequence with particle tags.
--
-- .. method:: set_tag(tag)
--
--    Set particle tags to given sequence.
--
-- .. method:: get_reverse_tag()
--
--    Returns sequence with particle reverse tags.
--
-- .. method:: set_reverse_tag(reverse_tag)
--
--    Set particle reverse tags to given sequence.
--
-- .. method:: get_species()
--
--    Returns sequence with particle species.
--
-- .. method:: set_species(species)
--
--    Set particle species to given sequence.
--
-- .. method:: get_mass()
--
--    Returns sequence with particle masses.
--
-- .. method:: set_mass(mass)
--
--    Set particle masses to given sequence.
--
-- .. method:: shift_velocity(vector)
--
--    Shift all velocities by ``vector``.
--
-- .. method:: shift_velocity_group(group, vector)
--
--    Shift velocities of group by ``vector``.
--
-- .. method:: rescale_velocity(scalar)
--
--    Rescale magnitude of all velocities by ``scalar``.
--
-- .. method:: rescale_velocity_group(group, scalar)
--
--    Rescale magnitude of velocities of group by ``scalar``.
--
-- .. method:: shift_rescale_velocity(vector, scalar)
--
--    First shift, then rescale all velocities.
--
-- .. method:: shift_rescale_velocity_group(group, vector, scalar)
--
--    First shift, then rescale velocities of group.
--
local M = module(function(args)
    local box = utility.assert_kwarg(args, "box")
    local nparticle = utility.assert_type(utility.assert_kwarg(args, "particles"), "number")
    local nspecies = utility.assert_type(utility.assert_kwarg(args, "species"), "number")

    local label = args.label or "all"

    local memory = args and args.memory or (device.gpu and "gpu" or "host")
    if not particle[memory] then
        error(("unsupported particle memory type '%s'"):format(memory), 2)
    end

    -- select particle class
    local dimension = #box:edges()
    local particle = assert(particle[memory][dimension])

    -- construct particle instance
    local self = particle(nparticle, nspecies)

    -- store particle label as Lua property
    self.label = property(function(self)
        return label
    end)

    self.memory = property(function(self)
        return memory
    end)

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "particle module")

    -- zero particle forces every step before partial forces are added -- FIXME ???

    -- connect to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, assert(profiler:on_profile(runtime.rearrange, "rearrange particles by permutation")))

    return self
end)

return M
