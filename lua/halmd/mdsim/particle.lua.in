--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local mdsim = {
    core                = require("halmd.mdsim.core")
}

-- grab C++ wrappers
local particle_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.particle_2_
      , [3] = libhalmd.mdsim.host.particle_3_
    }
  , [2] = libhalmd.mdsim.particle_2_
  , [3] = libhalmd.mdsim.particle_3_
}
if libhalmd.mdsim.gpu then
    particle_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.particle_2_
      , [3] = libhalmd.mdsim.gpu.particle_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local property = property

local M = module("halmd.mdsim.particle")

--
-- construct particle module
--
-- @param dimension dimension of positional coordinates
--
function M.__new(args)
    local dimension = assert(args.dimension)
    local npart = args.particles or {1000} -- default value
    local masses = assert(args.masses)
    local label = assert(args.label)

    local particle
    if device() then
        if args.threads then
            particle = particle_wrapper.gpu[dimension](npart, masses, args.threads)
        else
            particle = particle_wrapper.gpu[dimension](npart, masses)
        end
    else
        particle = particle_wrapper.host[dimension](npart, masses)
    end

    -- store particle label as Lua property
    particle.label = property(function(self)
        return label
    end)

    local core = mdsim.core()
    -- set particle types at the beginning of system preparation
    core:on_prepend_setup{particle.set, tracker = particle}

    return particle
end

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, rearrange = "rearrange particles by permutation"}
end

-- override default parameter namespace
M.namespace = "box"

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("particles", po.uint_array(), "number of particles")
    if particle_wrapper.gpu then
        desc:add("threads", po.uint(), "number of CUDA threads per block")
    end
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    args.particles = group:read_attribute("particles", h5.uint_array())
end

--
-- write module parameters to HDF5 group
--
-- @param particle module instance
-- @param group HDF5 group
--
function M.write_parameters(particle, group)
    group:write_attribute("particles", h5.uint_array(), particle.ntypes)
end

return M
