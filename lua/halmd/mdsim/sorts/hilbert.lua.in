--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local hilbert_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.sorts.hilbert_2_
      , [3] = libhalmd.mdsim.host.sorts.hilbert_3_
    }
}
if libhalmd.mdsim.gpu then
    hilbert_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.sorts.hilbert_2_
      , [3] = libhalmd.mdsim.gpu.sorts.hilbert_3_
    }
end
-- grab standard library
local assert = assert


--
-- construct hilbert module
--
local M = module(function(args)
    -- dependency injection
    local particle = assert(args.particle)
    local box = assert(args.box)
    local dimension = assert(particle.dimension)
    local binning = assert(args.binning)
    local logger = log.logger({label = "hilbert"})

    local sort
    if device.gpu then
        sort = assert(hilbert_wrapper.gpu[dimension])(particle, box, logger)
    else
        sort = assert(hilbert_wrapper.host[dimension])(particle, box, binning, logger)
    end

    return sort
end)

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, order = "order particles by permutation"}
    profiler:on_profile{self, map = "map particles to Hilbert curve"}
end

--
-- returns module description
--
function M.description()
    return "Hilbert space-filling curve"
end

return M
