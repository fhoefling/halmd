--
-- Copyright © 2013  Felix Höfling
-- Copyright © 2013-2014  Nicolas Höft
-- Copyright © 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")

-- grab C++ wrappers
local hilbert =  assert(libhalmd.mdsim.sorts.hilbert)

---
-- Hilbert sort
-- ============
--
-- This module re-orders the particle data in :class:`halmd.mdsim.particle`
-- according to a space-filling Hilbert curve. The idea behind is that
-- interacting particles, being close in space, are also close in memory for
-- better cache efficiency. The module is used and constructed internally by
-- :class:`halmd.mdsim.neighbour`, i.e. manual construction is not needed.
--
-- For details see:
--
-- - S. Aluru and F. Sevilgen, *Parallel domain decomposition and load
--   balancing using space-filling curves,*
--   `Proc. 4th IEEE Int. Conf. High Performance Computing, <http://dx.doi.org/10.1109/HIPC.1997.634498>`_
--   p. 230 (1997)
--
-- - J. Anderson, C. D. Lorenz, and A. Travesset, *General purpose molecular
--   dynamics simulations fully implemented on graphics processing units,*
--   `J. Comp. Phys. <http://dx.doi.org/10.1016/j.jcp.2008.01.047>`_ **227**,
--   5342 (2008)
--

---
-- Construct Hilbert sort module.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param args.binning: instance of :class:`halmd.mdsim.binning` *(see below)*
--
-- If ``particle`` instance resides in GPU memory (i.e. ``particle.memory`` is ``gpu``),
-- a ``binning`` instance is not required for construction of the Hilber sort module.
--
-- .. method:: order
--
--    Sort the particles according to a space-filling Hilbert curve.
--
-- .. method:: disconnect()
--
--    Disconnect neighbour module from core and profiler.
--
local M = module(function(args)
    -- dependency injection
    local particle = utility.assert_kwarg(args, "particle")
    local box = utility.assert_kwarg(args, "box")
    local binning
    if particle.memory == "host" then
        binning = utility.assert_kwarg(args, "binning")
    end
    local label = (" (%s)"):format(assert(particle.label))
    local logger = log.logger({label = "Hilbert sort" .. label})

    local self
    if particle.memory == "gpu" then
        self = hilbert(particle, box, logger)
    else
        self = hilbert(particle, box, binning, logger)
    end

    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "Hilbert sort module")

    -- connect hilbert module to profiler
    local runtime = assert(self.runtime)

    table.insert(conn, profiler:on_profile(runtime.order, "order particles by permutation" .. label))
    table.insert(conn, profiler:on_profile(runtime.map, "map particles to Hilbert curve" .. label))

    return self
end)

return M
