--
-- Copyright © 2017 Felix Höfling
-- Copyright © 2016 Daniel Kirchner
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device  = require("halmd.utility.device")
local numeric = require("halmd.numeric")
local utility = require("halmd.utility")

local hard_core = { host = libhalmd.mdsim.host.potentials.pair.hard_core }

if device.gpu then
    hard_core.gpu = hard_core.host and assert(libhalmd.mdsim.gpu.potentials.pair.hard_core)
end

---
-- .. _pair_potential_modifications:
--
-- Potential modifications
-- =======================
--
-- hard_core
-- ---------
--
-- Add a hard core of radius :math:`r_\mathrm{core}` to point particles by
-- shifting the potential radially outwards:
--
-- .. math::
--
--   \tilde U(r) = U(r - r_\mathrm{core}), \qquad r > r_\mathrm{core}.
--
-- Example::
--
--     potential = potential:modify({"hard_core", radius = 0.5})
--

-- set up metatable that does the actual transformation
local modify_table = {}

modify_table.hard_core = function(potential, core, args)
    local radius = utility.assert_kwarg(args, "radius")
    if type(radius) ~= "table" and type(radius) ~= "number" then
        error("bad argument 'radius'", 2)
    end
    if type(radius) == "number" then
        radius = numeric.scalar_matrix(potential.species, potential.species, radius)
    end
    return hard_core[potential.memory](radius, potential)
end

modify_table = setmetatable(modify_table, {
    __index = function(tbl, key)
        error("invalid modification type '" .. key .. "'", 2)
    end
})

local M = function(potential, args)
    local newpot = modify_table[args[1]](potential, args)
    newpot.description = args[1] .. " " .. potential.description
    newpot.species = potential.species
    newpot.memory = potential.memory
    newpot.logger = potential.logger
    newpot.truncate = potential.truncate
    newpot.modify = potential.modify
    return newpot
end

return M
