--
-- Copyright © 2010-2023 Felix Höfling
-- Copyright © 2013      Nicolas Höft
-- Copyright © 2010      Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local numeric           = require("halmd.numeric")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")
local adapters          = require("halmd.mdsim.potentials.pair.adapters")

---
-- Morse potential
-- ===============
--
-- This module implements the (distorted) Morse potential,
--
-- .. math::
--
--    U^{(ij)}_\text{Morse}(r) = \frac{\epsilon_{ij}}{2 B^2 - 1} \left(
--        e^{-2 (r - r_{\text{min},ij}) / (B \sigma_{ij})}
--        - 2 B^2 e^{-(r - r_{\text{min},ij}) / (B \sigma_{ij})}
--    \right)
--
-- for the interaction between two particles of species :math:`i` and :math:`j`.
-- This form of the potential contains a distortion parameter :math:`B`, which
-- is also denoted as :math:`b=B^2` in the literature. The original Morse
-- potential is obtained for :math:`B=1` and is conveniently written as
--
-- .. math::
--
--    U^{(ij)}_\text{Morse}(r) = \epsilon_{ij} \left(
--        1 - e^{-(r - r_{\text{min},ij}) / \sigma_{ij}}
--    \right)^2 - \epsilon_{ij}
--
-- In this case, the potential minimum is at :math:`r = r_{\text{min},ij}`. The
-- inverse length :math:`1/\sigma_{ij}` is also referred to as stiffness
-- parameter.
--
-- grab C++ wrappers
local morse = {
    host = assert(libhalmd.mdsim.host.potentials.pair.morse)
}
local force_shifted = { host = assert(libhalmd.mdsim.host.potentials.pair.force_shifted) }
local smooth_r4 = { host = assert(libhalmd.mdsim.host.potentials.pair.smooth_r4) }
local shifted = { host = assert(libhalmd.mdsim.host.potentials.pair.shifted) }
if device.gpu then
    morse.gpu = assert(libhalmd.mdsim.gpu.potentials.pair.morse)
    force_shifted.gpu = assert(libhalmd.mdsim.gpu.potentials.pair.force_shifted)
    smooth_r4.gpu = assert(libhalmd.mdsim.gpu.potentials.pair.smooth_r4)
    shifted.gpu = assert(libhalmd.mdsim.gpu.potentials.pair.shifted)
end

---
-- Construct Morse potential.
--
-- :param table args: keyword arguments
-- :param table args.epsilon: matrix with elements :math:`\epsilon_{ij}` (*default:* ``1``)
-- :param table args.sigma: matrix with elements :math:`\sigma_{ij}` (*default:* ``1``)
-- :param table args.r_min: position of the potential well (equilibrium distance) :math:`r_\text{min}`
-- :param table args.distortion: distortion parameter :math:`B` (*default:* ``1``)
-- :param number args.species: number of particle species *(optional)*
-- :param string args.memory: select memory location *(optional)*
-- :param string args.label: instance label *(optional)*
--
-- If the argument ``species`` is omitted, it is inferred from the first
-- dimension of the parameter matrices.
--
-- If all elements of a matrix are equal, a scalar value may be passed instead
-- which is promoted to a square matrix of size given by the number of particle
-- ``species``.
--
-- The supported values for ``memory`` are "host" and "gpu". If ``memory`` is
-- not specified, the memory location is selected according to the compute
-- device.
--
-- Note::
--
--     The keyword ``minimum`` has been deprecated since version 1.1.0. Please
--     use ``r_min`` instead. For backwards compatibility, values passed via
--     ``minimum`` are converted to ``r_min``, i.e., multiplied by ``sigma``.
--
-- .. attribute:: epsilon
--
--    Matrix with elements :math:`\epsilon_{ij}`.
--
-- .. attribute:: sigma
--
--    Matrix with elements :math:`\sigma_{ij}`.
--
-- .. attribute:: r_min
--
--    Matrix with equilibrium distance :math:`r_{\text{min}, ij}` in simulation units.
--
-- .. attribute:: r_min_sigma
--
--    Matrix with elements :math:`r_{\text{min}, ij} / \sigma_{ij}`.
--
-- .. attribute:: distortion
--
--    Matrix with elements :math:`B_{ij}`.
--
-- .. attribute:: r_cut
--
--    | Matrix with cutoff radius :math:`r_{\text{c}, ij}` in simulation units.
--    | *This attribute is only available after truncation of the potential (see below).*
--
-- .. attribute:: r_cut_sigma
--
--    | Matrix with elements :math:`r_{\text{c}, ij} / \sigma_{ij}`.
--    | *This attribute is only available after truncation of the potential (see below).*
--
-- .. attribute:: description
--
--    Name of potential for profiler.
--
-- .. attribute:: memory
--
--    Device where the particle memory resides.
--
-- .. method:: truncate(args)
--
--    Truncate potential.
--    See :ref:`pair_potential_truncations` for available truncations.
--
--    :param table args: keyword argument
--    :param string args[1]: name of truncation type
--    :param table cutoff: matrix with elements :math:`r_{\text{c}, ij}`
--    :param any args.*: additional arguments depend on the truncation type
--    :returns: truncated potential
--
--    Example::
--
--      potential = potential:truncate({"smooth_r4", cutoff = 5, h = 0.05})
--
-- .. method:: modify(args)
--
--    Apply potential modification.
--    See :ref:`pair_potential_modifications` for available modifications.
--
--    :param table args: keyword argument
--    :param string args[1]: name of modification type
--    :param any args.*: additional arguments depend on the modification type
--    :returns: modified potential
--
--    Example::
--
--      potential = potential:modify({"hard_core", radius = 0.5})
--
local M = module(function(args)
    local epsilon = args and args.epsilon or 1
    if type(epsilon) ~= "table" and type(epsilon) ~= "number" then
        error("bad argument 'epsilon'", 2)
    end
    local sigma = args and args.sigma or 1
    if type(sigma) ~= "table" and type(sigma) ~= "number" then
        error("bad argument 'sigma'", 2)
    end
    local r_min = args and args.r_min
    -- accept 'minimum' for backwards compatibility, needs to multiplied by sigma
    if not r_min and args.minimum then
        local fix_r_min = true
        r_min = args.minimum
    end
    if type(r_min) ~= "table" and type(r_min) ~= "number" then
        error("bad argument 'r_min'", 2)
    end
    local distortion = args and args.distortion or 1
    if type(distortion) ~= "table" and type(distortion) ~= "number" then
        error("bad argument 'distortion'", 2)
    end

    local memory = args and args.memory or (device.gpu and "gpu" or "host")

    local label = args and args.label and utility.assert_type(args.label, "string")
    label = label and (" (%s)"):format(label) or ""
    local logger = log.logger({label =  "morse" .. label})

    -- derive number of species from parameter matrices
    local species = args and args.species
        or (type(epsilon) == "table" and #epsilon) or (type(sigma) == "table" and #sigma)
        or (type(r_min) == "table" and #r_min) or (type(distortion) == "table" and #distortion) or 1
    utility.assert_type(species, "number")

    -- promote scalars to matrices
    if type(epsilon) == "number" then
        epsilon = numeric.scalar_matrix(species, species, epsilon)
    end
    if type(sigma) == "number" then
        sigma = numeric.scalar_matrix(species, species, sigma)
    end
    if type(r_min) == "number" then
        r_min = numeric.scalar_matrix(species, species, r_min)
    end
    if type(distortion) == "number" then
        distortion = numeric.scalar_matrix(species, species, distortion)
    end

    -- backwards compatibility: fix units of minimum position
    if fix_r_min then
        logger:warning("The argument \'minimum\' has been deprecated, use \'r_min\' instead (see documentation)")
        for i = 1, species do
            for j = 1, species do
                r_min[i][j] = r_min[i][j] * sigma[i][j]
            end
        end
    end

    -- construct instance
    if not morse[memory] then
        error(("unsupported memory type '%s'"):format(memory), 2)
    end
    local self = morse[memory](epsilon, sigma, r_min, distortion, logger)

    -- add description for profiler
    self.description = property(function()
        return "Morse potential" .. label
    end)

    -- store number of species
    self.species = property(function(self) return species end)

    -- store memory location
    self.memory = property(function(self) return memory end)

    -- add logger instance
    self.logger = property(function()
        return logger
    end)

    self.truncate = adapters.truncate
    self.modify = adapters.modify

    return self
end)

return M
