--
-- Copyright © 2016 Daniel Kirchner
-- Copyright © 2008, 2012 Peter Colberg
-- Copyright © 2012 Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device    = require("halmd.utility.device")
local numeric   = require("halmd.numeric")
local utility   = require("halmd.utility")

local force_shifted = { host = libhalmd.mdsim.host.potentials.pair.force_shifted }
local hard_core = { host = libhalmd.mdsim.host.potentials.pair.hard_core }
local smooth_r4 = { host = libhalmd.mdsim.host.potentials.pair.smooth_r4 }
local sharp = { host = libhalmd.mdsim.host.potentials.pair.sharp }
local shifted = { host = libhalmd.mdsim.host.potentials.pair.shifted }

if device.gpu then
    force_shifted.gpu = force_shifted.host and assert(libhalmd.mdsim.gpu.potentials.pair.force_shifted)
    hard_core.gpu = hard_core.host and assert(libhalmd.mdsim.gpu.potentials.pair.hard_core)
    sharp.gpu = sharp.host and assert(libhalmd.mdsim.gpu.potentials.pair.sharp)
    smooth_r4.gpu = smooth_r4.host and assert(libhalmd.mdsim.gpu.potentials.pair.smooth_r4)
    shifted.gpu = shifted.host and assert(libhalmd.mdsim.gpu.potentials.pair.shifted)
end

---
-- Potential adapters
-- ~~~~~~~~~~~~~~~~~~
--
-- Every potential defines a ``truncate`` and a ``modify`` method that can be used
-- to create a modified potential.
--
-- .. _pair_potential_truncations:
--
-- Potential Truncations
-- =====================
--
-- force_shifted
-- -------------
--
-- Example::
--
--     potential = potential:truncate({"force_shifted", cutoff = 4})
--
-- sharp
-- -----
--
-- Example::
--
--     potential = potential:truncate({"sharp", cutoff = 4})
--
-- shifted
-- -------
--
-- Example::
--
--     potential = potential:truncate({"shifted", cutoff = 4})
--
-- .. _smooth_r4:
--
-- smooth_r4
-- ---------
--
-- This potential adapter -- transforms the potential :math:`V(r)`
-- into a C²-continuous function, and the force into a C¹-continuous function.
-- The degree of smoothing is controlled with a dimensionless parameter.
-- Before smoothing the potential is shifted to :math:`V(r_c)=0`.
--
-- The smoothing function is
--
-- .. math::
--
--   g\left(\xi\right) = \frac{\xi^4}{1 + \xi^4}, \qquad \xi = \frac{r - r_c}{h r_c},
--
-- with smoothing parameter :math:`h \ll 1` and cutoff distance :math:`r_c`,
-- and its derivative
--
-- .. math::
--
--   g^\prime\left(\xi\right) = 4 \frac{\xi^3}{\left(1 + \xi^4\right)^2}.
--
-- The C²-continuous potential is
--
-- .. math::
--
--   V_{C^2}\left(r\right) = V\left(r\right) g\left(\frac{r - r_c}{h r_c}\right),
--
-- and the C¹-continuous force is
--
-- .. math::
--
--   \lvert\vec{F}_{C^1}\left(\vec{r}\right)\rvert =
--     \lvert\vec{F}\left(\vec{r}\right)\rvert g\left(\frac{r - r_c}{h r_c}\right)
--     - \frac{1}{h r_c} V\left(r\right) g^\prime\left(\frac{r - r_c}{h r_c}\right).
--
--
-- The following figure shows unmodified and C²-smooth variants of the
-- Weeks-Chandler-Andersen potential, a purely repulsive form of the
-- Lennard-Jones potential with cutoff :math:`r_c = \sqrt[6]{2}`.
--
-- .. plot::
--
--   import numpy
--   import matplotlib
--   from matplotlib import pyplot as plot
--
--   matplotlib.rc('figure', figsize=(6, 5))
--   matplotlib.rc('text', usetex=True)
--
--   # Lennard Jones potential
--   V = lambda r: 4 * (pow(r, -12) - pow(r, -6))
--   # truncated Lennard-Jones potential
--   V_c = lambda r, r_c: numpy.piecewise(r, [r < r_c, r >= r_c], [lambda r: V(r) - V(r_c), 0])
--
--   # smoothing function
--   g_xi = lambda xi: pow(xi, 4) / (1 + pow(xi, 4))
--   # smoothing function with scale parameter
--   g = lambda r, r_c, h: g_xi((r - r_c) / (h * r_c))
--
--   # smoothed Lennard-Jones potential
--   V_s = lambda r, r_c, h: g(r, r_c, h) * V_c(r, r_c)
--
--   # particle distance
--   r = numpy.linspace(1, 1.4, 1000)
--   # cutoff distance
--   r_c = pow(2, 1./6)
--   # smoothing function scale parameters
--   h = (0.0025, 0.005, 0.0075)
--
--   # plot potentials
--   ax = plot.axes()
--   ax.axhline(0, 0, 1, color="k", lw=0.5, ls="--")
--   ax.plot(r, V_c(r, r_c), label=r"$h \rightarrow 0$")
--   for h in h:
--       ax.plot(r, V_s(r, r_c, h), label=r"$h = {0:.4g}$".format(h))
--
--   l = ax.legend(loc="upper right")
--   l.legendPatch.set_alpha(0.7)
--
--   major_formatter = matplotlib.ticker.ScalarFormatter()
--   major_formatter.set_powerlimits((-1, 2))
--   ax.yaxis.set_major_formatter(major_formatter)
--
--   plot.setp(ax, xlim=(1.09, 1.15 + 1e-15))
--   plot.setp(ax, ylim=(-0.008, 0.04))
--
--   plot.xlabel(r"$r / \sigma$")
--   plot.ylabel(r"$V(r) / \epsilon$")
--   plot.show()
--
--
-- The following figure shows the absolute value of the force.
--
-- .. plot::
--
--   import numpy
--   import matplotlib
--   from matplotlib import pyplot as plot
--
--   matplotlib.rc('figure', figsize=(6, 5))
--   matplotlib.rc('text', usetex=True)
--
--   # Lennard Jones potential
--   V = lambda r: 4 * (pow(r, -12) - pow(r, -6))
--   # truncated Lennard-Jones potential
--   V_c = lambda r, r_c: numpy.piecewise(r, [r < r_c, r >= r_c], [lambda r: V(r) - V(r_c), 0])
--   # Lennard Jones force
--   F = lambda r: 48 * (pow(r, -14) - 0.5*pow(r, -8))
--   # truncated Lennard-Jones force
--   F_c = lambda r, r_c: numpy.piecewise(r, [r < r_c, r >= r_c], [F, 0])
--
--   # smoothing function
--   g_xi = lambda xi: pow(xi, 4) / (1 + pow(xi, 4))
--   # smoothing function with scale parameter
--   g = lambda r, r_c, h: g_xi((r - r_c) / (h * r_c))
--   # first derivative of smoothing function
--   Dg_xi = lambda xi: 4 * pow(xi, 3) / pow(1 + pow(xi, 4), 2)
--   # first derivative of smoothing function with scale parameter
--   Dg = lambda r, r_c, h: Dg_xi((r - r_c) / (h * r_c)) / (h * r_c)
--
--   # smoothed Lennard-Jones force
--   F_s = lambda r, r_c, h: F_c(r, r_c) * g(r, r_c, h) - V_c(r, r_c) * Dg(r, r_c, h)
--
--   # particle distance
--   r = numpy.linspace(1, 1.4, 1000)
--   # cutoff distance
--   r_c = pow(2, 1./6)
--   # smoothing function scale parameters
--   h = (0.0025, 0.005, 0.0075)
--
--   # plot forces
--   ax = plot.axes()
--   ax.axhline(0, 0, 1, color="k", lw=0.5, ls="--")
--   ax.plot(r, F_c(r, r_c), label=r"$h \rightarrow 0$")
--   for h in h:
--       ax.plot(r, F_s(r, r_c, h), label=r"$h = {0:.4g}$".format(h))
--
--   l = ax.legend(loc="upper right")
--   l.legendPatch.set_alpha(0.7)
--
--   major_formatter = matplotlib.ticker.ScalarFormatter()
--   major_formatter.set_powerlimits((-1, 2))
--   ax.yaxis.set_major_formatter(major_formatter)
--
--   plot.setp(ax, xlim=(1.09, 1.15 + 1e-15))
--   plot.setp(ax, ylim=(-0.5, 2.5))
--
--   plot.xlabel(r"$r / \sigma$")
--   plot.ylabel(r"$\sigma^2|\vec{F}(\vec{r})| / \epsilon$")
--   plot.show()
--
--
-- Example::
--
--     potential = potential:truncate({"smooth_r4", cutoff = 4, h = 0.05})
--
-- .. _pair_potential_modifications:
--
-- Potential Modifications
-- =======================
--
-- hard_core
-- ---------
--
-- Example::
--
--     potential = potential:modify({"hard_core", radius = 0.5})
--
--

local self = {}

local truncate_table = {}

if force_shifted.host then
    truncate_table.force_shifted = function(potential, cutoff, args)
        return force_shifted[potential.memory](cutoff, potential)
    end
end
if sharp.host then
    truncate_table.sharp = function(potential, cutoff, args)
        return sharp[potential.memory](cutoff, potential)
    end
end
if shifted.host then
    truncate_table.shifted = function(potential, cutoff, args)
        return shifted[potential.memory](cutoff, potential)
    end
end
if smooth_r4.host then
    truncate_table.smooth_r4 = function(potential, cutoff, args)
        local h = args.h
        if type(h) ~= "number" then
            error("bad argument 'h'", 2)
        end
        return smooth_r4[potential.memory](cutoff, h, potential)
    end
end

truncate_table = setmetatable(truncate_table, {
    __index = function(tbl, key)
        error("invalid truncation type '"..key.."'", 2)
    end
})

self.truncate = function(potential, args)
    local cutoff = utility.assert_kwarg(args, "cutoff")
    local trunctype = args[1] or "shifted"
    if type(cutoff) ~= "table" and type(cutoff) ~= "number" then
        error("bad argument 'cutoff'", 2)
    end
    if type(cutoff) == "number" then
        cutoff = numeric.scalar_matrix(potential.species, potential.species, cutoff)
    end

    local newpot = truncate_table[trunctype](potential, cutoff, args)
    newpot.description = trunctype.." "..potential.description
    newpot.species = potential.species
    newpot.memory = potential.memory
    newpot.logger = potential.logger
    newpot.truncate = potential.truncate
    newpot.modify = potential.modify
    return newpot
end

local modify_table = setmetatable({
    hard_core = function(potential, core, args)
        local radius = utility.assert_kwarg(args, "radius")
        if type(radius) ~= "table" and type(radius) ~= "number" then
            error("bad argument 'radius'", 2)
        end
        if type(radius) == "number" then
            radius = numeric.scalar_matrix(potential.species, potential.species, radius)
        end
        return hard_core[potential.memory](radius, potential)
    end,
}, {
    __index = function(tbl, key)
        error("invalid modification type '"..key.."'", 2)
    end
})

self.modify = function(potential, args)
    local newpot = modify_table[args[1]](potential, args)
    newpot.description = args[1].." "..potential.description
    newpot.species = potential.species
    newpot.memory = potential.memory
    newpot.logger = potential.logger
    newpot.truncate = potential.truncate
    newpot.modify = potential.modify
    return newpot
end

return self
