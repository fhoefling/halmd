--
-- Copyright © 2010-2013 Felix Höfling
-- Copyright © 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local numeric           = require("halmd.numeric")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")

---
-- Linearly truncated Lennard-Jones potential
-- ==========================================
--
-- This module implements the Lennard-Jones potential with a linear truncation
-- scheme (which is equivalent to a shifted force),
--
-- .. math::
--
--    U_\text{LJ}\left(r_{ij}\right) = 4\epsilon_{ij} \left(
--        \left(\frac{\sigma_{ij}}{r_{ij}}\right)^{12}
--      - \left(\frac{\sigma_{ij}}{r_{ij}}\right)^6
--      + (r_{ij} - r_c)\cdot F_c
--    \right)
--
-- for the interaction between two particles of species :math:`i` and
-- :math:`j`.  Here, :math:`r_c` denotes the cutoff distance and :math:`F_c = -
-- U_\text{LJ}\prime(r_c)` the force at the cutoff for the untruncated potential.
--
-- This linear truncation scheme modifies the potential drastically and at all
-- distances by adding a constant force, and we do not recommend it for future
-- work. It is mainly provided for historical reasons to connect to existing
-- data and publications. Please refer to the :class:`local r⁴ truncation
-- <halmd.mdsim.forces.trunc.local_r4>` scheme for an alternative.
--
-- References
-- ----------
--
-- #. *S. K. Das, J. Horbach, K. Binder, M. E. Fisher, and J. V. Sengers*, `J. Chem. Phys. 125, 024506 <http://dx.doi.org/10.1063/1.2215613>`_ (2006)
-- #. *S. Toxvaerd and J. C. Dyre*, `J. Chem. Phys. 134, 081102 <http://jcp.aip.org/resource/1/jcpsa6/v134/i8/p081102_s1>`_ (2011)
-- #. *S. Toxvaerd, O. J. Heilmann, and J. C. Dyre*, `J. Chem. Phys. 136, 224106 <http://jcp.aip.org/resource/1/jcpsa6/v136/i22/p224106_s1>`_ (2012)
--

-- grab C++ wrappers
local lennard_jones_linear = {
    host = assert(libhalmd.mdsim.host.potentials.pair.lennard_jones_linear)
}
if device.gpu then
    lennard_jones_linear.gpu = assert(libhalmd.mdsim.gpu.potentials.pair.lennard_jones_linear)
end

---
-- Construct linearly truncated Lennard-Jones potential.
--
-- :param table args: keyword arguments
-- :param table args.epsilon: matrix with elements :math:`\epsilon_{ij}` (*default:* ``1``)
-- :param table args.sigma: matrix with elements :math:`\sigma_{ij}` (*default:* ``1``)
-- :param table args.cutoff: matrix with elements :math:`r_{\text{c}, ij}`
-- :param number args.species: number of particle species *(optional)*
-- :param string args.memory: select memory location *(optional)*
-- :param string args.label: instance label *(optional)*
--
-- If the argument ``species`` is omitted, it is inferred from the first
-- dimension of the parameter matrices.
--
-- If all elements of a matrix are equal, a scalar value may be passed instead
-- which is promoted to a square matrix of size given by the number of particle
-- ``species``.
--
-- The supported values for ``memory`` are "host" and "gpu". If ``memory`` is
-- not specified, the memory location is selected according to the compute
-- device.
--
-- .. note::
--
--    The cutoff is only relevant with :class:`halmd.mdsim.forces.pair_trunc`.
--
-- .. attribute:: epsilon
--
--    Matrix with elements :math:`\epsilon_{ij}`.
--
-- .. attribute:: sigma
--
--    Matrix with elements :math:`\sigma_{ij}`.
--
-- .. attribute:: r_cut
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in reduced units.
--
-- .. attribute:: r_cut_sigma
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in units of :math:`\sigma_{ij}`.
--
-- .. attribute:: description
--
--    Name of potential for profiler.
--
-- .. attribute:: memory
--
--    Device where the particle memory resides.
--
local M = module(function(args)
    local epsilon = args and args.epsilon or 1
    if type(epsilon) ~= "table" and type(epsilon) ~= "number" then
        error("bad argument 'epsilon'", 2)
    end
    local sigma = args and args.sigma or 1
    if type(sigma) ~= "table" and type(sigma) ~= "number" then
        error("bad argument 'sigma'", 2)
    end
    local cutoff = utility.assert_kwarg(args, "cutoff")
    if type(cutoff) ~= "table" and type(cutoff) ~= "number" then
        error("bad argument 'cutoff'", 2)
    end

    local memory = args and args.memory or (device.gpu and "gpu" or "host")

    local label = args and args.label and utility.assert_type(args.label, "string")
    label = label and (" (%s)"):format(label) or ""
    local logger = log.logger({label =  "lennard_jones_linear" .. label})

    -- derive number of species from parameter matrices
    local species = args and args.species
        or (type(epsilon) == "table" and #epsilon) or (type(sigma) == "table" and #sigma)
        or (type(cutoff) == "table" and #cutoff) or 1
    utility.assert_type(species, "number")

    -- promote scalars to matrices
    if type(cutoff) == "number" then
        cutoff = numeric.scalar_matrix(species, species, cutoff)
    end
    if type(epsilon) == "number" then
        epsilon = numeric.scalar_matrix(species, species, epsilon)
    end
    if type(sigma) == "number" then
        sigma = numeric.scalar_matrix(species, species, sigma)
    end

    -- construct instance
    if not lennard_jones_linear[memory] then
        error(("unsupported memory type '%s'"):format(memory), 2)
    end
    local self = lennard_jones_linear[memory](cutoff, epsilon, sigma, logger)

    -- add description for profiler
    self.description = property(function()
        return "linearly truncated Lennard-Jones potential" .. label
    end)

    -- store memory location
    self.memory = property(function(self) return memory end)

    -- add logger instance for pair_trunc
    self.logger = property(function()
        return logger
    end)

    return self
end)

return M
