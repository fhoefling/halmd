--
-- Copyright © 2010  Felix Höfling
-- Copyright © 2013  Nicolas Höft
-- Copyright © 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")
local numeric           = require("halmd.utility.numeric")

-- grab C++ wrappers
local morse = {
    host = assert(libhalmd.mdsim.host.potentials.morse)
}
if device.gpu then
    morse.gpu = assert(libhalmd.mdsim.gpu.potentials.morse)
end

---
-- Morse potential
-- ===============
--
-- This module implements the Morse potential,
--
-- .. math::
--
--    U_\text{Morse}\left(r_{ij}\right) = \epsilon_{ij} \left(
--        1 - e^{r_{ij}/\sigma_{ij} - r_{\text{min},ij}}
--    \right)^2 - \epsilon_{ij}
--
-- for the interaction between two particles of species :math:`i` and :math:`j`.
--

---
-- Construct Morse potential.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param table args.epsilon: matrix with elements :math:`\epsilon_{ij}` (defaults to ``1``)
-- :param table args.sigma: matrix with elements :math:`\sigma_{ij}` (defaults to ``1``)
-- :param table args.cutoff: matrix with elements :math:`r_{\text{c}, ij}`
-- :param table args.minimum: Minimum/equilibrium distance :math:`r_\text{min}` in units of :math:`\sigma_{ij}`
--
-- If all elements of a matrix are equal, a scalar value should be passed instead.
--
-- .. note::
--
--    The cutoff is only relevant with :class:`halmd.mdsim.forces.pair_trunc`.
--
-- .. attribute:: epsilon
--
--    Matrix with elements :math:`\epsilon_{ij}`.
--
-- .. attribute:: sigma
--
--    Matrix with elements :math:`\sigma_{ij}`.
--
-- .. attribute:: r_cut
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in reduced units.
--
-- .. attribute:: r_cut_sigma
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in units of :math:`\sigma_{ij}`.
--
-- .. attribute:: r_min_sigma
--
--    Equilibrium distance :math:`r_{\text{min}, ij}` in units of :math:`\sigma_{ij}`.
--
-- .. attribute:: description
--
--    Name of potential for profiler.
--
local M = module(function(args)
    local epsilon = args and args.epsilon or 1
    if type(epsilon) ~= "table" and type(epsilon) ~= "number" then
        error("bad argument 'epsilon'", 2)
    end
    local sigma = args and args.sigma or 1
    if type(sigma) ~= "table" and type(sigma) ~= "number" then
        error("bad argument 'sigma'", 2)
    end
    local minimum = args and args.sigma or 1
    if type(sigma) ~= "table" and type(sigma) ~= "number" then
        error("bad argument 'sigma'", 2)
    end
    local cutoff = utility.assert_kwarg(args, "cutoff")
    if type(cutoff) ~= "table" and type(cutoff) ~= "number" then
        error("bad argument 'cutoff'", 2)
    end
    local particle = utility.assert_kwarg(args, "particle")
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end

    if particle[1].memory ~= particle[2].memory then
        error("'memory' of particle instances do not match", 2)
    end

    local memory = particle[1].memory

    local nspecies = {}
    local label = {}
    for i = 1, #particle do
        table.insert(nspecies, assert(particle[i].nspecies))
        table.insert(label, assert(particle[i].label))
    end

    local label = ("morse (%s ↔ %s)"):format(label[1], label[2])
    local logger = log.logger({label = label})

    if type(cutoff) == "number" then
        cutoff = numeric.scalar_matrix(nspecies[1], nspecies[2], cutoff)
    end
    if type(epsilon) == "number" then
        epsilon = numeric.scalar_matrix(nspecies[1], nspecies[2], epsilon)
    end
    if type(sigma) == "number" then
        sigma = numeric.scalar_matrix(nspecies[1], nspecies[2], sigma)
    end
    if type(minimum) == "number" then
        minimum = numeric.scalar_matrix(nspecies[1], nspecies[2], minimum)
    end

    local self
    self = morse[memory](nspecies[1], nspecies[2], cutoff, epsilon, sigma, minimum, logger)

    -- add description for profiler
    self.description = property(function()
        return "Morse potential"
    end)

    -- add logger instance
    self.logger = property(function()
        return logger
    end)

    return self
end)

return M
