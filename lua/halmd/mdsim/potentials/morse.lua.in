--
-- Copyright © 2010  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local mdsim = {
    particle            = require("halmd.mdsim.particle")
}

-- grab C++ wrappers
local morse_wrapper = {
    host = libhalmd.mdsim.host.potentials.morse
}
if libhalmd.mdsim.gpu then
    morse_wrapper.gpu = libhalmd.mdsim.gpu.potentials.morse
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

local M = module("halmd.mdsim.potentials.morse")

--
-- construct Morse module
--
function M.__new(args)
    local cutoff = args.cutoff or {2.5, 2.5, 2.5} -- default value
    local epsilon = args.epsilon or {1.0, 1.5, 0.5} -- default value
    local sigma = args.sigma or {1.0, 0.8, 0.88} -- default value
    local minimum = args.minimum or {2.0, 1.6, 1.78} -- default value

    local particle = mdsim.particle() -- singleton
    local logger = log.logger({label = "morse"})

    local morse
    if device() then
        morse = assert(morse_wrapper.gpu)
    else
        morse = assert(morse_wrapper.host)
    end
    return morse(particle.ntype, cutoff, epsilon, sigma, minimum, logger)
end

--
-- returns module description
--
function M.description()
    return "Morse potential"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc)
    desc:add("cutoff", po.float_array(), "truncate potential at cutoff radius")
    desc:add("epsilon", po.float_array(), "potential well depths")
    desc:add("sigma", po.float_array(), "collision diameters")
    desc:add("minimum", po.float_array(), "positions of potential minimum for interactions")
    -- FIXME desc:add("smooth", po.float_array(), "C²-potential smoothing factor")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group)
    -- FIXME args.cutoff = group:read_attribute("cutoff", h5.float_array())
    -- FIXME args.epsilon = group:read_attribute("epsilon", h5.float_array())
    -- FIXME args.sigma = group:read_attribute("sigma", h5.float_array())
    -- FIXME args.minimum = group:read_attribute("minimum", h5.float_array())
end

--
-- write module parameters to HDF5 group
--
-- @param morse module instance
-- @param group HDF5 group
--
function M.write_parameters(morse, group)
    group:write_attribute("cutoff", h5.float_array(), morse.r_cut_sigma:data())
    group:write_attribute("epsilon", h5.float_array(), morse.epsilon:data())
    group:write_attribute("sigma", h5.float_array(), morse.sigma:data())
    group:write_attribute("minimum", h5.float_array(), morse.r_min_sigma:data())
end

return M
