--
-- Copyright © 2010-2012 Peter Colberg
-- Copyright © 2010 Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local numeric           = require("halmd.utility.numeric")

---
-- Lennard-Jones potential
-- =======================
--
-- This module implements the Lennard-Jones potential,
--
-- .. math::
--
--    U_\text{LJ}\left(r_{ij}\right) = 4\epsilon_{ij} \left(
--        \left(\frac{\sigma_{ij}}{r_{ij}}\right)^{12}
--      - \left(\frac{\sigma_{ij}}{r_{ij}}\right)^6
--    \right)
--
-- for the interaction between two particles of species :math:`i` and :math:`j`.
--

-- grab C++ wrappers
local lennard_jones, lennard_jones_simple
if device.gpu then
    lennard_jones = assert(libhalmd.mdsim.gpu.potentials.lennard_jones)
    lennard_jones_simple = assert(libhalmd.mdsim.gpu.potentials.lennard_jones_simple)
else
    lennard_jones = assert(libhalmd.mdsim.host.potentials.lennard_jones)
end

---
-- Construct Lennard-Jones potential.
--
-- :param table args: keyword arguments
-- :param args.particle: instance, or sequence of two instances, of :class:`halmd.mdsim.particle`
-- :param table args.epsilon: matrix with elements :math:`\epsilon_{ij}` (defaults to ``1``)
-- :param table args.sigma: matrix with elements :math:`\sigma_{ij}` (defaults to ``1``)
-- :param table args.cutoff: matrix with elements :math:`r_{\text{c}, ij}`
--
-- If all elements of a matrix are equal, a scalar value should be passed instead.
--
-- .. note::
--
--    The cutoff is only relevant with :class:`halmd.mdsim.forces.pair_trunc`.
--
-- .. attribute:: epsilon
--
--    Matrix with elements :math:`\epsilon_{ij}`.
--
-- .. attribute:: sigma
--
--    Matrix with elements :math:`\sigma_{ij}`.
--
-- .. attribute:: r_cut
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in reduced units.
--
-- .. attribute:: r_cut_sigma
--
--    Matrix with elements :math:`r_{\text{c}, ij}` in units of :math:`\sigma_{ij}`.
--
-- .. attribute:: description
--
--    Name of potential for profiler.
--
local M = module(function(args)
    local epsilon = args and args.epsilon or 1
    if type(epsilon) ~= "table" and type(epsilon) ~= "number" then
        error("bad argument 'epsilon'", 2)
    end
    local sigma = args and args.sigma or 1
    if type(sigma) ~= "table" and type(sigma) ~= "number" then
        error("bad argument 'sigma'", 2)
    end
    local cutoff = args and args.cutoff
    if type(cutoff) ~= "table" and type(cutoff) ~= "number" then
        error("bad argument 'cutoff'", 2)
    end
    local particle = args.particle
    if type(particle) ~= "table" then
        particle = {particle, particle}
    end
    if #particle ~= 2 then
        error("bad argument 'particle'", 2)
    end

    local nspecies = {}
    local label = {}
    for i = 1, #particle do
        table.insert(nspecies, assert(particle[i].nspecies))
        table.insert(label, assert(particle[i].label))
    end
    local label = ("lennard_jones (%s ↔ %s)"):format(label[1], label[2])
    local logger = log.logger({label = label})

    -- construct instance
    local self
    if lennard_jones_simple and epsilon == 1 and sigma == 1 and type(cutoff) == "number" then
        -- select optimised GPU version if ε = 1 and σ = 1
        self = lennard_jones_simple(nspecies[1], nspecies[2], cutoff, logger)
    else
        if type(cutoff) == "number" then
            cutoff = numeric.scalar_matrix(nspecies[1], nspecies[2], cutoff)
        end
        if type(epsilon) == "number" then
            epsilon = numeric.scalar_matrix(nspecies[1], nspecies[2], epsilon)
        end
        if type(sigma) == "number" then
            sigma = numeric.scalar_matrix(nspecies[1], nspecies[2], sigma)
        end
        self = lennard_jones(nspecies[1], nspecies[2], cutoff, epsilon, sigma, logger)
    end

    -- add description for profiler
    self.description = property(function()
        return "Lennard-Jones potential"
    end)

    -- add logger instance for pair_trunc
    self.logger = property(function()
        return logger
    end)

    return self
end)

return M
