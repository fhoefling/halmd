--
-- Copyright © 2010  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.device")
require("halmd.modules")
require("halmd.numeric.matrix")

-- grab modules
local device = halmd.device
local mdsim = halmd.mdsim
-- grab C++ wrappers
local lennard_jones_wrapper = {
    host = libhalmd.mdsim.host.potentials.lennard_jones
}
if libhalmd.mdsim.gpu then
    lennard_jones_wrapper.gpu = libhalmd.mdsim.gpu.potentials.lennard_jones
end
local lennard_jones_simple_wrapper = {}
if libhalmd.mdsim.gpu then
    lennard_jones_simple_wrapper.gpu = libhalmd.mdsim.gpu.potentials.lennard_jones_simple
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local type = type
local scalar_matrix = scalar_matrix

module("halmd.mdsim.potentials.lennard_jones", halmd.modules.register)

--
-- construct Lennard-Jones module
--
function new(args)
    local cutoff = args.cutoff or 2.5 -- default value
    local epsilon = args.epsilon or 1 -- default value
    local sigma = args.sigma or 1 -- default value

    local particle1 = assert(args.particle or args.particles[1])
    local particle2 = assert(args.particle or args.particles[2])
    local logger = assert(args.logger)

    local potential
    -- select optimised GPU version if 1 species and ε=1, σ=1
    if device() and epsilon == 1 and sigma == 1 then
        local lennard_jones_simple = assert(lennard_jones_simple_wrapper.gpu)
        potential = lennard_jones_simple(particle1.ntype, particle2.ntype, cutoff, logger)
    else
        if type(cutoff) == "number" then
            cutoff = scalar_matrix(particle1.ntype, particle2.ntype, cutoff)
        end
        if type(epsilon) == "number" then
            epsilon = scalar_matrix(particle1.ntype, particle2.ntype, epsilon)
        end
        if type(sigma) == "number" then
            sigma = scalar_matrix(particle1.ntype, particle2.ntype, sigma)
        end
        local lennard_jones = assert(lennard_jones_wrapper[device() and "gpu" or "host"])
        potential = lennard_jones(particle1.ntype, particle2.ntype, cutoff, epsilon, sigma, logger)
    end
    return potential
end

--
-- returns module description
--
function description()
    return "Lennard-Jones potential"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("cutoff", po.float_array(), "truncate potential at cutoff radius")
    desc:add("epsilon", po.float_array(), "potential well depths")
    desc:add("sigma", po.float_array(), "collision diameters")
    -- FIXME desc:add("smooth", po.float_array(), "C²-potential smoothing factor")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    -- FIXME args.cutoff = group:read_attribute("cutoff", h5.float_array())
    -- FIXME args.epsilon = group:read_attribute("epsilon", h5.float_array())
    -- FIXME args.sigma = group:read_attribute("sigma", h5.float_array())
end

--
-- write module parameters to HDF5 group
--
-- @param lennard_jones module instance
-- @param group HDF5 group
--
function write_parameters(lennard_jones, group)
    -- FIXME :write_attribute("cutoff", h5.float_array(), lennard_jones.r_cut_sigma:data())
    -- FIXME :write_attribute("epsilon", h5.float_array(), lennard_jones.epsilon:data())
    -- FIXME :write_attribute("sigma", h5.float_array(), lennard_jones.sigma:data())
end
