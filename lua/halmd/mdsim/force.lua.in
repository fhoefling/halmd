--
-- Copyright © 2010-2012  Peter Colberg and Felix Höfling
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.mdsim.forces")
require("halmd.mdsim.potential")
require("halmd.modules")

-- grab modules
local forces = halmd.mdsim.forces
local mdsim = halmd.mdsim
-- grab C++ wrappers
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local pairs = pairs
local property = property

module("halmd.mdsim.force", halmd.modules.register)

--
-- construct force module
--
-- @param args       parameter table
--   args.particle          instance of particle
--   args.force             name of force (optional)
--   args.potential         instance of potential (optional)
--
-- @returns instance of force
--
function new(args)
    local particle = assert(args.particle, "missing parameter: particle")
    local force = args.force or "pair_trunc" -- default value
    local potential = args.potential or mdsim.potential{particle = particle}
    return assert(forces[force]){particle = particle, potential = potential}
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc, globals)

    -- force module choices with descriptions
    local choices = {}
    for name, module in pairs(forces) do
        if module.description then
            choices[name] = module.description()
        end
    end

    globals:add("force", po.string():choices(choices), "select force algorithm")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group, globals)
    args.force = globals:read_attribute("force", h5.string())
end

--
-- write module parameters to HDF5 group
--
-- @param force module instance
-- @param group HDF5 group
--
function write_parameters(force, group, globals)
    globals:write_attribute("force", h5.string(), force.module.namespace)
end
