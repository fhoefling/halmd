--
-- Copyright © 2019-2020 Felix Höfling
-- Copyright © 2019      Roya Ebrahimi Viand
-- Copyright © 2014-2015 Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local log      = require("halmd.io.log")
local mdsim    = require("halmd.mdsim")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")
local utility  = require("halmd.utility")

-- grab C++ wrappers
local region = assert(libhalmd.mdsim.particle_groups.region)

local geometry_selection = {
    excluded = 1
  , included = 2
}

---
-- Region
-- ======
--
-- A particle group represents a subset of particles, which is defined
-- by an instance of particle together with a region in the simulation domain.
--
-- Example::
--
--    -- construct particle instance for given simulation domain
--    local system = halmd.mdsim.particle({particles = 10000})
--    local geometry = halmd.mdsim.geometries.cuboid({lowest_corner = {0,0,0}, length = {1, 1, 1}})
--
--    -- select particles from within this sub-box (region)
--    local group_cuboid = halmd.mdsim.particle_groups.region({
--        particle = system, box = box, label = "subbox"
--      , geometry = geometry, selection = "included"
--    })
--

---
-- Construct particle group from region and species.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param table args.geometry: geometry of the region, instance of :mod:`halmd.mdsim.geometries`
-- :param string args.selection: select particles within or outside the geometry. Allowed values are ``included`` and ``excluded``.
-- :param string args.label: group label
-- :param boolean args.global: particle group can comprise the whole simulation
--                             world (*default:* ``false``)
-- :param boolean args.fluctuating: the number or identity of selected particles
--                                  can vary as the simulation progresses (*default:* ``true``)
--
-- The flags ``global`` and ``fluctuating`` are used, e.g., for the output of
-- thermodynamic quantities via :mod:`halmd.observables.thermodynamics`.
--
-- .. attribute:: particle
--
--    Instance of :class:`halmd.mdsim.particle`
--
-- .. attribute:: size
--
--    Number of particles in group.
--
-- .. attribute:: label
--
--    Instance label.
--
-- .. attribute:: global
--
--    True if the particle group comprises the whole simulation world. This
--    requires that ``args.global`` was set to true upon construction and
--    that ``size`` equals the number of particles in ``particle``.
--
-- .. attribute:: fluctuating
--
--    The value of ``args.fluctuating`` passed upon construction.
--
-- .. method:: to_particle(args)
--
--    :param table args: keyword argruments
--    :param args.particle: instance of :class:`halmd.mdsim.particle` *(optional)*
--    :param args.label: label of the new particle instance *(optional)*
--    :returns: instance of :class:`halmd.mdsim.particle` with data from the particle group
--
--    Copy the particle group to a new particle instance. If no parameters given,
--    a suitable particle instance will be constructed.
--
--    .. note::
--
--       Only positions, mass, species and velocity are copied to the particle instance.
--       Other data (e.g. id, force) will not be copied.
--
--    If ``args.particle`` is present, the particle group will be copied into the given
--    particle instance. Otherwise a new suitable particle instance with the label
--    `args.label` will be created. If ``args.label`` is not given, it defaults to
--    the group label. ``species`` of the new particle instance will be initialized with
--    ``particle.species``.
--
--    .. note::
--
--       ``args.particle`` must reside in the same memory as the group and the number of
--       particles must be equal to ``size``.
--
-- .. method:: disconnect()
--
--    Disconnect region module from profiler.
--
local M = module(function(args)
    utility.assert_type(args, "table")
    local particle = utility.assert_kwarg(args, "particle")
    local box = utility.assert_kwarg(args, "box")
    local geometry = utility.assert_kwarg(args, "geometry")
    local selection = utility.assert_type(utility.assert_kwarg(args, "selection"), "string")
    local label = utility.assert_type(utility.assert_kwarg(args, "label"), "string")
    local global = utility.assert_type(args.global or false, "boolean")
    local fluctuating = utility.assert_type(args.fluctuating == nil and true or args.fluctuating, "boolean")

    if not geometry_selection[selection] then
        error(("unsupported geometry selection '%s'"):format(selection), 2)
    end

    local logger = log.logger({prefix = ("region (%s)"):format(label)})

    -- construct particle group from region in space
    local self = region(particle, box, geometry, geometry_selection[selection], logger)

    -- store label as Lua property
    self.label = property(function(self)
        return label
    end)

    -- capture C++ method to_particle
    local to_particle = assert(self.to_particle)

    -- forward Lua method to_particle
    self.to_particle = function(self, args)
        -- construct particle instance, if none given
        local particle_dest = (args and args.particle) or mdsim.particle({
            dimension = particle.dimension
          , particles = self.size
          , species = particle.nspecies
          , label = (args and args.label) or self.label
          , memory = particle.memory
        })

        to_particle(self, particle, particle_dest)

        return particle_dest
    end

    -- attach particle instance as read-only property
    self.particle = property(function(self)
        return particle
    end)

    -- attach label as read-only property
    self.label = property(function(self)
        return label
    end)

    -- attach global property
    self.global = property(function(self)
        return global and (self.size == particle.nparticle)
    end)

    -- attach fluctuating property
    self.fluctuating = property(function(self)
        return fluctuating
    end)

    -- sequence of signal connections
    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "region module")

    -- connect runtime accumulators to profiler
    local desc = ("region (%s)"):format(label)
    local runtime = assert(self.runtime)
    table.insert(conn, profiler:on_profile(runtime.update_mask, ("update particle mask of %s"):format(desc)))
    table.insert(conn, profiler:on_profile(runtime.update_selection, ("update selection by %s"):format(desc)))

    return self
end)

return M
