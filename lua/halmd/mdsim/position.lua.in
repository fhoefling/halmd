--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module            = require("halmd.utility.module")
local positions         = require("halmd.mdsim.positions")

-- grab C++ wrappers
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local pairs = pairs

local M = module("halmd.mdsim.position")

--
-- construct position module
--
function M.__new(args)
    local particle = assert(args.particle, "missing parameter: particle")
    local position = args.position or "lattice" -- default value
    local reader = args.reader
    if reader and not args.position then
        return positions.phase_space{particle = particle, sample = reader:position(particle)}
    end
    return positions[position]{particle = particle}
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc, globals)

    -- position module choices with descriptions
    local choices = {
        lattice             = positions.lattice.description()
    }

    globals:add("position", po.string():choices(choices), "select initial particle positions module")
end

--
-- write module parameters to HDF5 group
--
-- @param position module instance
-- @param group HDF5 group
--
function M.write_parameters(self, group, globals)
    if self.module ~= positions.phase_space then
        globals:write_attribute("position", h5.string(), self.module.namespace)
    end
end

return M
