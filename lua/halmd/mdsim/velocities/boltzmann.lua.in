--
-- Copyright Â© 2010  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.device")
local mdsim = {
    core                = require("halmd.mdsim.core")
  , particle            = require("halmd.mdsim.particle")
}
require("halmd.modules")
local random            = require("halmd.random")

-- grab C++ wrappers
local boltzmann_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.velocities.boltzmann_2_
      , [3] = libhalmd.mdsim.host.velocities.boltzmann_3_
    }
}
if libhalmd.mdsim.gpu then
    boltzmann_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.velocities.boltzmann_2_
      , [3] = libhalmd.mdsim.gpu.velocities.boltzmann_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert

module("halmd.mdsim.velocities.boltzmann", halmd.modules.register)

--
-- construct boltzmann module
--
function new(args)
    local temperature = args.temperature or 1.12 -- default value

    -- dependency injection
    local particle = mdsim.particle() -- singleton
    local dimension = assert(particle.dimension)
    local random = assert(random())
    local logger = assert(args.logger)

    local boltzmann
    if device() then
        boltzmann = boltzmann_wrapper.gpu[dimension]
    else
        boltzmann = boltzmann_wrapper.host[dimension]
    end
    local velocity = boltzmann(particle, random, temperature, logger)

    local core = mdsim.core()
    -- connect velocity to core
    core:on_setup{velocity.set, tracker = velocity}

    return velocity
end

--
-- connect runtime accumulators to module profiler
--
function profile(self, profiler)
    profiler:on_profile{self, set = "setting particle velocities from Boltzmann distribution"}
end

--
-- returns module description
--
function description()
    return "Boltzmann distribution"
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function options(desc)
    desc:add("temperature", po.float(), "Boltzmann distribution temperature")
end

--
-- read module parameters from HDF5 group
--
function read_parameters(args, group)
    args.temperature = group:read_attribute("temperature", h5.float())
end

--
-- write module parameters to HDF5 group
--
-- @param boltzmann module instance
-- @param group HDF5 group
--
function write_parameters(boltzmann, group)
    group:write_attribute("temperature", h5.float(), boltzmann.temperature)
end
