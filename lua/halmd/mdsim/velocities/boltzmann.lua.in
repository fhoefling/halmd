--
-- Copyright Â© 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")
local random            = require("halmd.random")

---
-- Boltzmann distribution
-- ======================
--
-- This module initialises particle velocities from a Boltzmann distribution.
--
-- .. warning::
--
--    Non-unit masses are not supported yet.
--
-- The velocity distribution of each dimension :math:`i` is a Gaussian with mean
-- :math:`\mu_{v_i} = 0` and width :math:`\sigma_{v_i} = \sqrt{T^*}`,
--
-- .. math::
--
--    f\left(v_i\right) = \sqrt{\frac{1}{2\pi T^*}} \exp\left(\frac{-v_i^2}{2 T^*}\right)
--
-- To account for the finite size of the system, the velocities are shifted,
--
-- .. math::
--
--    \vec{v}_\text{shifted} \equiv \vec{v} - \vec{V}_\text{cm}
--
-- to yield a centre of mass velocity of zero, and scaled,
--
-- .. math::
--
--    \vec{v}_\text{scaled} \equiv \vec{v}_\text{shifted}\;
--    \sqrt{\frac{T^* d}{2E_\text{kin} - \left(\vec{V}_\text{cm}\right)^2}}
--
-- to yield the temperature :math:`T` for a system with :math:`d` positional
-- degrees of freedom, using the centre of mass velocity and kinetic energy,
--
-- .. math::
--
--    \vec{V}_\text{cm} &= \frac{1}{N} \sum_{n = 1}^N \vec{v}_n \\
--
--    2E_\text{kin} &= \frac{1}{N} \sum_{n = 1}^N v_n^2
--

-- grab C++ wrappers
local boltzmann = assert(libhalmd.mdsim.velocities.boltzmann)

---
-- Construct boltzmann module.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param number args.temperature: temperature of distribution
--
-- .. method:: set()
--
--    Initialise particle velocities from Boltzmann distribution.
--
-- .. attribute:: temperature
--
--    Temperature of distribution in reduced units.
--
local M = module(function(args)
    local particle = args.particle
    if not particle then
        error("bad argument 'parameter'", 2)
    end
    local temperature = args.temperature
    if not temperature then
        error("bad argument 'temperature'", 2)
    end
    local rng = random.generator()
    local label = assert(particle.label)
    local logger = log.logger({label = ("boltzmann (%s)"):format(label)})

    -- construct instance
    return boltzmann(particle, rng, temperature, logger)
end)

return M
