--
-- Copyright © 2014      Felix Höfling
-- Copyright © 2010-2012 Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local module            = require("halmd.utility.module")
local random            = require("halmd.random")

---
-- Boltzmann distribution
-- ======================
--
-- This module initialises particle velocities from a Boltzmann distribution.
--
-- The velocity distribution per degree of freedom is a Gaussian with mean
-- :math:`\mu_{v} = 0` and width :math:`\sigma_{v} = \sqrt{\frac{kT}{m}}`,
--
-- .. math::
--
--    f\left(v\right) = \sqrt{\frac{m}{2\pi kT}} \exp\left(\frac{-mv^2}{2 kT}\right)
--
-- To account for the finite size of the system, the velocities are shifted,
--
-- .. math::
--
--    \vec{v}_\text{shifted} \equiv \vec{v} - \vec{V}_\text{cm}
--
-- to yield a centre of mass velocity of zero.
--

-- grab C++ wrappers
local boltzmann = assert(libhalmd.mdsim.velocities.boltzmann)

---
-- Construct boltzmann module.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param number args.temperature: temperature of distribution
-- :param args.rng: instance of :class:`halmd.random.generator` (defaults to default generator for current device)
--
-- .. method:: set()
--
--    Initialise particle velocities from Boltzmann distribution.
--
-- .. attribute:: temperature
--
--    Temperature of the distribution in reduced units. The value can be
--    changed by assignment.
--
local M = module(function(args)
    local particle = utility.assert_kwarg(args, "particle")
    local temperature = utility.assert_kwarg(args, "temperature")
    local rng = args and args.rng or random.generator({memory = particle.memory})
    assert(rng.memory == particle.memory)

    local label = assert(particle.label)
    local logger = log.logger({label = ("boltzmann (%s)"):format(label)})

    -- construct instance
    return boltzmann(particle, rng, temperature, logger)
end)

return M
