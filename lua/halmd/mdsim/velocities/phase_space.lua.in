--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local core              = require("halmd.mdsim.core")
local device            = require("halmd.utility.device")
local log               = require("halmd.io.log")
local module            = require("halmd.utility.module")

-- grab C++ wrappers
local phase_space_wrapper = {
    host = {
        [2] = libhalmd.mdsim.host.velocities.phase_space_2_
      , [3] = libhalmd.mdsim.host.velocities.phase_space_3_
    }
}
if libhalmd.mdsim.gpu then
    phase_space_wrapper.gpu = {
        [2] = libhalmd.mdsim.gpu.velocities.phase_space_2_
      , [3] = libhalmd.mdsim.gpu.velocities.phase_space_3_
    }
end
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert


--
-- construct phase_space module
--
local M = module(function(args)
    -- dependency injection
    local particle = assert(args.particle, "missing parameter: particle")
    local dimension = assert(particle.dimension)
    local sample = assert(args.sample)
    local logger = log.logger({label = "phase_space"})

    local phase_space
    if device.gpu then
        phase_space = phase_space_wrapper.gpu[dimension]
    else
        phase_space = phase_space_wrapper.host[dimension]
    end
    local velocity = phase_space(particle, sample, logger)

    -- connect velocity to core
    core:on_setup(velocity.set)

    return velocity
end)

--
-- connect runtime accumulators to module profiler
--
function M.profile(self, profiler)
    profiler:on_profile{self, set = "setting particle velocities from sample"}
end

return M
