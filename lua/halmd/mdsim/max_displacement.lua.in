--
-- Copyright © 2013  Nicolas Höft
-- Copyright © 2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local utility  = require("halmd.utility")
local module   = require("halmd.utility.module")
local profiler = require("halmd.utility.profiler")

-- grab C++ wrappers
local max_displacement = assert(libhalmd.mdsim.max_displacement)

---
-- Maximum Displacement
-- ====================
--
-- This module monitors the maximum displacement of particles with regard to a
-- certain start position. As this is only needed for the
-- :class:`halmd.mdsim.neighbour` module, it exports no functions and direct
-- construction is not necessary.
--


---
-- Construct Maximum Displacement module
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
--
-- .. method:: disconnect()
--
--    Disconnect module from profiler.
--
local M = module(function(args)
    -- dependency injection
    local box      = utility.assert_kwarg(args, "box")
    local particle = utility.assert_kwarg(args, "particle")

    local self = max_displacement(particle, box)

    local conn = {}
    self.disconnect = utility.signal.disconnect(conn, "max_displacement module")

    -- connect module to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, assert(profiler:on_profile(runtime.zero, "zero maximum displacement")))
    table.insert(conn, assert(profiler:on_profile(runtime.compute, "compute maximum displacement")))

    return self
end)


return M
