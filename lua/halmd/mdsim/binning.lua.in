--
-- Copyright © 2010-2011  Peter Colberg
-- Copyright © 2013-2014  Nicolas Höft
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

local log               = require("halmd.io.log")
local utility           = require("halmd.utility")
local device            = require("halmd.utility.device")
local module            = require("halmd.utility.module")
local profiler          = require("halmd.utility.profiler")

-- grab C++ wrappers
local binning = assert(libhalmd.mdsim.binning)

---
-- Binning
-- ========
--
-- This module implements the method of cell lists. It splits up the simulation box
-- into smaller boxes and assigns each particle into one sub-box. This enables faster
-- look-up for particles that interact with a cut-off potential.
--

---
-- Construct binning module instance.
--
-- :param table args: keyword arguments
-- :param args.particle: instance of :class:`halmd.mdsim.particle`
-- :param args.box: instance of :class:`halmd.mdsim.box`
-- :param table args.r_cut: cutoff radius matrix for the potentials
-- :param number args.skin: neighbour list skin (*default:* ``0.5``)
-- :param number args.occupancy: initial cell occupancy (*GPU variant only, default:* ``0.5``)
--
-- .. attribute:: r_cut
--
--    Cut-off radius matrix for the particle interactions.
--
-- .. attribute:: r_skin
--
--    "Skin" of the particle. This is an additional distance ratio added to the cutoff
--    radius for the minimal edge lengths of the cells.
--
-- .. attribute:: particle
--
--    Instance of :class:`halmd.mdsim.particle`.
--
-- .. method:: disconnect()
--
--    Disconnect binning module from profiler.
--
local M = module(function(args)
    -- cutoff radius matrix of truncated potential
    local r_cut = utility.assert_kwarg(args, "r_cut")
    -- neighbour list skin
    local skin = args.skin or 0.5

    -- dependency injection
    local box = utility.assert_kwarg(args, "box")
    local particle = utility.assert_kwarg(args, "particle")
    local label = (" (%s)"):format(assert(particle.label))

    local logger = log.logger({label = "binning" .. label})
    local dimension = assert(particle.dimension)

    local self
    if particle.memory == "gpu" then
        local occupancy = args.occupancy or 0.5
        self = binning(particle, box, r_cut, skin, occupancy, logger)
    else
        self = binning(particle, box, r_cut, skin, logger)
    end

    -- store particle instance as Lua property
    self.particle = property(function(self) return particle end)

    local conn = {} -- sequence of signal connections
    self.disconnect = utility.signal.disconnect(conn, "binning module")

    -- connect binning module to profiler
    local runtime = assert(self.runtime)
    table.insert(conn, profiler:on_profile(runtime.update, "cell lists update" .. label))

    return self
end)

return M
