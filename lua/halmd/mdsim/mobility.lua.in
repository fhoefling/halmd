--
-- Copyright Â© 2011 Michael Kopp
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

local module     = require("halmd.utility.module")
local mobilities = require("halmd.mdsim.mobilities")

-- grab C++ wrappers
local h5 = libhalmd.h5
local po = libhalmd.po
-- grab standard library
local assert = assert
local pairs = pairs
local property = property

local M = module("halmd.mdsim.mobility")

--
-- construct mobility module
--
function M.__new(args)
    -- If mobility module not explicitely required by commandline/config file don't use one.
    if not args.mobility
    then
        return nil
    end

    -- initialise velocities in each MD step
--    mdsim.fields.constant_velocity{set_flag = true} FIXME

    local name = args.mobility
    local mobility = assert(mobilities[name] , "error while selecting mobility module!")() -- select module and construct it

    -- add a function `name' to class `mobility' in luabind
    -- Functions of classes are exposed to luabind by using `.property(..)'.
    -- This function simply returns the name of the module.
    mobility.name = property(function(self)
        return name
    end)
    return mobility
end

--
-- assemble module options
--
-- @param desc po.options_description
--
function M.options(desc, globals)

    -- mobility module choices with descriptions
    local choices = {
        oseen = mobilities.oseen.description()
    }

    globals:add("mobility", po.string():choices(choices), "select mobility module")
end

--
-- read module parameters from HDF5 group
--
function M.read_parameters(args, group, globals)
    args.mobility = globals:read_attribute("mobility", h5.string())
end

--
-- write module parameters to HDF5 group
--
-- @param mobility module instance
-- @param group HDF5 group
--
function M.write_parameters(mobility, group, globals)
    globals:write_attribute("mobility", h5.string(), mobility.name)
end

return M
