--
-- Copyright Â© 2010-2012  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.modules")
local singleton = require("halmd.singleton")

-- load GPU module if available
pcall(require, "halmd.gpu")

-- grab C++ wrappers
local device_wrapper
if libhalmd.utility.gpu then
    device_wrapper = libhalmd.utility.gpu.device
end
local po = libhalmd.po
-- grab standard library
local assert = assert

---
-- Device management
-- =================
--
-- The device module selects a GPU from the pool of available GPUs, or a subset
-- thereof if a list of devices is passed. It allocates a CUDA context on that
-- device, which will remain active till the program exits. Diagnostic
-- information is logged about CUDA driver and runtime versions, and
-- GPU capabilities.
--
-- Note that this module automatically loads a dynamic plugin that contains
-- GPU-related modules. If the plugin fails to load, e.g. if the CUDA library
-- is not available on the system, GPU support is disabled, and the host is
-- used.
--
-- :func:`halmd.device` may be used to query whether the GPU is being used::
--
--   local device = require("halmd.device")
--   if device() then
--       -- using GPU
--   else
--       -- using host
--   end
--
module("halmd.device", halmd.modules.register, singleton)

--- Query whether HALMD has GPU support.
--
-- This function is useful to enable/disable GPU-related functionality, e.g. options::
--
--    function options(desc)
--        if device.with_gpu() then
--            desc:add("disable-gpu", po.bool_switch(), "disable GPU acceleration")
--        end
--    end
--
-- Note that :func:`halmd.device.with_gpu` does not indicate whether the GPU is
-- actually used. Instead, you may check the return value of :func:`halmd.device`
-- for a non-``nil`` value instead, as shown in the example above.
--
function with_gpu()
    return device_wrapper ~= nil
end

--- Construct device instance.
--
-- :param args.disable_gpu: do *not* use GPU (optional)
-- :param args.devices: list of devices (optional)
-- :returns: instance of device module if GPU is enabled, otherwise ``nil``
--
-- :func:`halmd.device` returns a singleton instance, i.e. the first call will
-- create an instance that is kept alive until the end of program execution,
-- and subsequent calls will return this instance.
--
function new(args)
    if device_wrapper and not args.disable_gpu then
        local devices = args.devices -- optional
        if devices then
            return device_wrapper(devices)
        else
            return device_wrapper()
        end
    end
end

-- override default parameter namespace
namespace = "gpu"

function options(desc, globals)
    if with_gpu() then
        desc:add("devices", po.int_array(), "CUDA device(s)")
        globals:add("disable-gpu", po.bool_switch(), "disable GPU acceleration")
    end
end
