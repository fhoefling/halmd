--
-- Copyright Â© 2010-2011  Peter Colberg
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
--

require("halmd.hooks")

-- load HALMD Lua extension module if not compiled in statically
if not libhalmd then
    require("libhalmd")
end

-- grab modules
local hooks = halmd.hooks
-- grab standard library
local ipairs = ipairs
local rawset = rawset
local setmetatable = setmetatable
local table = table

--
-- This module keeps a registry of all HALMD Lua modules.
--
-- Modules register themselves by supplying the function register
-- as an additional parameter to the module() command.
--
module("halmd.modules")

-- ordered list of registered HALMD modules
local modules = {}

-- ordered list of registered parameter provides
local providers = {}

--
-- register a module
--
-- @param module Lua module
--
function register(module)
    table.insert(modules, module)

    --
    -- construct C++ module
    --
    -- @param module Lua module
    -- @param args script parameter table
    -- @returns C++ module object
    --
    local new = function(module, args)
        --
        -- get module parameter
        --
        -- @param self parameter table
        -- @param key parameter name
        -- @returns parameter value, or nil if not found
        --
        local param = function(self, key)
            local value

            -- script parameter
            if args then
                value = args[key]
            end

            -- parameters providers
            for _, provider in ipairs(providers) do
                local parameters = provider.parameters(module)
                if parameters then
                    value = value or parameters[key]
                end
            end

            -- cache parameter
            rawset(self, key, value)

            return value
        end

        local args = setmetatable({}, { __index = param })
        local object = module.new(args)
        if object then
            hooks.register_object(object, module)
        end
        return object
    end

    local defaults = {
        -- option/parameter namespace
        namespace = module._NAME:match("[^.]+$")
    }

    setmetatable(module, { __call = new, __index = defaults })
end

--
-- register a parameter provider
--
-- @param module Lua module
--
function provider(module)
    table.insert(providers, module)

    -- FIXME read-only iterable proxy table to modules
    module.modules = modules
end
