--
-- Copyright © 2013-2023 Felix Höfling
-- Copyright © 2014      Nicolas Höft
-- Copyright © 2011      Peter Colberg
-- Copyright © 2023      Viktor Skoblin
--
-- This file is part of HALMD.
--
-- HALMD is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Lesser General Public License as
-- published by the Free Software Foundation, either version 3 of
-- the License, or (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Lesser General Public License for more details.
--
-- You should have received a copy of the GNU Lesser General
-- Public License along with this program.  If not, see
-- <http://www.gnu.org/licenses/>.
--

---
-- Numeric
-- =======
--
-- This module provides simple numeric routines in Lua.
--

local M = {}

---
-- Compute the sum of the indexed elements of a table.
--
-- :param table t: input table
-- :returns: sum over all indexed elements in ``t``
--
function M.sum(t)
    local a = 0
    for i = 1, #t do
        a = a + t[i]
    end
    return a
end

---
-- Compute the product of the indexed elements of a table.
--
-- :param table t: input table
-- :returns: product over all indexed elements in ``t``
--
function M.prod(t)
    local a = 1
    for i = 1, #t do
        a = a * t[i]
    end
    return a
end

---
-- Find the last value of a table that satisfies comp(a,b)
--
-- :param table t: input table
-- :param comp: callable that takes two elements of ``t`` and returns ``true`` or ``false``
-- :returns: last element in ``t`` that satisfied ``comp(a,b)``
--
function M.find_comp(t, comp)
    if #t == 0 then return nil end
    local value = t[1]
    for i = 2, #t do
        if comp(value, t[i]) then
            value = t[i]
        end
    end
    return value
end

---
-- Find the maximum value in a table
--
-- :param table t: input table
-- :returns: maximum value in ``t``
--
function M.max(t)
    return M.find_comp(t, function(a,b) return a < b end)
end

---
-- Find the minimum value in a table
--
-- :param table t: input table
-- :returns: minmum value in ``t``
--
function M.min(t)
    return M.find_comp(t, function(a,b) return a > b end)
end

---
-- Create vector of given size with scalar value
--
-- :param number size: number of elements
-- :param value: value for each element of the vector
-- :returns: vector of length :math:`\text{size}` with each element set to ``value``
--
function M.scalar_vector(size, value)
    local vec = {}
    for i = 1, size do
        vec[i] = value
    end
    return vec
end

---
-- Create matrix of given size with scalar value
--
-- :param number rows: number of rows
-- :param number columns: number of columns
-- :param value: value for each element of the matrix
-- :returns: matrix of dimension :math:`\text{rows} \times \text{columns}` with each element set to ``value``
--
function M.scalar_matrix(rows, columns, value)
    local mat = {}
    for i = 1, rows do
        local row = {}
        for j = 1, columns do
            row[j] = value
        end
        mat[i] = row
    end
    return mat
end

---
-- Calculate transpose of matrix
--
-- :param matrix m: input matrix
-- :returns: transpose of ``m``
--
function M.trans(m)
    local t = {}
    for i = 1, #m do
        local row = m[i]
        for j = 1, #row do
            if not t[j] then
                t[j] = {}
            end
            t[j][i] = row[j]
        end
    end
    return t
end

---
-- Return diagonal elements of n×n matrix
--
-- :param matrix m: input square matrix
-- :returns: table of diagonal elements of ``m``
--
function M.diag(m)
    local t = {}
    for i = 1, #m do
        t[i] = m[i][i]
    end
    return t
end

---
-- Add two vectors elementwisely
--
--:param table t1: n-dimensional vector
--:param table t2: n-dimensional vector
--:returns: elementwise sum of two vectors
--
function M.add(t1, t2)
    assert (#t1 == #t2)
    local result = {}
    for i, x in ipairs(t1) do
        result[i] = t1[i] + t2[i]
    end
    return result
end

---
-- Subtract two vectors elementwisely
--
--:param table t1: n-dimensional vector
--:param table t2: n-dimensional vector
--:returns: elementwise difference of two vectors
--
function M.subtract(t1, t2)
    assert (#t1 == #t2)
    local result = {}
    for i, x in ipairs(t1) do
        result[i] = t1[i] - t2[i]
    end
    return result
end

---
-- Add a scalar value to all elements of a vector
--
--:param table t: n-dimensional vector
--:param number a: the scalar to add
--:returns: table with values bigger by a.
--
function M.add_scalar(t, a)
    local result = {}
    for i, x in ipairs(t) do
        result[i] = x + a
    end
    return result
end

---
-- Subtract a scalar value from all elements of a vector
--
--:param table t: n-dimensional vector
--:param number a: the scalar to subtract
--:returns: table with values less by a.
--
function M.subtract_scalar(t, a)
    local result = {}
    for i, x in ipairs(t) do
        result[i] = x - a
    end
    return result
end

---
-- Multiply two vectors elementwisely
--
--:param table t1: n-dimensional vector
--:param table t2: n-dimensional vector
--:returns: elementwise product of two vectors
--
function M.multiply(t1, t2)
    assert (#t1 == #t2)
    local result = {}
    for i, x in ipairs(t1) do
        result[i] = t1[i] * t2[i]
    end
    return result
end

---
-- Multiply all elements of a vector with the same scalar
--
--:param number a: the scalar factor
--:param table t: n-dimensional vector
--:returns: table with values multiplied by a
--
function M.multiply_scalar(a, t)
    local result = {}
    for i, x in ipairs(t) do
        result[i] = a * x
    end
    return result
end

---
-- Divide two vectors elementwisely
--
--:param table t1: n-dimensional vector
--:param table t2: n-dimensional vector
--:returns: elementwise division of two vectors
--
function M.divide(t1, t2)
    assert (#t1 == #t2)
    local result = {}
    for i, x in ipairs(t1) do
        result[i] = t1[i] / t2[i]
    end
    return result
end

---
-- Divide all elements of a vector by the same scalar value
--
--:param table t: n-dimensional vector
--:param number a: the scalar divisor
--:returns: table with values divided by a
--
function M.divide_scalar(t, a)
    local result = {}
    for i, x in ipairs(t) do
        result[i] = x / a
    end
    return result
end

---
-- Get 1-norm of a vector
--
--:param table t: n-dimensional vector
--:returns: 1-norm of the vector
--
function M.norm_1(t)
    local result = 0
    for i, x in ipairs(t) do
        result = result + math.abs(x)
    end
    return result
end

---
-- Get 2-norm of a vector
--
--:param table t: n-dimensional vector
--:returns: 2-norm of the vector
--
function M.norm_2(t)
    local result = 0
    for i, x in ipairs(t) do
        result = result + x * x
    end
    return math.sqrt(result)
end

---
-- Convert one-dimensional offset to multi-dimensional index
--
-- Assumes contiguous storage of the array data in row-major order.
--
-- :param number offset: 1-based one-dimensional offset
-- :param table dims: dimensions (shape) of multi-dimensional array
-- :returns: 1-based multi-dimensional index of array element at ``offset``
--
function M.offset_to_multi_index(offset, dims)
    local index = {}
    offset = offset - 1 -- convert to 0-based offset
    for i = 1, #dims do
        local d = dims[i]
        index[i] = offset % d + 1
        offset = math.floor(offset / d)
    end
    return index
end

---
-- Convert multi-dimensional index to one-dimensional offset
--
-- Assumes contiguous storage of the array data in row-major order.
--
-- :param table index: 1-based multi-dimensional index
-- :param table dims: dimensions (shape) of multi-dimensional array
-- :returns: 1-based offset of array element at ``index``
--
function M.multi_index_to_offset(index, dims)
    local offset = 1
    for i = #dims, 1, -1 do
        offset = index[i] + dims[i] * (offset - 1)
    end
    return offset
end

---
-- Assert that two floating-point numbers are very close.
--
-- Given two floating point numbers :math:`a` and :math:`b` and a tolerance
-- :math:`\epsilon > 0`, the routine asserts that
--
-- .. math::
--
--     |a - b| < \epsilon \min(|a|, |b|)
--
-- :param number value1: value of :math:`a`
-- :param number value2: value of :math:`b`
-- :param number tolerance: value of :math:`\epsilon` *(default: `numeric.limits.double.epsilon`)*
-- :param number level: call stack level for error message *(default: 2)*
--
-- :returns: `value1`
--
function M.assert_close(value1, value2, tolerance, level)
    local tolerance = tolerance or M.limits.double.epsilon
    local level = level or 2

    local abs = math.abs
    local left = abs(value1 - value2)
    local right = tolerance * math.min(abs(value1), abs(value2))
    if left >= right then
        error(("difference (%g) exceeds tolerance (%g)"):format(left, right), level + 1)
    end
    return var
end

---
-- Provide floating-point limits, along the lines of std::numeric_limits in C++:
--
-- `limits.double.epsilon` = 2.2204460492503131e-16
--
M.limits = {
    double = {
        epsilon = 2.2204460492503131e-16    -- DBL_EPSILON
    }
}

return M
