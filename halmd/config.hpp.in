/*
 * Copyright Â© 2010-2012  Peter Colberg
 *
 * This file is part of HALMD.
 *
 * HALMD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this program. If not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifndef HALMD_CONFIG_HPP
#define HALMD_CONFIG_HPP

#define HALMD_LUA_API extern "C"

#ifdef HALMD_WITH_GPU
# define HALMD_GPU_ARCH @HALMD_GPU_ARCH@
# if HALMD_GPU_ARCH >= 130
#  define HALMD_GPU_DOUBLE_PRECISION
# endif
#endif

#ifdef __CUDACC__
# define HALMD_GPU_ENABLED __device__
# define HALMD_GPU_USING(__gpu__, __host__) using __gpu__
#else
# define HALMD_GPU_ENABLED
# define HALMD_GPU_USING(__gpu__, __host__) using __host__
#endif

/**
 * C++11 standards-compliant compilers set __cplusplus == 201103L.
 * This is the case for GCC 4.7 in C++11 mode. To ensure backward
 * compatibility with GCC 4.6 in C++0x mode, check for the macro
 * __GXX_EXPERIMENTAL_CXX0X__ as well.
 */
#if __cplusplus < 201103L && !defined(__GXX_EXPERIMENTAL_CXX0X__)
# define HALMD_NO_CXX11
#endif

/**
 * Template aliases are only available with compilers that support
 * C++11 (not C++0x), i.e. GCC 4.7 and Clang 3.1 or higher.
 * This macro ensure backwards compatibility with GCC 4.6.
 */
#if __cplusplus < 201103L
# define HALMD_NO_TEMPLATE_ALIASES
#endif

/**
 * Enable use of decltype in boost::result_of, which is needed to
 * make boost::transform_iterator work with lambda functions.
 */
#ifndef HALMD_NO_CXX11
# define BOOST_RESULT_OF_USE_DECLTYPE
#endif

#endif /* ! HALMD_CONFIG_HPP */
