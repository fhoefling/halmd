/*
 * Copyright Â© 2010-2012  Peter Colberg
 *
 * This file is part of HALMD.
 *
 * HALMD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef HALMD_CONFIG_HPP
#define HALMD_CONFIG_HPP

#include <boost/config.hpp>

#define HALMD_LUA_API extern "C"

#cmakedefine HALMD_WITH_GPU

#ifdef HALMD_WITH_GPU
# define HALMD_GPU_ARCH @HALMD_GPU_ARCH@
# if HALMD_GPU_ARCH >= 130
#  define HALMD_GPU_DOUBLE_PRECISION
# endif
#endif

#ifdef __CUDACC__
# define HALMD_GPU_ENABLED __device__
# define HALMD_GPU_USING(__gpu__, __host__) using __gpu__
#else
# define HALMD_GPU_ENABLED
# define HALMD_GPU_USING(__gpu__, __host__) using __host__
#endif

/**
 * C++11 standards-compliant compilers set __cplusplus == 201103L.
 * This is the case for GCC 4.7 in C++11 mode. To ensure backward
 * compatibility with GCC 4.6 in C++0x mode, check for a list of
 * C++11 features instead, which is lambda functions, initializer
 * lists and decltype.
 */
#if defined(BOOST_NO_LAMBDAS) || defined(BOOST_NO_INITIALIZER_LISTS) || defined(BOOST_NO_DECLTYPE)
# define HALMD_NO_CXX11
#endif

/**
 * Enable use of decltype in boost::result_of, which is needed to
 * make boost::transform_iterator work with lambda functions.
 */
#ifndef HALMD_NO_CXX11
# define BOOST_RESULT_OF_USE_DECLTYPE
#endif

#endif /* ! HALMD_CONFIG_HPP */
